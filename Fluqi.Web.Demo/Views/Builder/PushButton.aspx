<%@ Page Title="" Language="C#" MasterPageFile="~/Views/Shared/Builder.Master" Inherits="System.Web.Mvc.ViewPage<Fluqi.Models.PushButtonModel>" %>
<%@ Import Namespace="Fluqi.Web.Demo.Helpers" %>


<asp:Content ID="Content1" ContentPlaceHolderID="DemoMainContent" runat="server">
<script src="<%=Url.Content("~/Scripts/button.js")%>" type="text/javascript"></script>
<button id="btn"><%=this.Model.label%>!</button>
</asp:Content>



<asp:Content ID="Content2" ContentPlaceHolderID="DemoExampleContent" runat="server">
<%
	var showIcons1 = Html.CreateButton("showIcons1", "...")
		.Rendering.SetPrettyRender(true).Finish()
		.Events
			.SetClickEvent("return openIconsDialog('Icon');")
		.Finish()
	;

	var showIcons2 = Html.CreateButton("showIcons2", "...")
		.Rendering.SetPrettyRender(true).Finish()
		.Events
			.SetClickEvent("return openIconsDialog('secondaryIcon');")
		.Finish()
	;
	var iconCheatDlg = Html.CreateDialog("icon-cheat");
	this.Model.ConfigureIconCheatSheetDialog(iconCheatDlg);
%>
<%using (Html.BeginForm("PushButton", "Builder")) {%>
	<input type="submit" value="UPDATE" />
	<ul>
		<li><%=Html.LabelFor(vm=>vm.disabled)     %><%=Html.CheckBoxFor(vm=>vm.disabled, "Disables the button, in both action and appearance.")%></li>
		<li><%=Html.LabelFor(vm=>vm.label)        %><%=Html.TextBoxFor(vm=>vm.label, "wide", "Text to appear on the button.")%></li>
		<li><%=Html.LabelFor(vm=>vm.text)         %><%=Html.CheckBoxFor(vm=>vm.text, "Flags whether to show the text label (only appropriate when icons are enabled).")%></li>
		<li><%=Html.LabelFor(vm=>vm.Icon)         %><%=Html.DropDownTipListFor(vm=>vm.Icon, List.IconListNames(), "Icon to appear at the left of the button (before any text); For example 'ui-icon-plusthick'.")%><%showIcons1.Render();%></li>
		<li><%=Html.LabelFor(vm=>vm.IconPosition) %><%=Html.DropDownTipListFor(vm=>vm.IconPosition, List.IconPositionListNames(), "Where icon show be position in the button.")%></li>
		<li><%=Html.LabelFor(vm=>vm.renderAs)     %><%=Html.DropDownTipListFor(vm=>vm.renderAs, List.ButtonOptions(), "How to render the button, hyperlink, button, reset, etc (.Render method must be used for this option to take place).")%></li>
	</ul>

	<hr />
	<h2>Test Harness Options</h2>
	<ul>
		<li><%=Html.LabelFor(vm=>vm.showEvents)    %><%=Html.CheckBoxFor(vm=>vm.showEvents, "Shows how events are wired up.")%></li>
		<li><%=Html.LabelFor(vm=>vm.renderCSS)     %><%=Html.CheckBoxFor(vm=>vm.renderCSS, "Shows the CSS generated by jQuery UI (so non-JavaScript users still see the layout/colours).")%></li>
		<li><%=Html.LabelFor(vm=>vm.prettyRender)  %><%=Html.CheckBoxFor(vm=>vm.prettyRender, "Shows the rendered control/JavaScript in a readable layout.  Turn this option off to see the compressed version (which is the default in a RELEASE build).")%></li>
	</ul>
	<input type="submit" value="UPDATE" />
<%}//form%>
<%using (iconCheatDlg.RenderDialog()) { %>
	<%Html.RenderPartial("Icons");%>
<%} %>
</asp:Content>



<asp:Content ID="Content3" ContentPlaceHolderID="DemoCodeContent" runat="server">
<% 
	Fluqi.Widget.jPushButton.PushButton btn = Html.CreateButton("btn", this.Model.label);
	this.Model.ConfigureButton(btn);
%>
<%=this.Model.CSharpCode(btn)%>
</asp:Content>



<asp:Content ID="Content4" ContentPlaceHolderID="DemoHtmlContent" runat="server">
The HTML for the PushButton demo has been produced with normal HTML.
</asp:Content>



<asp:Content ID="Content5" ContentPlaceHolderID="DemoJavaScriptCodeContent" runat="server">
<% 
	Fluqi.Widget.jPushButton.PushButton btn = Html.CreateButton("btn", this.Model.label);
	this.Model.ConfigureButton(btn);
	btn.Render();
%>
<%=this.Model.JavaScriptCode(btn)%>
</asp:Content>



<asp:Content ID="Content6" ContentPlaceHolderID="DemoMethodsContent" runat="server">
	<ul class="horizontal">
		<li><button id="disable" title="Disables the button.">Disable</button></li>
		<li><button id="enable" title="Enables the button.">Enable</button></li>
		<li><button id="widget" title="Shows the HTML for the .ui-button element.">Widget</button></li>
		<li><button id="refresh" title="Refreshes the visual state of the button (useful when the button checked state is changed).">Refresh</button></li>
		<li><button id="destroy" title="Returns the button to it's pre-init state.">Destroy</button></li>
	</ul>
<% 
	Fluqi.Widget.jPushButton.PushButton btn = Html.CreateButton("btn", this.Model.label);
	this.Model.ConfigureButton(btn);
%>
	<script type="text/javascript">
	$(document).ready(function() {
		$("#enable").click(function() { <%btn.Methods.Enable();%>; });
		$("#disable").click(function() { <%btn.Methods.Disable();%>; });
		$("#widget").click(function() { alert( "Widget HTML:\n\n" + <%btn.Methods.Widget();%>.html() ); });
		$("#refresh").click(function() { <%btn.Methods.Refresh();%>; });
		$("#destroy").click(function() {  if (confirm("are you sure you want to destroy the button?")) <%btn.Methods.Destroy();%>; });
	});
	</script>
</asp:Content>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fluqi</name>
    </assembly>
    <members>
        <member name="T:Fluqi.Widget.jTab.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI Tabs.
            </summary>
        </member>
        <member name="T:Fluqi.Core.Options">
            <summary>
            Models a set of options that are common against all jQuery UI and the class library.  For instance
            "RenderCSS" is a decision you'd make across your application (i.e. do we care about non-JavaScript users
            or not).
            </summary>
        </member>
        <member name="M:Fluqi.Core.Options.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Fluqi.Core.Options.IsEmptyQuotes(System.String)">
            <summary>
            Establishes if the given value is merely a set of empty quotes (either "" or '').
            </summary>
            <param name="value">String to check</param>
            <returns>
            Returns true if string is "" or ''
            Returns false otherwise
            Returns _false_ if string is null or empty!
            </returns>
        </member>
        <member name="M:Fluqi.Core.Options.IsNullOrEmpty(System.String)">
            <summary>
            Shortcut for working out if the given parameter is null or empty
            </summary>
            <param name="value">Value to query</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Core.Options.IsNullEmptyOrDefault(System.String,System.String)">
            <summary>
            Establishes if the given value is null, empty or the same as the default.  We look
            at the default value because if we're rendering the default we don't need to output
            the setting (as it's the default for the jQuery UI control) and thus we can reduce the
            JavaScript needed to initialise the control (which can be fairly big if you've got 20+ 
            options (never mind readability!))
            </summary>
            <param name="value">Options being set</param>
            <param name="defaultValue">Default for the option</param>
            <returns>
            Returns true if the value is null, empty or the same as the default
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Core.Options.IsNullEmptyOrDefault(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Establishes if the given value is null, empty or the same as the default.  We look
            at the default value because if we're rendering the default we don't need to output
            the setting (as it's the default for the jQuery UI control) and thus we can reduce the
            JavaScript needed to initialise the control (which can be fairly big if you've got 20+ 
            options (never mind readability!))
            </summary>
            <param name="values">Options being set</param>
            <param name="defaultValues">Defaults for the option</param>
            <returns>
            Returns true if the value is null, empty or the same as the default
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Core.Options.IsDefault(System.Int32,System.Int32)">
            <summary>
            Establishes if the given value is null, empty or the same as the default.  We look
            at the default value because if we're rendering the default we don't need to output
            the setting (as it's the default for the jQuery UI control) and thus we can reduce the
            JavaScript needed to initialise the control (which can be fairly big if you've got 20+ 
            options (never mind readability!))
            </summary>
            <param name="value">Options being set</param>
            <param name="defaultValue">Default for the option</param>
            <returns>
            Returns true if the value is null, empty or the same as the default
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Core.Options.IsNumeric(System.String)">
            <summary>
            Establishes if the given value is a numeric value or not (note +10 and -10 are considered numeric 
            too).
            </summary>
            <param name="value">Value to query</param>
            <returns>
            Returns true if the value is considered numeric
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Core.Options.IsBool(System.String)">
            <summary>
            Establishes if the given value is a numeric value or not (note +10 and -10 are considered numeric 
            too).
            </summary>
            <param name="value">Value to query</param>
            <returns>
            Returns true if the value is considered numeric
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Core.Options.IsRelativeDateSpec(System.String)">
            <summary>
            Establishes whether the given value is considered to be a string representing
            a relative date.  Some jQuery UI controls (mainly DatePicker) allow you to 
            specify a relate date, "+10d" is "10 days in the future" and "-1m" is "one month in the past"
            </summary>
            <param name="value">Value to be queried</param>
            <returns>
            Returns true if the value is considered to be a relative date specification
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Core.Options.IsSelector(System.String)">
            <summary>
            Establishes whether the given value is considered to be a [jQuery] selector string
            </summary>
            <param name="value">Value to be queried</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Core.Options.IsJSON(System.String)">
            <summary>
            Establishes whether the given value is considered to be a JSON string
            </summary>
            <param name="value">Value to be queried</param>
            <returns>
            Returns true if value is deemed to be a JSON object
            Returns false otherwise
            </returns>
            <remarks>To determine this we simply look for the presence of "{", "}", "," or ":"</remarks>
        </member>
        <member name="M:Fluqi.Core.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Entry point for a widget to add a list of options that the widget should render
            when the JavaScript is written out.
            </summary>
            <param name="options">List of options to add widget settings to</param>
        </member>
        <member name="M:Fluqi.Core.Options.ToString">
            <summary>
            Renders the JavaScript required to set the options with 
            the settings that are configured for this widget.
            </summary>
            <returns>
            Returns the JavaScript to initialise the jQuery UI widget, given the configured options.
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Options.SetDisabled(System.Boolean)">
            <summary>
            Sets the "disabled" flag
            </summary>
            <param name="disabled">
            True: sets disabled on
            False: sets disabled off
            </param>
            <returns>Options object for chainability</returns>
            <remarks>Why you'd want to use this I have no idea!</remarks>
        </member>
        <member name="M:Fluqi.Widget.jTab.Options.SetDisabled(System.Collections.Generic.List{System.Int32})">
            <summary>
            An array containing the position of the tabs (zero-based index) that 
            should be disabled on initialization.
            </summary>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Options.SetDisabled(System.Int32[])">
            <summary>
            An array containing the position of the tabs (zero-based index) that 
            should be disabled on initialization.
            </summary>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Options.SetCollapsible(System.Boolean)">
            <summary>
            Sets whether the active tab is collapsible or not.
            </summary>
            <param name="collapsible">Flags whether collapsible is on or off</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Options.SetEvent(System.String)">
            <summary>
            Sets the event that opens a tab, e.g. "mouseover"
            </summary>
            <param name="evt">Event to use to open a tab</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Options.SetEvent(Fluqi.Core.BrowserEvent.eBrowserEvent)">
            <summary>
            Sets the event that opens a tab, e.g. "mouseover"
            </summary>
            <param name="browserEvent">Event to use to open a tab</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Options.SetHeightStyle(Fluqi.Core.HeightStyle.eHeightStyle)">
            <summary>
            Controls the height of the accordion and each panel.  Possible values are "auto", "fill" and "content".
            </summary>
            <param name="style">Style to use</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Options.SetHeightStyle(System.String)">
            <summary>
            Controls the height of the accordion and each panel.  Possible values are "auto", "fill" and "content".
            </summary>
            <param name="style">Style to use</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Options.#ctor(Fluqi.Widget.jTab.Tabs)">
            <summary>
            Constructor
            </summary>
            <param name="tabs">Tabs to configure options of</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jTab.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jTab.Options.Tabs"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jTab.Options.Tabs"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="P:Fluqi.Widget.jTab.Options.ShowAnimation">
            <summary>
            Defines animation properties when the tab shows.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Options.HideAnimation">
            <summary>
            Defines animation properties when the tab hides.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Options.Disabled">
            <summary>
            Flags whether the "disabled" flag is on or off (default is "false").
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Options.DisabledArray">
            <summary>
            An array containing the position of the tabs (zero-based index) that should be disabled on initialization.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Options.Collapsible">
            <summary>
            Stores whether the tabs are initialised with the collapsible option on or off (default is "false").
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Options.Evt">
            <summary>
            Stores the event [override] to be used when opening/closing tabs (default is "click").
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Options.HeightStyle">
            <summary>
            Stores the height of the tab panel.  Possible values are "auto", "fill" and "content".
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Options.Tabs">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jTab.Options.Tabs"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Utilities.jPosition.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI Position.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Position.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Position.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Position.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.#ctor(Fluqi.Utilities.jPosition.Position)">
            <summary>
            Constructor
            </summary>
            <param name="pos">Position plugin to define options of.</param>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Utilities.jPosition.Options"/> has finished, and 
            returns the Position object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Utilities.jPosition.Options.Position"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.GetPositionScriptOption">
            <summary>
            Gets a script option defining the Position options (this is exposed as the Position control
            is used in other controls).
            </summary>
            <returns>Script option for the Position object</returns>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.GetPositionScriptOption(System.Boolean)">
            <summary>
            Gets a script option defining the Position options (this is exposed as the Position control
            is used in other controls).
            </summary>
            <param name="asChild">Flags that this option should be added a child</param>
            <returns>Script option for the Position object</returns>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetMy(Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetMy(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetMy(System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetMy(System.String,System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetAt(Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetAt(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetAt(System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetAt(System.String,System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetOf(System.String)">
            <summary>
            Element to position against. If you provide a selector, the first matching element 
            will be used. If you provide a jQuery object, the first element will be used. If you 
            provide an event object, the pageX and pageY properties will be used. Example: "#top-menu"
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetWithin(System.String)">
            <summary>
            Element to position within, affecting collision detection. If you provide a selector or 
            jQuery object, the first matching element will be used.
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetCollision(Fluqi.Core.Collision.eCollision)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetCollision(Fluqi.Core.Collision.eCollision,Fluqi.Core.Collision.eCollision)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetCollision(System.String)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetCollision(System.String,System.String)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.SetUsingFunction(System.String)">
            <summary>
            When specified the actual property setting is delegated to this callback. Receives a 
            single parameter which is a hash of top and left values for the position that should be set.
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Options.EvalPositionSetting(System.String,System.String)">
            <summary>
            Evaluates the incoming strings to ensure they are both populated with something sensible,
            and handles the fact they may not be (used by SetMy and SetAt which need this setting sensilbly
            otherwise nonsense gets assigned to the underlying properties.
            </summary>
            <param name="s1">String1</param>
            <param name="s2">String2</param>
            <returns>
            Combination of both s1 and s2 if both are populated, or just the individual string, or empty 
            string if neither are populated.
            </returns>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.Position">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Utilities.jPosition.Options.Position"/> object these options are for
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.MyDefault">
            <summary>
            Holds the default "My" position setting for the position object.
            </summary>
            <remarks>Note the defaults vary by the consuming widget, hence we have to store it</remarks>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.AtDefault">
            <summary>
            Holds the default "At" position setting for the position object.
            </summary>
            <remarks>Note the defaults vary by the consuming widget, hence we have to store it</remarks>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.OfDefault">
            <summary>
            Holds the default "Of" position setting for the position object.
            </summary>
            <remarks>Note the defaults vary by the consuming widget, hence we have to store it</remarks>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.CollisionDefault">
            <summary>
            Holds the default "Collision" position setting for the position object.
            </summary>
            <remarks>Note the defaults vary by the consuming widget, hence we have to store it</remarks>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.UsingFunctionDefault">
            <summary>
            Holds the default "Using" position setting for the position object.
            </summary>
            <remarks>Note the defaults vary by the consuming widget, hence we have to store it</remarks>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.WithinDefault">
            <summary>
            Holds the default "Within" position setting for the position object.
            </summary>
            <remarks>Note the defaults vary by the consuming widget, hence we have to store it</remarks>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.My">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.At">
            <summary>
            Defines which position on the target element to align the positioned element 
            against: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.Of">
            <summary>
            Element to position against. If you provide a selector, the first matching element 
            will be used. If you provide a jQuery object, the first element will be used. 
            If you provide an event object, the pageX and pageY properties will be used. 
            Example: "#top-menu"
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.Within">
            <summary>
            Element to position within, affecting collision detection. If you provide a selector or 
            jQuery object, the first matching element will be used.
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.Collision">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Options.UsingFunction">
            <summary>
            When specified the actual property setting is delegated to this callback. Receives a 
            single parameter which is a hash of top and left values for the position that should be set.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jTab.Tabs">
            <summary>
            A set of properties to apply to a set of jQuery UI Tab.
            </summary>
        </member>
        <member name="T:Fluqi.Core.ControlBase">
            <summary>
            Base class for jQuery UI controls, abstracting out common functionality.
            </summary>
        </member>
        <member name="F:Fluqi.Core.ControlBase._CssClasses">
            <summary>
            Holds the CSS classes to be added when rendering the control.
            </summary>
        </member>
        <member name="F:Fluqi.Core.ControlBase._HtmlAttr">
            <summary>
            Holds a set of additional attributes to be rendered by the control.
            </summary>
        </member>
        <member name="F:Fluqi.Core.ControlBase._Styles">
            <summary>
            Holds a set of Style attributes to be rendered by the control.
            </summary>
        </member>
        <member name="M:Fluqi.Core.ControlBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Fluqi.Core.ControlBase.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.ControlBase.WithCss(System.String,System.Object[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.ControlBase.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "autocomplete" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.ControlBase.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "autocomplete" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.ControlBase.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.ControlBase.WithStyle(System.String,System.String,System.Object[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.ControlBase.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.ControlBase.AddCssClass(System.String)">
            <summary>
            Adds a set of class names to render with the control
            </summary>
            <param name="cssClasses">Set of class names to add (note you can add multiple class names separated by spaces)</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.ControlBase.AddAttribute(System.String,System.String)">
            <summary>
            Adds an additional attribute to be rendered by the control
            </summary>
            <param name="attrName">Name of the attribute</param>
            <param name="attrValue">Value to be associated with the attribute</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.ControlBase.AddStyle(System.String,System.String)">
            <summary>
            Adds an additional embedded style to be rendered by the controll
            </summary>
            <param name="styleName">Name of the style to add, e.g. "width" or "border"</param>
            <param name="styleValue">Value of the style to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.ControlBase.RenderAttributes(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Renders the registered attributes to the provided jStringBuilder object.  The registered
            CSS classes and Style rules are also added at this point (as they're attributes as well really).
            </summary>
        </member>
        <member name="M:Fluqi.Core.Interfaces.IScriptRenderer.RenderStartUpScript">
            <summary>
            Responsible for constructing the JavaScript initalisation script for the control, including the 
            document.ready code and the control itself (including any options enabled).  The generated JavaScript 
            is then added to the response stream.
            </summary>
        </member>
        <member name="T:Fluqi.Core.Interfaces.IControl">
            <summary>
            Interface that controls should implement.
            </summary>
        </member>
        <member name="P:Fluqi.Core.Interfaces.IControl.ID">
            <summary>
            ID of the jQuery UI Tabs object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Core.Interfaces.IControl.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Core.Interfaces.IControl.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.WithCss(System.String,Fluqi.Widget.jTab.Pane[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.WithStyle(System.String,System.String,Fluqi.Widget.jTab.Pane[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.RenderAttributes(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Renders the registered attributes to the provided jStringBuilder object.  The registered
            CSS classes and Style rules are also added at this point (as they're attributes as well really).
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jTab.Tabs._Disposed">
            <summary>
            Flags that the Tabs object has been disposed.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jTab.Tabs._Panes">
            <summary>
            Holds the set of Panes the Tabs object has.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jTab.Tabs._HeaderRendered">
            <summary>
            Flags the Tabs container (the tab headings) has been rendered.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jTab.Tabs._AsDynamic">
            <summary>
            Flags that any Panels added to the Tabs control are to be added as dynamic panes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Response object to write to</param>
            <param name="id">ID of the tabs collection, this must be unique for the page</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.AsDynamic">
            <summary>
            Flags that the tabs are to be loaded dynamically from the server.  
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jTab.Tabs.Panes"/> object to return chaining to the Tabs collection</returns>
            <remarks>
            Note that when loading the tabs dynamically no containers are rendered (yes NONE of them), 
            indeed calling "RenderHeader" on a Pane with the Dynamic setting on _will_ cause an exception.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.RenderHeader">
            <summary>
            Renders the tab headers
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.GetTagHtml">
            <summary>
            Builds and returns the HTML required for the opening of the Tabs control.
            </summary>
            <returns>HTML for the opening of the tabs control.</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.BeginTabs">
            <summary>
            Renders the tab heading (where each tab is laid out horizontally).
            </summary>
            <remarks>
            Note all the class information is also output to maintain styling for non-JavaScript users.
            </remarks>
            <returns>Returns Tabs object to maintain chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.EndTabs">
            <summary>
            Writes the closing part of the Tabs layout (i.e. the closing DIV tag).
            Also writes out the document.ready and tabs initialisation JavaScript (if so defined).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.Dispose(System.Boolean)">
            <summary>
            Forces the closing DIV tag to be output after a Tabs "using" block has completed.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.GetStartUpScript(System.Boolean)">
            <summary>
            Gets the JavaScript initialisation for the control is also added to the response stream if the
            AutoScript rendering option is true.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <returns>JavaScript initialisation</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the tabs control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Tabs.RenderScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jTab.Tabs.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the Tabs control, this is "tabs".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jTab.Tabs.ID">
            <summary>
            ID of the jQuery UI Tabs object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Tabs.Options">
            <summary>
            Specifies the options to be adopted for this set of Tabs (see <see cref="P:Fluqi.Widget.jTab.Tabs.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Tabs.Events">
            <summary>
            Specifies the events to be adopted for the control (see <see cref="P:Fluqi.Widget.jTab.Tabs.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Tabs.Methods">
            <summary>
            Specifies the Methods object that can be used to interact with the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Tabs.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Tabs.Writer">
            <summary>
            Response object to write control data to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Tabs.Panes">
            <summary>
            Returns the Dictionary of tab Panes added to the Tabs control.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jTab.Events">
            <summary>
            A set of properties to apply to a set of jQuery UI Tabs.
            </summary>
            <remarks>
            Properties not supported: 
            	deselectable (depreciated)
            Note "Active" _is_ supported, however it hangs off an individual <see cref="T:Fluqi.Widget.jTab.Pane"/>.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jTab.Events.#ctor(Fluqi.Widget.jTab.Tabs)">
            <summary>
            Constructor
            </summary>
            <param name="tabs">Tabs object to configure events for</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Events.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jTab.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jTab.Events.Tabs"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jTab.Events.Tabs"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Events.SetCreateEvent(System.String)">
            <summary>
            This event is triggered when tabs is created.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Events.SetBeforeActivateEvent(System.String)">
            <summary>
            This event is triggered after clicking a tab.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Events.SetLoadEvent(System.String)">
            <summary>
            This event is triggered after the content of a remote tab has been loaded.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Events.SetActivateEvent(System.String)">
            <summary>
            This event is triggered when a tab activates (after any animation completes).
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Events.SetBeforeLoadEvent(System.String)">
            <summary>
            This event is triggered when a tab is just about to be loaded.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jTab.Events.Tabs">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jTab.Events.Tabs"/> object these events are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Events.CreateEvent">
            <summary>
            This event is triggered when tabs is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Events.BeforeActivateEvent">
            <summary>
            This event is triggered after clicking a tab.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Events.LoadEvent">
            <summary>
            This event is triggered after the content of a remote tab has been loaded.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Events.ActivateEvent">
            <summary>
            This event is triggered when a tab is activated (after any animation has completed).
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Events.BeforeLoadEvent">
            <summary>
            This event is triggered when a remote tab is about to be loaded, after the before the
            beforeActivate event.  Can be cancelled to prevent the tab panel from loading content; 
            though the panel will still be activated.
            This event is triggered just before the Ajax request is made, so modifications can be 
            made to ui.jQXHR and ui.ajaxSettings.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jTab.Methods">
            <summary>
            Methods for changing options (after initialisation).
            </summary>
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
        </member>
        <member name="T:Fluqi.Core.Methods">
            <summary>
            Models methods that can be applied to a jQuery UI control.
            </summary>
        </member>
        <member name="F:Fluqi.Core.Methods._PlugInName">
            <summary>
            Name of the plugin.
            </summary>
        </member>
        <member name="F:Fluqi.Core.Methods._Writer">
            <summary>
            Object the control should write itself to.
            </summary>
        </member>
        <member name="F:Fluqi.Core.Methods._ID">
            <summary>
            ID of the control.
            </summary>
        </member>
        <member name="M:Fluqi.Core.Methods.#ctor(Fluqi.Core.Interfaces.IControl)">
            <summary>
            Constructor.
            </summary>
            <param name="ictl">Control methods are being defined for</param>
        </member>
        <member name="M:Fluqi.Core.Methods.AddQuotesToDate(System.String)">
            <summary>
            Works out what type of date value or object is being passed in (i.e. is a string date like "01/01/2000",
            a numerical date value like "3" for 3 days, or a relateive date specification like "+1w -1d" where some
            of them need quotes, but other don't.
            </summary>
            <param name="dateValue">Value to be queried</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Core.Methods.RenderGetOptionCall(System.String)">
            <summary>
            Writes the JavaScript required to do a "Get" against a control option.
            </summary>
            <param name="optionName">Name of the option to get the value of</param>
        </member>
        <member name="M:Fluqi.Core.Methods.RenderSetOptionCall(System.String,System.String)">
            <summary>
            Writes the JavaScript required to do a "Set" against a control option.
            </summary>
            <param name="optionName">Name of the option to get the value of</param>
            <param name="newValue">New value for the control option.</param>
        </member>
        <member name="M:Fluqi.Core.Methods.RenderSetOptionCall(System.String,System.String,System.String[])">
            <summary>
            Writes the JavaScript required to do a "Set" against a control option.
            </summary>
            <param name="optionName">Name of the option to get the value of</param>
            <param name="format">String.Format string argument - format</param>
            <param name="args">array of arguments to pass to String.Format</param>
        </member>
        <member name="M:Fluqi.Core.Methods.RenderSetOptionCall(System.String,System.String,System.Boolean)">
            <summary>
            Writes the JavaScript required to do a "Set" against a control option.
            </summary>
            <param name="optionName">Name of the option to get the value of</param>
            <param name="newValue">New value for the control option.</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Core.Methods.RenderSetOptionCall(System.String,System.DateTime)">
            <summary>
            Writes the JavaScript required to do a "Set" against a control option.
            </summary>
            <param name="optionName">Name of the option to get the value of</param>
            <param name="newValue">New value for the control option.</param>
        </member>
        <member name="M:Fluqi.Core.Methods.RenderSetOptionCall(System.String,System.Boolean)">
            <summary>
            Writes the JavaScript required to do a "Set" against a control option.
            </summary>
            <param name="optionName">Name of the option to get the value of</param>
            <param name="newValue">New value for the control option.</param>
        </member>
        <member name="M:Fluqi.Core.Methods.RenderSetOptionCall(System.String,System.Int32)">
            <summary>
            Writes the JavaScript required to do a "Set" against a control option.
            </summary>
            <param name="optionName">Name of the option to get the value of</param>
            <param name="newValue">New value for the control option.</param>
        </member>
        <member name="M:Fluqi.Core.Methods.RenderMethodCall(System.String,System.Object[])">
            <summary>
            Writes the JavaScript required to call a given method on the jQuery UI control.
            </summary>
            <param name="methodName">Name of the method to call (as define in the jQuery UI documentation for the control.</param>
            <param name="args">Set of arguments to pass to String.Format</param>
        </member>
        <member name="M:Fluqi.Core.Methods.BuildMethodCall(System.String,System.Object[])">
            <summary>
            Builds up the JavaScript required to call a given method.
            </summary>
            <param name="methodName">Name of the method to call (as define in the jQuery UI documentation for the control.</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>JavaScript required to call the jQuery UI control method</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.GetCollapsible">
            <summary>
            Returns [in JavaScript] the current "collapsible" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetCollapsible(System.Boolean)">
            <summary>
            Set to true to allow an already selected tab to become unselected again upon reselection.
            </summary>
            <param name="newValue">New collapsible setting</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.GetEvent">
            <summary>
            Returns [in JavaScript] the current "event" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetEvent(Fluqi.Core.BrowserEvent.eBrowserEvent)">
            <summary>
            The type of event to be used for selecting a tab.
            </summary>
            <param name="newValue">New event setting</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetEventJS(System.String)">
            <summary>
            The type of event to be used for selecting a tab.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New event setting</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetEvent(System.String,System.Boolean)">
            <summary>
            The type of event to be used for selecting a tab.
            </summary>
            <param name="newValue">New event setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetEvent(System.String)">
            <summary>
            The type of event to be used for selecting a tab.
            </summary>
            <param name="newValue">New event setting</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.GetHeightStyle">
            <summary>
            Controls the height of the accordion and each panel.  Possible values are "auto", "fill" and "content".
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetHeightStyle(Fluqi.Core.HeightStyle.eHeightStyle)">
            <summary>
            Controls the height of the accordion and each panel.  Possible values are "auto", "fill" and "content".
            </summary>
            <param name="style">Style to use</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetHeightStyle(System.String)">
            <summary>
            Controls the height of the accordion and each panel.  Possible values are "auto", "fill" and "content".
            </summary>
            <param name="hs">Style to use</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.GetHide">
            <summary>
            Returns [in JavaScript] the current "hide" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.DisableHide">
            <summary>
            Disables animation, panel is hidden immediately.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetHide(System.String)">
            <summary>
            When <paramref name="value"/> is a string, the panels are hidden using the specified [named] effect. 
            When the value is a JSON object, it is passed directly to the hide method.
            </summary>
            <param name="value">String/JSON object</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetHide(System.Int32)">
            <summary>
            Panel will fade out with the specified duration and default easing.
            </summary>
            <param name="duration">Time in milliseconds for the animation to run</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetHide(Fluqi.Core.Animation.eAnimation,Fluqi.Core.Ease.eEase,System.Int32)">
            <summary>
            Panel will be hidden using the specified parameters.
            </summary>
            <param name="effect">Effect to use, e.g. "slideUp" or "fold"</param>
            <param name="easing">Easing property to adopt</param>
            <param name="duration">Time (in milliseconds) the animation should execute for</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.GetShow">
            <summary>
            Returns [in JavaScript] the current "show" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.DisableShow">
            <summary>
            Disables animation, panel is shown immediately.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetShow(System.String)">
            <summary>
            When <paramref name="value"/> is a string, the panels are shown using the specified [named] effect. 
            When the value is a JSON object, it is passed directly to the show method.
            </summary>
            <param name="value">String/JSON object</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetShow(System.Int32)">
            <summary>
            Panel will fade in with the specified duration and default easing.
            </summary>
            <param name="duration">Time in milliseconds for the animation to run</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetShow(Fluqi.Core.Animation.eAnimation,Fluqi.Core.Ease.eEase,System.Int32)">
            <summary>
            Panel will be shown using the specified parameters.
            </summary>
            <param name="effect">Effect to use, e.g. "slideUp" or "fold"</param>
            <param name="easing">Easing property to adopt</param>
            <param name="duration">Time (in milliseconds) the animation should execute for</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.GetActive">
            <summary>
            Returns [in JavaScript] the active setting.
            To set all tabs to unselected pass -1 as value.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.SetActive(System.Int32)">
            <summary>
            Zero-based index of the tab to be active on initialization. 
            To set all tabs to unselected pass -1 as value.
            </summary>
            <param name="newValue">New active value</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.#ctor(Fluqi.Widget.jTab.Tabs)">
            <summary>
            Constructor
            </summary>
            <param name="tabs">Tabs object to call</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.Destroy">
            <summary>
            Remove the tabs functionality completely. This will return the element back to its pre-init state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.Disable">
            <summary>
            Disable the tabs.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.Disable(System.Int32[])">
            <summary>
            Disable a tab. The selected tab cannot be disabled. To disable more than one tab at once use:
            $('#example').tabs("option","disabled", [1, 2, 3]);
            The second argument is the zero-based index of the tab to be disabled.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.Enable">
            <summary>
            Enable the tabs.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.Enable(System.Int32)">
            <summary>
            Enable a disabled tab. The second argument is the zero-based index of the tab to be enabled.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.Widget">
            <summary>
            Returns the .ui-tabs element.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.Refresh">
            <summary>
            Process any tabs that were added or removed directly in the DOM and recompute the height of the 
            tab panels. Results depend on the content and the heightStyle option.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Methods.Load(System.Int32)">
            <summary>
            Reload the content of an Ajax tab programmatically. This method always loads the tab content 
            from the remote location, even if cache is set to true. Note the remote location is the href
            in the header of the tab.
            <param name="index">
            Zero-based index of the tab to be reloaded.
            </param>
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSlider.Methods">
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
            <summary>
            Methods for changing options (after initialisation).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.#ctor(Fluqi.Widget.jSlider.Slider)">
            <summary>
            Constructor
            </summary>
            <param name="sldr">Slider object to call</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.Destroy">
            <summary>
            Remove the slider functionality completely. This will return the element back to its pre-init state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.Disable">
            <summary>
            Disable the slider.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.Enable">
            <summary>
            Enable the slider.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.Widget">
            <summary>
            Returns the .ui-slider element.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.GetValue">
            <summary>
            Gets the value of the spinner. For single handle sliders.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetValue(System.Int32)">
            <summary>
            Sets the value of the slider. For single handle sliders.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.GetValue(System.Int32)">
            <summary>
            Gets the values of the slider. For multiple handle or range sliders.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetValue(System.Int32,System.Int32)">
            <summary>
            Sets the values of the slider. For multiple handle or range sliders.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.GetAnimate">
            <summary>
            Returns [in JavaScript] the current "animate" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetAnimate(System.Int32)">
            <summary>
            Whether to slide handle smoothly when user click outside handle on the bar. 
            </summary>
            <param name="newValue">New animate setting - in milliseconds</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetAnimate(System.String)">
            <summary>
            Whether to slide handle smoothly when user click outside handle on the bar. 
            </summary>
            <param name="speed">New animate setting - "slow", "normal", or "fast"</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetAnimate(Fluqi.Core.Speed.eSpeed)">
            <summary>
            Whether to slide handle smoothly when user click outside handle on the bar. Will 
            </summary>
            <param name="speed">New animate setting - "slow", "normal", or "fast"</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.GetMax">
            <summary>
            Returns [in JavaScript] the current "max" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetMax(System.Int32)">
            <summary>
            The maximum value of the slider.
            </summary>
            <param name="newValue">New max setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.GetMin">
            <summary>
            Returns [in JavaScript] the current "min" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetMin(System.Int32)">
            <summary>
            The minimum value of the slider.
            </summary>
            <param name="newValue">New min setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.GetOrientation">
            <summary>
            Returns [in JavaScript] the current "orientation" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetOrientation(Fluqi.Core.Orientation.eOrientation)">
            <summary>
            This option determines whether the slider has the min at the left, the max 
            at the right or the min at the bottom, the max at the top. 
            Possible values: 'horizontal', 'vertical'.
            </summary>
            <param name="newValue">New orientation setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetOrientationJS(System.String)">
            <summary>
            This option determines whether the slider has the min at the left, the max 
            at the right or the min at the bottom, the max at the top. 
            Possible values: 'horizontal', 'vertical'.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New orientation setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetOrientation(System.String,System.Boolean)">
            <summary>
            This option determines whether the slider has the min at the left, the max 
            at the right or the min at the bottom, the max at the top. 
            Possible values: 'horizontal', 'vertical'.
            </summary>
            <param name="newValue">New orientation setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetOrientation(System.String)">
            <summary>
            This option determines whether the slider has the min at the left, the max 
            at the right or the min at the bottom, the max at the top. 
            Possible values: 'horizontal', 'vertical'.
            </summary>
            <param name="newValue">New orientation setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.GetRange">
            <summary>
            Returns [in JavaScript] the current "range" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetRange(System.Boolean)">
            <summary>
            If set to true, the slider will detect if you have two handles and create a stylable 
            range element between these two. Two other possible values are 'min' and 'max'. 
            A min range goes from the slider min to one handle. 
            A max range goes from one handle to the slider max.
            </summary>
            <param name="newValue">New range setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetRangeToMin">
            <summary>
            Min range goes from the slider min to one handle. 
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetRangeToMax">
            <summary>
            Max range goes from one handle to the slider max.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.GetStep">
            <summary>
            Returns [in JavaScript] the current "step" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Methods.SetStep(System.Int32)">
            <summary>
            Determines the size or amount of each interval or step the slider takes between min and max. 
            The full specified value range of the slider (max - min) needs to be evenly divisible by the step.
            </summary>
            <param name="newValue">New step setting</param>
        </member>
        <member name="T:Fluqi.Widget.jSlider.Events">
            <summary>
            A set of properties to apply to a set of jQuery UI Slider.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI Slider.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Slider.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Events.#ctor(Fluqi.Widget.jSlider.Slider)">
            <summary>
            Constructor
            </summary>
            <param name="sldr">Slider object to configure events for</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Events.SetCreateEvent(System.String)">
            <summary>
            This event is triggered when slider is created.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Events.SetStartEvent(System.String)">
            <summary>
            This event is triggered when the user starts sliding.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Events.SetSlideEvent(System.String)">
            <summary>
            This event is triggered on every mouse move during slide. Use ui.value (single-handled 
            sliders) to obtain the value of the current handle, $(..).slider('value', index) 
            to get another handles' value.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Events.SetChangeEvent(System.String)">
            <summary>
            This event is triggered on slide stop, or if the value is changed programmatically (by 
            the value method). Takes arguments event and ui. Use event.orginalEvent to detect 
            whether the value changed by mouse, keyboard, or programmatically. Use ui.value 
            (single-handled sliders) to obtain the value of the current handle, 
            $(this).slider('values', index) to get another handle's value.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Events.SetStopEvent(System.String)">
            <summary>
            This event is triggered when the user stops sliding.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Events.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jSlider.Events"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jSlider.Events.Slider"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jSlider.Events.Slider"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Events.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Events.CreateEvent">
            <summary>
            This event is triggered when slider is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Events.StartEvent">
            <summary>
            This event is triggered when the user starts sliding.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Events.SlideEvent">
            <summary>
            This event is triggered on every mouse move during slide. Use ui.value (single-handled 
            sliders) to obtain the value of the current handle, $(..).slider('value', index) 
            to get another handles' value.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Events.ChangeEvent">
            <summary>
            This event is triggered on slide stop, or if the value is changed programmatically (by 
            the value method). Takes arguments event and ui. Use event.orginalEvent to detect 
            whether the value changed by mouse, keyboard, or programmatically. Use ui.value 
            (single-handled sliders) to obtain the value of the current handle, 
            $(this).slider('values', index) to get another handle's value.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Events.StopEvent">
            <summary>
            This event is triggered when the user stops sliding.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Events.Slider">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jSlider.Events.Slider"/> object these events are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jPushButton.PushButton">
            <summary>
            A set of properties to apply to a set of jQuery UI Button.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Core.Interfaces.IControlRenderer.Render">
            <summary>
            Signals the control to be written to the reponse stream (as configured)
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.WithCss(System.String,Fluqi.Widget.jPushButton.PushButton[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Button" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.WithAttribute(System.String,System.String,Fluqi.Widget.jPushButton.PushButton[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Button" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.WithStyle(System.String,System.String,Fluqi.Widget.jPushButton.PushButton[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.#ctor(System.IO.TextWriter,System.String,System.String)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response object to write to</param>
            <param name="id">ID of the button, this must be unique for the page</param>
            <param name="label">Text to appear in the button</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.RenderAs(Fluqi.Core.ButtonType.eButtonType)">
            <summary>
            Specifies how the button will be rendered.  As Fluqi [can] does the rendering of the input as well as
            the JavaScript, it needs to know how you want the button to be rendered (i.e. as an actual 
            Button (the default), Hyperlink, Submit button, etc).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.RenderAsHyperlink(System.String)">
            <summary>
            Renders the Button as a hyperlink
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.RenderAsResetButton">
            <summary>
            Renders the Button as a Reset button
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.RenderAsSubmitButton">
            <summary>
            Renders the Button as a Submit button
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.Render">
            <summary>
            Builds up the HTML for the Button control and adds to the response stream.
            JavaScript initialisation for the control is also added to the response stream if the
            AutoScript rendering option is true.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.GetTagHtml">
            <summary>
            Builds up the HTML for the Button control and options (and returns the generated HTML).
            </summary>
            <returns>Generated HTML for the control.</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.RenderOpeningTag(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Renders the opening tag for the PushButton control.
            </summary>
            <param name="sb">StringBuilder to add the opening tag to</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.RenderTagContent(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Adds the content to appear between the opening and closing tags of the PushButton control.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.RenderClosingTag(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Renders the closing tag for the PushButton control.
            </summary>
            <param name="sb">StringBuilder to add the closing tag to</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and tabs initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the button control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.PushButton.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.PushButton.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the Button control, this is "button".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.PushButton.ID">
            <summary>
            ID of the jQuery UI object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.PushButton.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.PushButton.Label">
            <summary>
            Label to display on the button (can flag not to show the text (but still appear as an ALT tooltip)
            by setting the flag.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.PushButton.InputType">
            <summary>
            Specifies how the button will be rendered.  As Fluqi [can] does the rendering of the input as well as
            the JavaScript, it needs to know how you want the button to be rendered (i.e. as an actual 
            Button (the default), Hyperlink, Submit button, etc).
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.PushButton.Href">
            <summary>
            Specifies the hyperlink destination (when rendering is a Hyperlink).
            </summary>		
        </member>
        <member name="P:Fluqi.Widget.jPushButton.PushButton.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Widget.jPushButton.PushButton.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.PushButton.Events">
            <summary>
            Specifies the events to be adopted for this set of Button (see <see cref="P:Fluqi.Widget.jPushButton.PushButton.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.PushButton.Methods">
            <summary>
            Specifies the events to be adopted for this set of Button (see <see cref="P:Fluqi.Widget.jPushButton.PushButton.Methods"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.PushButton.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jMenu.Menu">
            <summary>
            A set of properties to apply to a set of jQuery UI Menu.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.Items">
            <summary>
            The MenuItems that should appear under the menu
            </summary>
            <returns>MenuItems (so we can go straight into adding menuitems)</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.#ctor(System.IO.TextWriter)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
            <param name="id">ID of the control (which must be unique on the page)</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.GetTagHtml">
            <summary>
            Builds and returns the HTML for the Menu control (basically the DIV).
            JavaScript initialisation for the control is also added to the response stream if the
            AutoScript rendering option is true.
            </summary>
            <returns>HTML for the Menu control.</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.Render">
            <summary>
            Writes the HTML for the Menu control to the response stream.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.Reset(System.IO.TextWriter,System.String)">
            <summary>
            Resets the underlying menu object back to it's initial state
            </summary>
            <param name="writer">Textwriter to use when rendering</param>
            <param name="id">ID to render for the control</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the tabs initialisation script to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the Menu control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.WithCss(System.String,System.Object[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Menu" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Menu" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.WithStyle(System.String,System.String,Fluqi.Widget.jMenu.Menu[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Menu.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Menu.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the Menu control, this is "menu".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Menu.ID">
            <summary>
            ID of the jQuery UI object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Menu.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Menu.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Widget.jMenu.Menu.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Menu.Events">
            <summary>
            Specifies the events to be adopted for the control (see <see cref="P:Fluqi.Widget.jMenu.Menu.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Menu.Methods">
            <summary>
            Specifies the Methods object that can be used to interact with the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Menu.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Menu.Root">
            <summary>
            Specifies any child menu items
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jMenu.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI Menu.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Menu.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI Menu.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Options.#ctor(Fluqi.Widget.jMenu.Menu)">
            <summary>
            Constructor
            </summary>
            <param name="menu">Menu to configure options of</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jMenu.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jMenu.Options.Menu"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jMenu.Options.Menu"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Options.SetDisabled(System.Boolean)">
            <summary>
            Disables the menu if set to true.
            </summary>
            <param name="value">If true disables the menu, enabled otherwise</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Options.SetIcons(Fluqi.Core.Icons.eIconClass)">
            <summary>
            Icons to use for submenus, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
            <param name="subMenuIcon">Sub menu icon to use</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Options.SetIcons(System.String)">
            <summary>
            Icons to use for submenus, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
            <param name="subMenuIcon">Sub menu icon to use</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Options.SetMenus(System.String)">
            <summary>
            Selector for the elements that serve as the menu container, including sub-menus.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Options.SetRole(System.String)">
            <summary>
            Customize the ARIA roles used for the menu and menu items. 
            The default uses "menuitem" for items. 
            Setting the role option to "listbox" will use "option" for items. 
            If set to null, no roles will be set, which is useful if the menu is being controlled by another element that is maintaining focus.
            </summary>
            <param name="role">Role to use</param>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Options.Menu">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jMenu.Options.Menu"/> object these options are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Options.Disabled">
            <summary>
            Disables the menu if set to true.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Options.Icons">
            <summary>
            Icons to use for submenus, matching an icon defined by the jQuery UI CSS Framework.
            submenu (string, default: "ui-icon-carat-1-e")
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Options.Menus">
            <summary>
            Selector for the elements that serve as the menu container, including sub-menus.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Options.Position">
            <summary>
            Identifies the position of the menu widget in relation to the associated input 
            element. The "of" option defaults to the input element, but you can specify another element 
            to position against. You can refer to the jQuery UI Position utility for more details 
            about the various options.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Options.Role">
            <summary>
            Customize the ARIA roles used for the menu and menu items. 
            The default uses "menuitem" for items. 
            Setting the role option to "listbox" will use "option" for items. 
            If set to null, no roles will be set, which is useful if the menu is being controlled by another element that is maintaining focus.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jMenu.Methods">
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
            <summary>
            Methods for changing options (after initialisation).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.#ctor(Fluqi.Widget.jMenu.Menu)">
            <summary>
            Constructor
            </summary>
            <param name="menu">Menu object to call</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Blur">
            <summary>
            Removes focus from a menu, resets any active element styles and triggers the menu's blur event.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Close">
            <summary>
            Removes focus from a menu, resets any active element styles and triggers the menu's blur event.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Collapse">
            <summary>
            Closes the currently active sub-menu.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.CollapseAll">
            <summary>
            Closes all open sub-menus.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Destroy">
            <summary>
            Removes the menu functionality completely. This will return the element back to its pre-init state.
            </summary>		
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Disable">
            <summary>
            Disables the menu.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Enable">
            <summary>
            Enables the menu.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Expand">
            <summary>
            Opens the sub-menu below the currently active item, if one exists.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Focus(System.String)">
            <summary>
            Activates a particular menu item, begins opening any sub-menu if present and triggers the menu's focus
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.IsFirstItem">
            <summary>
            Returns a boolean value stating whether or not the currently active item is the first item in the menu.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.IsLastItem">
            <summary>
            Returns a boolean value stating whether or not the currently active item is the last item in the menu.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Next">
            <summary>
            Moves active state to next menu item.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.NextPage">
            <summary>
            Moves active state to first menu item below the bottom of a scrollable menu or the last item if not scrollable.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Previous">
            <summary>
            Moves active state to previous menu item.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.PreviousPage">
            <summary>
            Moves active state to first menu item above the top of a scrollable menu or the first item if not scrollable.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Refresh">
            <summary>
            Initializes sub-menus and menu items that have not already been initialized. 
            New menu items, including sub-menus can be added to the menu or all of the contents of the menu 
            can be replaced and then initialized with the refresh() method.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Select">
            <summary>
            Selects the currently active menu item, collapses all sub-menus and 
            triggers the menu's select event.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.Widget">
            <summary>
            Returns a jQuery object containing the menu.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.GetDisabled">
            <summary>
            Disables the menu if set to true.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetDisabled(System.Boolean)">
            <summary>
            Disables the menu if set to true.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.GetIcons">
            <summary>
            Icons to use for submenus, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetIcons(System.String)">
            <summary>
            Icons to use for submenus, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
            <param name="submenu"></param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetIcons(Fluqi.Core.Icons.eIconClass)">
            <summary>
            Icons to use for submenus, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
            <param name="submenu"></param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.GetMenus">
            <summary>
            Icons to use for submenus, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetMenus(System.String)">
            <summary>
            Selector for the elements that serve as the menu container, including sub-menus.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.GetPosition">
            <summary>
            Returns [in JavaScript] the current "position" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetPositionJS(System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetPosition(System.String,System.Boolean)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetPosition(System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetPosition(Fluqi.Core.Position.ePosition)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetPosition(System.String,System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing x,y position string values (e.g. ['right','top'] for top right corner)
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetPosition(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing x,y position string values (e.g. ['right','top'] for top right corner)
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetPosition(System.Int32,System.Int32)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing an x,y coordinate pair in pixel offset from left, top corner of viewport (e.g. [350,100]) 
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.GetRole">
            <summary>
            Customize the ARIA roles used for the menu and menu items. 
            The default uses "menuitem" for items. 
            Setting the role option to "listbox" will use "option" for items. 
            If set to null, no roles will be set, which is useful if the menu is being controlled by another element that is maintaining focus.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Methods.SetRole(System.String)">
            <summary>
            Customize the ARIA roles used for the menu and menu items. 
            The default uses "menuitem" for items. 
            Setting the role option to "listbox" will use "option" for items. 
            If set to null, no roles will be set, which is useful if the menu is being controlled by another element that is maintaining focus.
            </summary>
            <param name="role"></param>
        </member>
        <member name="T:Fluqi.Widget.jSelectMenu.Events">
            <summary>
            A set of properties to apply to a set of jQuery UI SelectMenu.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI SelectMenu.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI SelectMenu.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Events.SetChangeEvent(System.String)">
            <summary>
            Triggered when the control changes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Events.SetCreateEvent(System.String)">
            <summary>
            Triggered when the control is created.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Events.SetCloseEvent(System.String)">
            <summary>
            Triggered when the control is closed.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Events.SetFocusEvent(System.String)">
            <summary>
            Triggered when the control gains focus or when any menu item is activated.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Events.SetSelectEvent(System.String)">
            <summary>
            Triggered when an item is selected.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Events.SetOpenEvent(System.String)">
            <summary>
            Triggered when the control item is opened.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Events.#ctor(Fluqi.Widget.jSelectMenu.SelectMenu)">
            <summary>
            Constructor
            </summary>
            <param name="selectMenu">SelectMenu object to configure events for</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Events.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jSelectMenu.Events"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jSelectMenu.Events.SelectMenu"/> object so we can continue defining attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jSelectMenu.Events.SelectMenu"/> object to return chaining to the collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Events.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Events.ChangeEvent">
            <summary>
            Triggered when the control changes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Events.CloseEvent">
            <summary>
            Triggered when the control is closed.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Events.CreateEvent">
            <summary>
            Triggered when the control is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Events.FocusEvent">
            <summary>
            Triggered when the control gains focus or when any menu item is activated.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Events.SelectEvent">
            <summary>
            Triggered when an item is selected.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Events.OpenEvent">
            <summary>
            Triggered when the control item is opened.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Events.SelectMenu">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jSelectMenu.Events.SelectMenu"/> object these events are for
            </summary>
        </member>
        <member name="T:Fluqi.Extension.jSpinner_Extensions">
            <summary>
            Set of extensions to the Html and Page objects for creating a Spinner widget through the library.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.jSpinner_Extensions.CreateSpinner(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a Spinner control that can be configured and later rendered on the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Spinner control</returns>
        </member>
        <member name="M:Fluqi.Extension.jSpinner_Extensions.CreateSpinner(System.Web.UI.Page,System.String)">
            <summary>
            Creates a Spinner control that can be configured and later rendered on the page.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Spinner control</returns>
        </member>
        <member name="T:Fluqi.Extension.jTab_Extensions">
            <summary>
            Set of extensions to the Html and Page objects for creating a Tab widget through the library.
            </summary>
            <summary>
            Set of extensions to the Html and Page objects for creating a DatePicker widget through the library.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.jTab_Extensions.CreateTabs(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a Tabs control that can be configured and later rendered on the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Tabs control</returns>
        </member>
        <member name="M:Fluqi.Extension.jTab_Extensions.CreateTabs(System.Web.UI.Page,System.String)">
            <summary>
            Creates a Tabs control that can be configured and later rendered on the page.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Tabs control</returns>
        </member>
        <member name="M:Fluqi.Extension.jTab_Extensions.EndTabs(System.Web.Mvc.HtmlHelper)">
            <summary>
            Closes the Dialog control HTML (used when the "using" pattern isn't used).
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
        </member>
        <member name="M:Fluqi.Extension.jTab_Extensions.EndTabs(System.Web.UI.Page)">
            <summary>
            Closes the Dialog control HTML (used when the "using" pattern isn't used).
            </summary>
            <param name="page">WebForms page to render the control onto</param>
        </member>
        <member name="M:Fluqi.Extension.jTab_Extensions.CreateDatePicker(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a DatePicker control that can be later rendered onto the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created DatePicker control</returns>
        </member>
        <member name="M:Fluqi.Extension.jTab_Extensions.CreateDatePicker(System.Web.UI.Page,System.String)">
            <summary>
            Creates a DatePicker control that can be later rendered onto the page.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created DatePicker control</returns>
        </member>
        <member name="T:Fluqi.Widget.jDialog.Dialog">
            <summary>
            A set of properties to apply to a set of jQuery UI Dialog.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="F:Fluqi.Widget.jDialog.Dialog._Disposed">
            <summary>
            Flags dialog has been disposed.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Response stream to write the Dialog to</param>
            <param name="id">ID of the control (which must be unique on the page)</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.RenderDialog">
            <summary>
            Writes the opening HTML for the Dialog to the response stream.
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.BeginDialog">
            <summary>
            Writes the opening HTML for the Dialog to the response stream.
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.GetTagHtml">
            <summary>
            Builds and returns the HTML for the opening part of the Dialog control (opening as we have
            to separate the closing so we can have the Dialog conten written to the response stream).
            </summary>
            <returns>Opening HTML for the dialog</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.EndDialog">
            <summary>
            Writes the closing part of the Dialog HTML to the response stream (basically the closing div).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.Dispose(System.Boolean)">
            <summary>
            Writes the closing part of the Dialog to the response stream (i.e. the "using" block is being
            closed).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and tabs initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the dialog control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.WithCss(System.String,Fluqi.Widget.jDialog.Dialog[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Dialog" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Dialog" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.WithStyle(System.String,System.String,Fluqi.Widget.jDialog.Dialog[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Dialog.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Dialog.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the Dialog control, this is "dialog".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Dialog.ID">
            <summary>
            ID of the jQuery UI object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Dialog.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Dialog.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Widget.jDialog.Dialog.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Dialog.Events">
            <summary>
            Specifies the events to be adopted for this control (see <see cref="P:Fluqi.Widget.jDialog.Dialog.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Dialog.Methods">
            <summary>
            Specifies the Methods object that can be used to interact with the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Dialog.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="T:Fluqi.Extension.jDialog_Extensions">
            <summary>
            Set of extensions to the Html and Page objects for creating a Dialog widget through the library.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.jDialog_Extensions.CreateDialog(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a Dialog control that can be configured and later rendered on the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Dialog control</returns>
        </member>
        <member name="M:Fluqi.Extension.jDialog_Extensions.CreateDialog(System.Web.UI.Page,System.String)">
            <summary>
            Creates a Dialog control that can be configured and later rendered on the page.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Dialog control</returns>
        </member>
        <member name="M:Fluqi.Extension.jDialog_Extensions.EndDialog(System.Web.Mvc.HtmlHelper)">
            <summary>
            Closes the Dialog control HTML (used when the "using" pattern isn't used).
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
        </member>
        <member name="M:Fluqi.Extension.jDialog_Extensions.EndDialog(System.Web.UI.Page)">
            <summary>
            Closes the Dialog control HTML (used when the "using" pattern isn't used).
            </summary>
            <param name="page">WebForms page to render the control onto</param>
        </member>
        <member name="T:Fluqi.Widget.jProgressBar.Events">
            <summary>
            A set of events to apply to a set of jQuery UI AutoComplete.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI ProgressBar.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Events.#ctor(Fluqi.Widget.jProgressBar.ProgressBar)">
            <summary>
            Constructor
            </summary>
            <param name="pb">ProgressBar object to configure events for</param>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Events.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jProgressBar.Events"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jProgressBar.Events.ProgressBar"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jProgressBar.Events.ProgressBar"/> object to return chaining to the ProgressBar collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Events.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Events.SetCreateEvent(System.String)">
            <summary>
            This event is triggered when progressbar is created.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Events.SetChangeEvent(System.String)">
            <summary>
            This event is triggered when the value of the progressbar changes.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Events.SetCompleteEvent(System.String)">
            <summary>
            This event is triggered when progressbar is created.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.Events.ProgressBar">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jProgressBar.Events.ProgressBar"/> object these events are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.Events.CreateEvent">
            <summary>
            This event is triggered when progressbar is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.Events.ChangeEvent">
            <summary>
            This event is triggered when the value of the progressbar changes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.Events.CompleteEvent">
            <summary>
            This event is triggered when the value of the progressbar reaches the maximum value of 100.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jDatePicker.Events">
            <summary>
            A set of properties to apply to a set of jQuery UI DatePicker.
            </summary>
            <summary>
            A set of events to apply to a set of jQuery UI DatePicker.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI DatePicker.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Events.SetCreateEvent(System.String)">
            <summary>
            This event is triggered when datepicker is created.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Events.SetBeforeShowEvent(System.String)">
            <summary>
            Can be a function that takes an input field and current datepicker instance and returns an 
            events object to update the datepicker with. It is called just before the datepicker is displayed.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Events.SetBeforeShowDayEvent(System.String)">
            <summary>
            The function takes a date as a parameter and must return an array with [0] equal to true/false 
            indicating whether or not this date is selectable, [1] equal to a CSS class name(s) or '' for 
            the default presentation, and [2] an optional popup tooltip for this date. It is called for 
            each day in the datepicker before it is displayed.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Events.SetOnChangeMonthYearEvent(System.String)">
            <summary>
            Allows you to define your own event when the datepicker moves to a new month and/or year. The 
            function receives the selected year, month (1-12), and the datepicker instance as parameters. 
            this refers to the associated input field.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Events.SetOnCloseEvent(System.String)">
            <summary>
            Allows you to define your own event when the datepicker is closed, whether or not a date is 
            selected. The function receives the selected date as text ('' if none) and the datepicker instance 
            as parameters. this refers to the associated input field.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Events.SetOnSelectEvent(System.String)">
            <summary>
            Allows you to define your own event when the datepicker is selected. The function receives the 
            selected date as text and the datepicker instance as parameters. this refers to the associated 
            input field.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Events.#ctor(Fluqi.Widget.jDatePicker.DatePicker)">
            <summary>
            Constructor
            </summary>
            <param name="dp">DatePicker object to define events for</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Events.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jDatePicker.Events"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jDatePicker.Events.DatePicker"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jDatePicker.Events.DatePicker"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Events.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Events.CreateEvent">
            <summary>
            This event is triggered when datepicker is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Events.BeforeShowEvent">
            <summary>
            Can be a function that takes an input field and current datepicker instance and returns an 
            options object to update the datepicker with. It is called just before the datepicker is displayed.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Events.BeforeShowDayEvent">
            <summary>
            The function takes a date as a parameter and must return an array with [0] equal to true/false 
            indicating whether or not this date is selectable, [1] equal to a CSS class name(s) or '' for 
            the default presentation, and [2] an optional popup tooltip for this date. It is called for 
            each day in the datepicker before it is displayed.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Events.OnChangeMonthYearEvent">
            <summary>
            Allows you to define your own event when the datepicker moves to a new month and/or year. The 
            function receives the selected year, month (1-12), and the datepicker instance as parameters. 
            this refers to the associated input field.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Events.OnCloseEvent">
            <summary>
            Allows you to define your own event when the datepicker is closed, whether or not a date is 
            selected. The function receives the selected date as text ('' if none) and the datepicker instance 
            as parameters. this refers to the associated input field.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Events.OnSelectEvent">
            <summary>
            Allows you to define your own event when the datepicker is selected. The function receives the 
            selected date as text and the datepicker instance as parameters. this refers to the associated 
            input field.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Events.DatePicker">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jDatePicker.Events.DatePicker"/> object these events are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jPushButton.Events">
            <summary>
            A set of properties to apply to a set of jQuery UI Button.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Button.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Events.SetCreateEvent(System.String)">
            <summary>
            This event is triggered when Button is created.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Events.SetClickEvent(System.String)">
            <summary>
            This event doesn't actually exist as part of jQuery UI (no seriously, have a look for yourself
            http://jqueryui.com/demos/button/#events) or at the very least isn't documented.
            But it's a button, chances are you want an event, so we're adding one just for you :)
            </summary>
            <remarks>This is a Fluqi created event, no associated jQuery UI documentation</remarks>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Events.#ctor(Fluqi.Widget.jPushButton.PushButton)">
            <summary>
            Constructor
            </summary>
            <param name="ac">PushButton object to configure events for</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Events.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jPushButton.Events"/> has finished, and 
            returns the <see cref="T:Fluqi.Widget.jPushButton.PushButton"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="T:Fluqi.Widget.jPushButton.PushButton"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Events.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.Events.Button">
            <summary>
            Holds a reference to the <see cref="T:Fluqi.Widget.jPushButton.PushButton"/> object these events are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.Events.CreateEvent">
            <summary>
            This event is triggered when button is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.Events.ClickEvent">
            <summary>
            This event doesn't actually exist as part of jQuery UI (no seriously, have a look for yourself
            http://api.jqueryui.com/button/) or at the very least isn't documented.
            But it's a button, chances are you want an event, so we're adding one just for you :)
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAccordion.Events">
            <summary>
            A set of events to apply to a set of jQuery UI Accordion.
            </summary>
            <summary>
            A set of events to apply to a set of jQuery UI Accordion.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI Accordion.
            </summary>
            <remarks>
            Properties not yet supported:
              header
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Events.SetActivateEvent(System.String)">
            <summary>
            This event is triggered every time the accordion changes. If the accordion is 
            animated, the event will be triggered upon completion of the animation; otherwise, 
            it is triggered immediately.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Events.SetBeforeActivateEvent(System.String)">
            <summary>
            This event is triggered every time the accordion starts to change.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Events.SetCreateEvent(System.String)">
            <summary>
            This event is triggered when accordion is created.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Events.#ctor(Fluqi.Widget.jAccordion.Accordion)">
            <summary>
            Constructor
            </summary>
            <param name="accordion">Accordion object to configure events for</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Events.Finish">
            <summary>
            Used to flag that configuration of events are completed, and 
            returns the <see cref="P:Fluqi.Widget.jAccordion.Events.Accordion"/> object so we can continue defining Accordion attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jAccordion.Events.Accordion"/> object to return chaining to the Accordion</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events representing the control events to use when building the JavaScript
            initialisation of the Tabs widget.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Events.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Events.CreateEvent">
            <summary>
            This event is triggered when accordion is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Events.ActivateEvent">
            <summary>
            This event is triggered every time the accordion changes. If the accordion is animated, 
            the event will be triggered upon completion of the animation; otherwise, it is triggered immediately.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Events.BeforeActivateEvent">
            <summary>
            This event is triggered every time the accordion starts to change.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Events.Accordion">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jAccordion.Events.Accordion"/> object these events are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSpinner.Spinner">
            <summary>
            A set of properties to apply to a set of jQuery UI Spinner.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.#ctor(System.IO.TextWriter)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
            <param name="id">ID of the control (which must be unique on the page)</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.GetTagHtml">
            <summary>
            Builds and returns the HTML for the Spinner control (basically the DIV).
            JavaScript initialisation for the control is also added to the response stream if the
            AutoScript rendering option is true.
            </summary>
            <returns>HTML for the Spinner control.</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.Render">
            <summary>
            Writes the HTML for the Spinner control to the response stream.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.WithCss(System.String,System.Object[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Spinner" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Spinner" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.WithStyle(System.String,System.String,Fluqi.Widget.jSpinner.Spinner[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the tabs initialisation script to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the Spinner control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Spinner.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Spinner.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the Spinner control, this is "spinner".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Spinner.ID">
            <summary>
            ID of the jQuery UI object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Spinner.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Spinner.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Widget.jSpinner.Spinner.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Spinner.Events">
            <summary>
            Specifies the events to be adopted for the control (see <see cref="P:Fluqi.Widget.jSpinner.Spinner.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Spinner.Methods">
            <summary>
            Specifies the Methods object that can be used to interact with the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Spinner.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSpinner.Events">
            <summary>
            A set of properties to apply to a set of jQuery UI Slider.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI Slider.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI Spinner.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Events.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jSpinner.Events"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jSpinner.Events.Spinner"/> object so we can continue defining attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jSpinner.Events.Spinner"/> object to return chaining to the collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Events.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Events.#ctor(Fluqi.Widget.jSpinner.Spinner)">
            <summary>
            Constructor
            </summary>
            <param name="spin">Spinner object to configure events for</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Events.SetChangeEvent(System.String)">
            <summary>
            Triggered when the value of the spinner has changed and the input is no longer focused.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Events.SetCreateEvent(System.String)">
            <summary>
            This event is triggered when spinner is created.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Events.SetSpinEvent(System.String)">
            <summary>
            Triggered during increment/decrement (to determine direction of spin compare current value with ui.value).
            Can be cancelled, preventing the value from being updated.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Events.SetStartEvent(System.String)">
            <summary>
            Triggered before a spin. Can be canceled, preventing the spin from occurring.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Events.SetStopEvent(System.String)">
            <summary>
            Triggered after a spin.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Events.Spinner">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jSpinner.Events.Spinner"/> object these events are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Events.ChangeEvent">
            <summary>
            Triggered when the value of the spinner has changed and the input is no longer focused.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Events.CreateEvent">
            <summary>
            Triggered when the spinner is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Events.SpinEvent">
            <summary>
            Triggered during increment/decrement (to determine direction of spin compare current value with ui.value).
            Can be canceled, preventing the value from being updated.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Events.StartEvent">
            <summary>
            Triggered before a spin. Can be canceled, preventing the spin from occurring.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Events.StopEvent">
            <summary>
            Triggered after a spin.
            </summary>
        </member>
        <member name="T:Fluqi.Extension.jAccordion_Extensions">
            <summary>
            Set of extensions to the Html and Page objects for creating an Accordion widget through the library.
            </summary>
            <summary>
            Set of extensions to the Html and Page objects for creating a PushButton widget through the library.
            </summary>
            <summary>
            Set of extensions to the Html and Page objects for creating an AutoComplete widget through the library.
            </summary>
            <summary>
            Set of extensions to the Html and Page objects for creating a ProgressBar widget through the library.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.jAccordion_Extensions.CreateAccordion(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Creates an accordion control from the given HTML helper object (which can then 
            be configured and rendered).
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <param name="headingTag">Heading tag to use for the accordion panels (defaults to H3)</param>
            <returns>Created accoridon control</returns>
        </member>
        <member name="M:Fluqi.Extension.jAccordion_Extensions.CreateAccordion(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Creates an accordion control from the given HTML helper object (which can then 
            be configured and rendered).
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <param name="headingTag">Heading tag to use for the accordion panels (defaults to H3)</param>
            <returns>Created accoridon control</returns>
        </member>
        <member name="M:Fluqi.Extension.jAccordion_Extensions.CreateAccordion(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates an accordion control from the given HTML helper object (which can then 
            be configured and rendered).  H3 is used as the heading tag.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created accoridon control</returns>
        </member>
        <member name="M:Fluqi.Extension.jAccordion_Extensions.CreateAccordion(System.Web.UI.Page,System.String)">
            <summary>
            Creates an accordion control from the given HTML helper object (which can then 
            be configured and rendered).  H3 is used as the heading tag.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created accoridon control</returns>
        </member>
        <member name="M:Fluqi.Extension.jAccordion_Extensions.CreateButton(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Creates a Button control (see http://jqueryui.com/demos/button/ for details) that can be 
            later configured and rendered to the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <param name="label">Text to appear on the button</param>
            <returns>Created Button control</returns>
        </member>
        <member name="M:Fluqi.Extension.jAccordion_Extensions.CreateButton(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Creates a Button control (see http://jqueryui.com/demos/button/ for details) that can be 
            later configured and rendered to the page.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <param name="label">Text to appear on the button</param>
            <returns>Created Button control</returns>
        </member>
        <member name="M:Fluqi.Extension.jAccordion_Extensions.CreateAutoComplete(System.Web.Mvc.HtmlHelper,System.String,System.String)">
            <summary>
            Creates an AutoComplete control that can then be configured and rendered on the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <param name="source">Source to use for the AutoComplete control 
            (can be a JavaScript array, JavaScript callback function, URL, etc - see http://jqueryui.com/demos/autocomplete/#option-source </param>
            <returns>Created AutoComplete control</returns>
        </member>
        <member name="M:Fluqi.Extension.jAccordion_Extensions.CreateAutoComplete(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Creates an AutoComplete control that can then be configured and rendered on the page.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <param name="source">Source to use for the AutoComplete control 
            (can be a JavaScript array, JavaScript callback function, URL, etc - see http://jqueryui.com/demos/autocomplete/#option-source </param>
            <returns>Created AutoComplete control</returns>
        </member>
        <member name="M:Fluqi.Extension.jAccordion_Extensions.CreateProgressBar(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a ProgressBar control that can be configured and later rendered onto the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created ProgressBar control</returns>
        </member>
        <member name="M:Fluqi.Extension.jAccordion_Extensions.CreateProgressBar(System.Web.UI.Page,System.String)">
            <summary>
            Creates a ProgressBar control that can be configured and later rendered onto the page.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created ProgressBar control</returns>
        </member>
        <member name="T:Fluqi.Core.ScriptOption">
            <summary>
            Represents an "option" for a control, e.g. the "animated" option for the accordion control.
            </summary>
            <remarks>
            Fluqi tries to minimise the amount of generated JavaScript; One of the ways it does
            this is by only rendering options which aren't the default for jQuery UI.  For instance
            the Dialog control opens automatically by default, so we don't render "autoOpen: true" for 
            the Dialog control as there is no need.
            The ScriptOption class helps with all the rendering of these options.
            </remarks>
        </member>
        <member name="M:Fluqi.Core.ScriptOption.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Fluqi.Core.ScriptOption.IsPropertyOption">
            <summary>
            Queries whether this option is Key/Value pair option or not.
            </summary>
            <returns>
            Returns true if it's a key/value option
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Core.ScriptOption.IsEventOption">
            <summary>
            Queries whether the option is storing the source code for an event fired by a control.
            </summary>
            <returns>
            Returns true if it source code for an event.
            Returns false otherwise.
            </returns>
        </member>
        <member name="M:Fluqi.Core.ScriptOption.HasChildren">
            <summary>
            Queries whether there are any further Child options to be consider for _this_ option.
            Note that not only should there be child options, but at least one of the Child options
            should have their Condition as true.  That is _this_ option has child options and at least
            one will be rendered.
            </summary>
            <returns>
            Returns true if _this_ option has child options.
            Returns false otherwise.
            </returns>
        </member>
        <member name="P:Fluqi.Core.ScriptOption.Condition">
            <summary>
            Each option of a control is added to a list of options (<see cref="T:Fluqi.Core.ScriptOptions"/>).
            The Condition flag gives us a convenient way of saying whether an option is the default
            option or not (default options aren't rendered as JavaScript).
            </summary>
        </member>
        <member name="P:Fluqi.Core.ScriptOption.Key">
            <summary>
            Key value for the control option.  This is the name of control option, e.g. "autoOpen" or "closeText"
            in the Dialog control for instance and is rendered when the JavaScript for the control is generated.
            </summary>
        </member>
        <member name="P:Fluqi.Core.ScriptOption.Value">
            <summary>
            Value of the control option.  For instance in the Dialog control we a boolean "autoOpen" option, so
            for this the Value might be "true" or "false" and the full option rendered as "autoOpen: false".
            </summary>
        </member>
        <member name="P:Fluqi.Core.ScriptOption.FunctionPrototype">
            <summary>
            Used for setting the function prototype for an event that can be fired by the jQuery UI 
            controls.  For instance in the Dialog control the "open" event has the signature "event, ui".
            This is used for rendering an inline function (the source for which is set through the MethodSource
            property).
            </summary>
        </member>
        <member name="P:Fluqi.Core.ScriptOption.MethodSource">
            <summary>
            Sets the source code for the FunctionPrototype.
            </summary>
        </member>
        <member name="P:Fluqi.Core.ScriptOption.ChildOptions">
            <summary>
            Stores any child options for this option.  For instance the Dialog control has a Position option
            which has a set of properties of it's own.  The Position option therefore becomes a set of ChildOptions
            </summary>
        </member>
        <member name="P:Fluqi.Core.ScriptOption.IsChild">
            <summary>
            Flags that _this_ object is defining a child option.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jDialog.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI Dialog.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.AddButton(System.String,System.String)">
            <summary>
            Adds a button onto the dialog.
            </summary>
            <param name="label">Label on the button the user will see.</param>
            <param name="methodSource">JavaScript to call when the button is clicked.</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetDisabled(System.Boolean)">
            <summary>
            Disables (true) or enables (false) the dialog. Can be set when initialising (first creating) the dialog.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetAutoOpen(System.Boolean)">
            <summary>
            When autoOpen is true the dialog will open automatically when dialog is called. If false it will stay 
            hidden until .dialog("open") is called on it.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetCloseOnEscape(System.Boolean)">
            <summary>
            Specifies whether the dialog should close when it has focus and the user presses 
            the esacpe (ESC) key.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetCloseText(System.String)">
            <summary>
            Specifies the text for the close button. Note that the close text is visibly hidden 
            when using a standard theme.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetDialogClass(System.String)">
            <summary>
            The specified class name(s) will be added to the dialog, for additional theming.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetDraggable(System.Boolean)">
            <summary>
            If set to true, the dialog will be draggable will be draggable by the titlebar.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetHeight(System.String)">
            <summary>
            The height of the dialog, in pixels. Specifying 'auto' is also supported to make 
            the dialog adjust based on its content.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetHeight(System.Int32)">
            <summary>
            The height of the dialog, in pixels. Specifying 'auto' is also supported to make 
            the dialog adjust based on its content.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetHideEffect(System.String)">
            <summary>
            The effect to be used when the dialog is closed.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetHideEffect(Fluqi.Core.Animation.eAnimation)">
            <summary>
            The effect to be used when the dialog is closed.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetHideMethod(System.String)">
            <summary>
            Function to use when the dialog is closed.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetMaxHeight(System.String)">
            <summary>
            The maximum height to which the dialog can be resized, in pixels.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetMaxHeight(System.Int32)">
            <summary>
            The maximum height to which the dialog can be resized, in pixels.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetMaxWidth(System.String)">
            <summary>
            The maximum width to which the dialog can be resized, in pixels.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetMaxWidth(System.Int32)">
            <summary>
            The maximum width to which the dialog can be resized, in pixels.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetMinHeight(System.Int32)">
            <summary>
            The minimum height to which the dialog can be resized, in pixels.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetMinWidth(System.Int32)">
            <summary>
            The minimum width to which the dialog can be resized, in pixels.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetModal(System.Boolean)">
            <summary>
            If set to true, the dialog will have modal behavior; other items on the page will be 
            disabled (i.e. cannot be interacted with). Modal dialogs create an overlay below the 
            dialog but above other page elements.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetPosition(System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
              A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetPosition(System.String,System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
              Two strings containing x,y position string values (e.g. ['right','top'] for top right corner)
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetPosition(Fluqi.Core.Position.ePosition)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
              A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetPosition(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
              Two strings containing x,y position string values (e.g. ['right','top'] for top right corner)
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetPosition(System.Int32,System.Int32)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
              Two values containing an x,y coordinate pair in pixel offset from left, top corner of viewport 
              (e.g. 350, 100) 
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetResizable(System.Boolean)">
            <summary>
            If set to true, the dialog will be resizable.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetShowEffect(System.String)">
            <summary>
            The effect to be used when the dialog is opened.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetShowEffect(Fluqi.Core.Animation.eAnimation)">
            <summary>
            The effect to be used when the dialog is opened.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetShowMethod(System.String)">
            <summary>
            The effect to be used when the dialog is opened.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetStack(System.Boolean)">
            <summary>
            Specifies whether the dialog will stack on top of other dialogs. This will cause 
            the dialog to move to the front of other dialogs when it gains focus.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetTitle(System.String)">
            <summary>
            Specifies the title of the dialog. Any valid HTML may be set as the title. 
            The title can also be specified by the title attribute on the dialog source element.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetWidth(System.Int32)">
            <summary>
            The width of the dialog, in pixels.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.SetZIndex(System.Int32)">
            <summary>
            The starting z-index for the dialog.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.#ctor(Fluqi.Widget.jDialog.Dialog)">
            <summary>
            Constructor
            </summary>
            <param name="dlg">Dialog to configure options of</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jDialog.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jDialog.Options.Dialog"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jDialog.Options.Dialog"/> object to return chaining to the Dialog object</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Disabled">
            <summary>
            Disables (true) or enables (false) the dialog. Can be set when initialising (first creating) the dialog.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.AutoOpen">
            <summary>
            When autoOpen is true the dialog will open automatically when dialog is called. If false it will stay 
            hidden until .dialog("open") is called on it.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.CloseOnEscape">
            <summary>
            Specifies whether the dialog should close when it has focus and the user presses 
            the esacpe (ESC) key.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.CloseText">
            <summary>
            Specifies the text for the close button. Note that the close text is visibly hidden 
            when using a standard theme.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.DialogClass">
            <summary>
            The specified class name(s) will be added to the dialog, for additional theming.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Draggable">
            <summary>
            If set to true, the dialog will be draggable will be draggable by the titlebar.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Height">
            <summary>
            The height of the dialog, in pixels. Specifying 'auto' is also supported to make 
            the dialog adjust based on its content.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Hide">
            <summary>
            The effect to be used when the dialog is closed.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.MaxHeight">
            <summary>
            The maximum height to which the dialog can be resized, in pixels.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.MaxWidth">
            <summary>
            The maximum width to which the dialog can be resized, in pixels.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.MinHeight">
            <summary>
            The minimum height to which the dialog can be resized, in pixels.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.MinWidth">
            <summary>
            The minimum width to which the dialog can be resized, in pixels.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Modal">
            <summary>
            If set to true, the dialog will have modal behavior; other items on the page will be 
            disabled (i.e. cannot be interacted with). Modal dialogs create an overlay below the 
            dialog but above other page elements.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Position">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
              1) a single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
              2) an array containing an x,y coordinate pair in pixel offset from left, top corner of viewport (e.g. [350,100]) 
              3) an array containing x,y
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Resizable">
            <summary>
            If set to true, the dialog will be resizable.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Show">
            <summary>
            The effect to be used when the dialog is opened.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Stack">
            <summary>
            Specifies whether the dialog will stack on top of other dialogs. This will cause 
            the dialog to move to the front of other dialogs when it gains focus.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Title">
            <summary>
            Specifies the title of the dialog. Any valid HTML may be set as the title. 
            The title can also be specified by the title attribute on the dialog source element.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Width">
            <summary>
            The width of the dialog, in pixels.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.ZIndex">
            <summary>
            The starting z-index for the dialog.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.Dialog">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jDialog.Options.Dialog"/> object these options are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Options.ButtonOptions">
            <summary>
            Stores all the buttons that are added through the interface, so they can be rendered later.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jTab.Pane">
            <summary>
            A set of properties to apply to a set of jQuery UI Tab.
            </summary>
            <summary>
            Holds the definition of a given Tab in a collection of <see cref="T:Fluqi.Widget.jTab.Tabs"/>.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.WithCss(System.String,Fluqi.Widget.jTab.Pane[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.WithStyle(System.String,System.String,Fluqi.Widget.jTab.Pane[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.SetVisibility(System.Boolean)">
            <summary>
            Flags whether this tab Pane is visble or not.
            </summary>
            <param name="isVisble">Flags whether this tab Pane is visble or not.</param>
            <returns>Pane (for chainability)</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.SetTitle(System.String)">
            <summary>
            Sets the title to appear in the tab Pane header.
            </summary>
            <param name="title">Title of the tab</param>
            <returns>Pane (for chainability)</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.Finish">
            <summary>
            Returns the fluent interface back to the Panes collection (i.e. the Parent object to the tab Pane).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.#ctor(System.IO.TextWriter,Fluqi.Widget.jTab.Panes,System.String,System.String,System.Boolean)">
            <summary>
            Constructor for a new tab.  Typically a new tab is added via the method, 
            hence the constructor is internal.
            </summary>
            <param name="writer">Response we're writing the Tab JavaScript definition to</param>
            <param name="owner">Set of panes this pane is part of</param>
            <param name="idOrLocation">
            For static tabs this is the ID of the tab content pane (must be unique on the page).
            For dynamic tabs this is the URL where the content is loaded from.
            </param>
            <param name="title">Title of the tab heading (same as <see cref="P:Fluqi.Widget.jTab.Pane.Title"/> property)</param>
            <param name="isActive">Flags whether this tab should be the active one on page load (same as <see cref="P:Fluqi.Widget.jTab.Pane.IsActive"/> property)</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.Render">
            <summary>
            Writes out the content pane of the Tab to the response
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.RenderHeader(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Writes out the opening part of a jQuery UI tab (the LI)
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.RenderBody(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Writes out the opening part of the content part of the jQuery UI tab (the DIV just after the LI header)
            that belongs to this particular tab.  So basically this marries up the LI and the content for the LI.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Pane.Dispose(System.Boolean)">
            <summary>
            Writes out the closing tag for the content DIV of the tab
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Fluqi.Widget.jTab.Pane.IDOrLocation">
            <summary>
            Specifies the ID for the DIV that holds the tab content (for static tabs), or the URL where
            the content is loaded from (for dynamic tabs).
            </summary>
            <remarks>
            This ID holds the relationship between the URL in the tab header and it's content pane.
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jTab.Pane.Title">
            <summary>
            Specifies the Title that should appear in the tab.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Pane.IsActive">
            <summary>
            Flags whether this tab should be active when the page is first loaded.
            </summary>
            <remarks>
            Note we manage unselecting a tab if a different tab is active, hence the 
            private "_IsActive" flag above.
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jTab.Pane.Index">
            <summary>
            Index of the Tab in the list of Tabs added thus far.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Pane.Visible">
            <summary>
            Flags whether this Pane is to be rendered or not.
            </summary>
            <remarks>
            Note this is very different to show/hide as you would in jQuery.  This is really a server-side thing.
            If you mark a Pane as !Visible the Pane is not rendered at all to the page.  So you will actually have
            less panes on the rendered page.
            This is so you can programmatically remove a Pane from a set of Tabs.  You still define the rendering 
            area, however it won't be rendered if Visible=False.
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jTab.Pane.Panes">
            <summary>
            Holds a reference to the set of tab Panels this pane is being rendered on.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jProgressBar.Methods">
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
            <summary>
            Methods for changing options (after initialisation).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Methods.#ctor(Fluqi.Widget.jProgressBar.ProgressBar)">
            <summary>
            Constructor
            </summary>
            <param name="pb">ProgressBar object to call</param>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Methods.Destroy">
            <summary>
            Remove the ProgressBar functionality completely. This will return the element back to its pre-init state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Methods.Disable">
            <summary>
            Disable the progressbar.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Methods.Enable">
            <summary>
            Enable the progressbar.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Methods.Widget">
            <summary>
            Returns the .ui-progressbar element.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Methods.GetValue">
            <summary>
            Gets the current value of the progressbar.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Methods.SetValue(System.Int32)">
            <summary>
            Sets the current value of the progressbar.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jProgressBar.ProgressBar">
            <summary>
            A set of properties to apply to a set of jQuery UI ProgressBar.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.WithCss(System.String,Fluqi.Widget.jProgressBar.ProgressBar[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "ProgressBar" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "ProgressBar" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.WithStyle(System.String,System.String,Fluqi.Widget.jProgressBar.ProgressBar[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and tabs initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the progress bar control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
            <param name="id">ID of the control (which must be unique on the page)</param>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.GetTagHtml">
            <summary>
            Builds the HTML required to render the ProgressBar control (the DIV basically).
            </summary>
            <returns>Returns this HTML for the ProgressBar</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.Render">
            <summary>
            Writes the HTML for the ProgressBar to the response stream.
            JavaScript initialisation for the control is also added to the response stream if the
            AutoScript rendering option is true.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.ProgressBar.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.ProgressBar.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the ProgressBar control, this is "progressbar".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.ProgressBar.ID">
            <summary>
            ID of the jQuery UI object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.ProgressBar.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.ProgressBar.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Widget.jProgressBar.ProgressBar.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.ProgressBar.Events">
            <summary>
            Specifies the events to be adopted for the control(see <see cref="P:Fluqi.Widget.jProgressBar.ProgressBar.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.ProgressBar.Methods">
            <summary>
            Specifies the Methods object that can be used to interact with the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.ProgressBar.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jDatePicker.Methods">
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
            <summary>
            Methods for changing options (after initialisation).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.#ctor(Fluqi.Widget.jDatePicker.DatePicker)">
            <summary>
            Constructor
            </summary>
            <param name="dp">DatePicker object to call</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Destroy">
            <summary>
            Remove the datepicker functionality completely. This will return the element back to its pre-init state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Disable">
            <summary>
            Disable the datepicker.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Enable">
            <summary>
            Enable the datepicker.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Widget">
            <summary>
            Returns the .ui-datepicker element.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Dialog(System.DateTime)">
            <summary>
            Open a datepicker in a "dialog" box.
            </summary>
            <param name="date">Initial date for the date picker as Date.</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Dialog(System.String)">
            <summary>
            Open a datepicker in a "dialog" box.
            </summary>
            <param name="date">Initial date for the date picker as a string in the current date format.</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Dialog(System.DateTime,System.String)">
            <summary>
            Open a datepicker in a "dialog" box.
            </summary>
            <param name="date">Initial date for the date picker as Date.</param>
            <param name="onSelect">
            A callback function when a date is selected. 
            The function receives the date text and date picker instance as parameters.
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Dialog(System.String,System.String)">
            <summary>
            Open a datepicker in a "dialog" box.
            </summary>
            <param name="date">Initial date for the date picker as a string in the current date format.</param>
            <param name="onSelect">
            A callback function when a date is selected. 
            The function receives the date text and date picker instance as parameters.
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Dialog(System.DateTime,System.String,Fluqi.Widget.jDatePicker.Options)">
            <summary>
            Open a datepicker in a "dialog" box.
            </summary>
            <param name="date">Initial date for the date picker as Date.</param>
            <param name="onSelect">
            A callback function when a date is selected. 
            The function receives the date text and date picker instance as parameters.
            </param>
            <param name="settings">The new settings for the date picker.</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Dialog(System.String,System.String,Fluqi.Widget.jDatePicker.Options)">
            <summary>
            Open a datepicker in a "dialog" box.
            </summary>
            <param name="date">Initial date for the date picker as a string in the current date format.</param>
            <param name="onSelect">
            A callback function when a date is selected. 
            The function receives the date text and date picker instance as parameters.
            </param>
            <param name="settings">The new settings for the date picker.</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Dialog(System.DateTime,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Fluqi.Widget.jDatePicker.Options)">
            <summary>
            Open a datepicker in a "dialog" box.
            </summary>
            <param name="date">Initial date for the date picker as Date.</param>
            <param name="onSelect">A callback function when a date is selected. The function receives the date text and date picker instance as parameters.</param>
            <param name="leftPosition">The position of the left of the dialog</param>
            <param name="topPosition">The position of the top/left of the dialog</param>
            <param name="settings">The new settings for the date picker.</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Dialog(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Fluqi.Widget.jDatePicker.Options)">
            <summary>
            Open a datepicker in a "dialog" box.
            </summary>
            <param name="date">Initial date for the date picker as a string in the current date format.</param>
            <param name="onSelect">
            A callback function when a date is selected. 
            The function receives the date text and date picker instance as parameters.
            </param>
            <param name="leftPosition">The position of the left of the dialog</param>
            <param name="topPosition">The position of the top/left of the dialog</param>
            <param name="settings">The new settings for the date picker.</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.IsDisabled">
            <summary>
            Determines if the datepicker is disabled
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Hide">
            <summary>
            Close a previously opened date picker.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Show">
            <summary>
            Call up a previously attached date picker.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.Refresh">
            <summary>
            Redraw a date picker, after having made some external modifications.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetDate">
            <summary>
            Returns the current date for the datepicker or null if no date has been selected.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDate(System.DateTime)">
            <summary>
            Sets the current date for the datepicker. The new date is a .NET Date object 
            which is converted the JavaScript equivalent (using the jQuery parseDate helper function). 
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.DialogBuilder(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Fluqi.Widget.jDatePicker.Options)">
            <summary>
            As there are so many overrides for the In-Dialog option, the building of the option is
            abstracted out
            </summary>
            <param name="date">Initial date for the date picker as Date (if it's a string it should already have quotes in place).</param>
            <param name="onSelect">
            A callback function when a date is selected. The function receives the date text 
            and date picker instance as parameters.
            </param>
            <param name="leftPosition">The position of the left of the dialog</param>
            <param name="topPosition">The position of the top/left of the dialog</param>
            <param name="settings">The new settings for the date picker.</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetAltField">
            <summary>
            Returns [in JavaScript] the current "altField" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetAltFieldJS(System.String)">
            <summary>
            The jQuery selector for another field that is to be updated with the selected date 
            from the datepicker. Use the altFormat setting to change the format of the date 
            within this field. Leave as blank for no alternate field.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New altField setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetAltField(System.String,System.Boolean)">
            <summary>
            The jQuery selector for another field that is to be updated with the selected date 
            from the datepicker. Use the altFormat setting to change the format of the date 
            within this field. Leave as blank for no alternate field.
            </summary>
            <param name="newValue">New altField setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetAltField(System.String)">
            <summary>
            The jQuery selector for another field that is to be updated with the selected date 
            from the datepicker. Use the altFormat setting to change the format of the date 
            within this field. Leave as blank for no alternate field.
            </summary>
            <param name="newValue">New altField setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetAltFormat">
            <summary>
            Returns [in JavaScript] the current "altFormat" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetAltFormatJS(System.String)">
            <summary>
            The dateFormat to be used for the altField option. This allows one date format to 
            be shown to the user for selection purposes, while a different format is actually 
            sent behind the scenes. For a full list of the possible formats see the formatDate 
            function.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New altFormat setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetAltFormat(System.String)">
            <summary>
            The dateFormat to be used for the altField option. This allows one date format to 
            be shown to the user for selection purposes, while a different format is actually 
            sent behind the scenes. For a full list of the possible formats see the formatDate 
            function
            </summary>
            <param name="newValue">New altFormat setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetAltFormat(System.String,System.Boolean)">
            <summary>
            The dateFormat to be used for the altField option. This allows one date format to 
            be shown to the user for selection purposes, while a different format is actually 
            sent behind the scenes. For a full list of the possible formats see the formatDate 
            function
            </summary>
            <param name="newValue">New altFormat setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetAppendText">
            <summary>
            Returns [in JavaScript] the current "appendText" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetAppendTextJS(System.String)">
            <summary>
            The text to display after each date field, e.g. to show the required format.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New appendText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetAppendText(System.String)">
            <summary>
            The text to display after each date field, e.g. to show the required format.
            </summary>
            <param name="newValue">New appendText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetAppendText(System.String,System.Boolean)">
            <summary>
            The text to display after each date field, e.g. to show the required format.
            </summary>
            <param name="newValue">New appendText setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetAutoSize">
            <summary>
            Returns [in JavaScript] the current "autoSize" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetAutoSize(System.Boolean)">
            <summary>
            Set to true to automatically resize the input field to accommodate 
            dates in the current dateFormat.
            </summary>
            <param name="newValue">New autoSize setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetButtonImage">
            <summary>
            Returns [in JavaScript] the current "buttonImage" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetButtonImageJS(System.String)">
            <summary>
            The URL for the popup button image. If set, buttonText becomes 
            the alt value and is not directly displayed.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New buttonImage setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetButtonImage(System.String,System.Boolean)">
            <summary>
            The URL for the popup button image. If set, buttonText becomes 
            the alt value and is not directly displayed.
            </summary>
            <param name="newValue">New buttonImage setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetButtonImage(System.String)">
            <summary>
            The URL for the popup button image. If set, buttonText becomes 
            the alt value and is not directly displayed.
            </summary>
            <param name="newValue">New buttonImage setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetButtonImageOnly">
            <summary>
            Returns [in JavaScript] the current "buttonImageOnly" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetButtonImageOnly(System.Boolean)">
            <summary>
            Set to true to place an image after the field to use as the trigger 
            without it appearing on a button.
            </summary>
            <param name="newValue">New buttonImageOnly setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetButtonText">
            <summary>
            Returns [in JavaScript] the current "buttonText" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetButtonTextJS(System.String)">
            <summary>
            The text to display on the trigger button. Use in conjunction 
            with showOn equal to 'button' or 'both'.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New buttonText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetButtonText(System.String)">
            <summary>
            The text to display on the trigger button. Use in conjunction 
            with showOn equal to 'button' or 'both'.
            </summary>
            <param name="newValue">New buttonText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetButtonText(System.String,System.Boolean)">
            <summary>
            The text to display on the trigger button. Use in conjunction 
            with showOn equal to 'button' or 'both'.
            </summary>
            <param name="newValue">New buttonText setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetCalculateWeek">
            <summary>
            Returns [in JavaScript] the current "calculateWeek" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetCalculateWeekJS(System.String)">
            <summary>
            A function to calculate the week of the year for a given date. 
            The default implementation uses the ISO 8601 definition: 
            weeks start on a Monday; the first week of the year contains the 
            first Thursday of the year.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New calculateWeek setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetCalculateWeek(System.String)">
            <summary>
            A function to calculate the week of the year for a given date. 
            The default implementation uses the ISO 8601 definition: 
            weeks start on a Monday; the first week of the year contains the 
            first Thursday of the year.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New calculateWeek setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetChangeMonth">
            <summary>
            Returns [in JavaScript] the current "changeMonth" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetChangeMonth(System.Boolean)">
            <summary>
            Allows you to change the month by selecting from a drop-down list. 
            You can enable this feature by setting the attribute to true.
            </summary>
            <param name="newValue">New changeMonth setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetChangeYear">
            <summary>
            Returns [in JavaScript] the current "changeYear" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetChangeYear(System.Boolean)">
            <summary>
            Allows you to change the year by selecting from a drop-down list. 
            You can enable this feature by setting the attribute to true. 
            Use the yearRange option to control which years are made available 
            for selection.
            </summary>
            <param name="newValue">New changeYear setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetCloseText">
            <summary>
            Returns [in JavaScript] the current "closeText" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetCloseTextJS(System.String)">
            <summary>
            The text to display for the close link. This attribute is one of 
            the regionalisation attributes. Use the showButtonPanel to display 
            this button.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New closeText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetCloseText(System.String)">
            <summary>
            The text to display for the close link. This attribute is one of 
            the regionalisation attributes. Use the showButtonPanel to display 
            this button.
            </summary>
            <param name="newValue">New closeText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetCloseText(System.String,System.Boolean)">
            <summary>
            The text to display for the close link. This attribute is one of 
            the regionalisation attributes. Use the showButtonPanel to display 
            this button.
            </summary>
            <param name="newValue">New closeText setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetConstrainInput">
            <summary>
            Returns [in JavaScript] the current "constraintInput" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetConstrainInput(System.Boolean)">
            <summary>
            When true entry in the input field is constrained to those characters 
            allowed by the current dateFormat.
            </summary>
            <param name="newValue">New constraintInput setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetCurrentText">
            <summary>
            Returns [in JavaScript] the current "currentText" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetCurrentTextJS(System.String)">
            <summary>
            The text to display for the current day link. This attribute is 
            one of the regionalisation attributes. Use the showButtonPanel to 
            display this button.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New currentText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetCurrentText(System.String)">
            <summary>
            The text to display for the current day link. This attribute is 
            one of the regionalisation attributes. Use the showButtonPanel to 
            display this button.
            </summary>
            <param name="newValue">New currentText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetCurrentText(System.String,System.Boolean)">
            <summary>
            The text to display for the current day link. This attribute is 
            one of the regionalisation attributes. Use the showButtonPanel to 
            display this button.
            </summary>
            <param name="newValue">New currentText setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetDateFormat">
            <summary>
            Returns [in JavaScript] the current "dateFormat" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDateFormatJS(System.String)">
            <summary>
            The format for parsed and displayed dates. This attribute is one of the 
            regionalisation attributes. For a full list of the possible formats 
            see the formatDate function.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New dateFormat setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDateFormat(System.String)">
            <summary>
            The format for parsed and displayed dates. This attribute is one of the 
            regionalisation attributes. For a full list of the possible formats 
            see the formatDate function.
            </summary>
            <param name="newValue">New dateFormat setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDateFormat(System.String,System.Boolean)">
            <summary>
            The format for parsed and displayed dates. This attribute is one of the 
            regionalisation attributes. For a full list of the possible formats 
            see the formatDate function.
            </summary>
            <param name="newValue">New dateFormat setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetDayNames">
            <summary>
            Returns [in JavaScript] the current "dayNames" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDayNames(System.String[])">
            <summary>
            The list of long day names, starting from Sunday, for use as requested 
            via the dateFormat setting. They also appear as popup hints when hovering over 
            the corresponding column headings. 
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValues">New dayNames setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDayNames(System.Collections.Generic.List{System.String})">
            <summary>
            The list of long day names, starting from Sunday, for use as requested 
            via the dateFormat setting. They also appear as popup hints when hovering over 
            the corresponding column headings. 
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValues">New dayNames setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetDayNamesMin">
            <summary>
            Returns [in JavaScript] the current "dayNamesMin" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDayNamesMin(System.String[])">
            <summary>
            The list of minimised day names, starting from Sunday, 
            for use as column headers within the datepicker. This 
            attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValues">New dayNamesMin setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDayNamesMin(System.Collections.Generic.List{System.String})">
            <summary>
            The list of minimised day names, starting from Sunday, 
            for use as column headers within the datepicker. This 
            attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValues">New dayNamesMin setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetDayNamesShort">
            <summary>
            Returns [in JavaScript] the current "dayNamesShort" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDayNamesShort(System.String[])">
            <summary>
            The list of abbreviated day names, starting from Sunday, 
            for use as requested via the dateFormat setting. 
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValues">New dayNamesShort setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDayNamesShort(System.Collections.Generic.List{System.String})">
            <summary>
            The list of abbreviated day names, starting from Sunday, 
            for use as requested via the dateFormat setting. 
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValues">New dayNamesShort setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetDefaultDate">
            <summary>
            Returns [in JavaScript] the current "defaultDate" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDefaultDateJS(System.String)">
            <summary>
            Set the date to highlight on first opening if the field is blank. 
            Specify either an actual date via a Date object or as a string in 
            the current dateFormat, or a number of days from today (e.g. +7) 
            or a string of values and periods ('y' for years, 'm' for months, 
            'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New defaultDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDefaultDate(System.String,System.Boolean)">
            <summary>
            Set the date to highlight on first opening if the field is blank. 
            Specify either an actual date via a Date object or as a string in 
            the current dateFormat, or a number of days from today (e.g. +7) 
            or a string of values and periods ('y' for years, 'm' for months, 
            'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.
            </summary>
            <param name="newValue">New defaultDate setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDefaultDate(System.String)">
            <summary>
            Set the date to highlight on first opening if the field is blank. 
            Specify either an actual date via a Date object or as a string in 
            the current dateFormat, or a number of days from today (e.g. +7) 
            or a string of values and periods ('y' for years, 'm' for months, 
            'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.
            </summary>
            <param name="newValue">New defaultDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDefaultDate(System.Int32)">
            <summary>
            Set the date to highlight on first opening if the field is blank. 
            Specify either an actual date via a Date object or as a string in 
            the current dateFormat, or a number of days from today (e.g. +7) 
            or a string of values and periods ('y' for years, 'm' for months, 
            'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.
            </summary>
            <param name="newValue">New defaultDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDefaultDate(System.DateTime)">
            <summary>
            Set the date to highlight on first opening if the field is blank. 
            Specify either an actual date via a Date object or as a string in 
            the current dateFormat, or a number of days from today (e.g. +7) 
            or a string of values and periods ('y' for years, 'm' for months, 
            'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.
            </summary>
            <param name="newValue">New defaultDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetDuration">
            <summary>
            Returns [in JavaScript] the current "duration" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDuration(System.Int32)">
            <summary>
            Control the speed at which the datepicker appears, 
            Duration in milliseconds
            </summary>
            <param name="newValue">Duration in milliseconds</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDuration(System.String)">
            <summary>
            Control the speed at which the datepicker appears, using one of the inbuilt
            constants of "slow", "normal" or "fast"
            </summary>
            <param name="newValue">Duration in milliseconds</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetDuration(Fluqi.Core.Speed.eSpeed)">
            <summary>
            Control the speed at which the datepicker appears, 
            </summary>
            <param name="speed">One of the three predefined speeds ("slow", "normal", "fast").</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetFirstDay">
            <summary>
            Returns [in JavaScript] the current "firstDay" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetFirstDay(System.Int32)">
            <summary>
            Set the first day of the week: Sunday is 0, Monday is 1, ... 
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValue">New firstDay setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetGotoCurrent">
            <summary>
            Returns [in JavaScript] the current "gotoCurrent" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetGotoCurrent(System.Boolean)">
            <summary>
            When true the current day link moves to the currently 
            selected date instead of today.
            </summary>
            <param name="newValue">New gotoCurrent setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetHideIfNoPrevNext">
            <summary>
            Returns [in JavaScript] the current "hideIfNoPrevNext" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetHideIfNoPrevNext(System.Boolean)">
            <summary>
            Normally the previous and next links are disabled when not applicable 
            (see minDate/maxDate). You can hide them altogether by setting this 
            attribute to true.
            </summary>
            <param name="newValue">New hideIfNoPrevNext setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetIsRTL">
            <summary>
            Returns [in JavaScript] the current "isRTL" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetIsRTL(System.Boolean)">
            <summary>
            True if the current language is drawn from right to left. 
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValue">New isRTL setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetMaxDate">
            <summary>
            Returns [in JavaScript] the current "maxDate" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMaxDateJS(System.String)">
            <summary>
            Set a maximum selectable date as a string of values and periods 
            ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, 
            e.g. '+1m +1w'), or null for no limit.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New maxDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMaxDate(System.String)">
            <summary>
            Set a maximum selectable date as a string of values and periods 
            ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, 
            e.g. '+1m +1w'), or null for no limit.
            </summary>
            <param name="newValue">New maxDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMaxDate(System.Int32)">
            <summary>
            Set a maximum selectable date as a number of days from 
            today (e.g. +7)
            </summary>
            <param name="newValue">New maxDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMaxDate(System.DateTime)">
            <summary>
            Set a maximum selectable date via a Date object.
            </summary>
            <param name="newValue">New maxDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetMinDate">
            <summary>
            Returns [in JavaScript] the current "minDate" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMinDateJS(System.String)">
            <summary>
            Set a minimum selectable date via a string of values 
            and periods ('y' for years, 'm' for months, 'w' for weeks, 
            'd' for days, e.g. '-1y -1m'), or null for no limit.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New minDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMinDate(System.String,System.Boolean)">
            <summary>
            Set a minimum selectable date via a string of values 
            and periods ('y' for years, 'm' for months, 'w' for weeks, 
            'd' for days, e.g. '-1y -1m'), or null for no limit.
            </summary>
            <param name="newValue">New minDate setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMinDate(System.String)">
            <summary>
            Set a minimum selectable date via a string of values 
            and periods ('y' for years, 'm' for months, 'w' for weeks, 
            'd' for days, e.g. '-1y -1m'), or null for no limit.
            </summary>
            <param name="newValue">New minDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMinDate(System.DateTime)">
            <summary>
            Set a minimum selectable date via a Date object.
            </summary>
            <param name="newValue">New minDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMinDate(System.Int32)">
            <summary>
            Set a minimum selectable date via number of days from today 
            (e.g. +7).
            </summary>
            <param name="newValue">New minDate setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetMonthNames">
            <summary>
            Returns [in JavaScript] the current "monthNames" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMonthNames(System.Collections.Generic.List{System.String})">
            <summary>
            The list of full month names, for use as requested via the dateFormat setting.
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValues">New monthNames setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMonthNames(System.String[])">
            <summary>
            The list of full month names, for use as requested via the dateFormat setting.
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValues">New monthNames setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetMonthNamesShort">
            <summary>
            Returns [in JavaScript] the current "monthNamesShort" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMonthNamesShort(System.String[])">
            <summary>
            The list of abbreviated month names, as used in the month header on 
            each datepicker and as requested via the dateFormat setting. 
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValues">New monthNamesShort setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetMonthNamesShort(System.Collections.Generic.List{System.String})">
            <summary>
            The list of abbreviated month names, as used in the month header on 
            each datepicker and as requested via the dateFormat setting. 
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValues">New monthNamesShort setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetNavigationAsDateFormat">
            <summary>
            Returns [in JavaScript] the current "navigationAsDateFormat" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetNavigationAsDateFormat(System.Boolean)">
            <summary>
            When true the formatDate function is applied to the prevText, nextText, 
            and currentText values before display, allowing them to display the 
            target month names for example
            </summary>
            <param name="newValue">New navigationAsDateFormat setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetNextText">
            <summary>
            Returns [in JavaScript] the current "nextText" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetNextTextJS(System.String)">
            <summary>
            The text to display for the next month link. This attribute is one of the 
            regionalisation attributes. With the standard ThemeRoller styling, 
            this value is replaced by an icon.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New nextText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetNextText(System.String,System.Boolean)">
            <summary>
            The text to display for the next month link. This attribute is one of the 
            regionalisation attributes. With the standard ThemeRoller styling, 
            this value is replaced by an icon.
            </summary>
            <param name="newValue">New nextText setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetNextText(System.String)">
            <summary>
            The text to display for the next month link. This attribute is one of the 
            regionalisation attributes. With the standard ThemeRoller styling, 
            this value is replaced by an icon.
            </summary>
            <param name="newValue">New nextText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetNumberOfMonths">
            <summary>
            Returns [in JavaScript] the current "numberOfMonths" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetNumberOfMonths(System.Int32)">
            <summary>
            Set how many months to show at once. 
            or can be a two-element array to define the number of rows and columns to display
            </summary>
            <param name="newValue">New numberOfMonths setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetNumberOfMonths(System.Int32,System.Int32)">
            <summary>
            Set how many months to show at once. 
            </summary>
            <param name="numRows">Number of rows</param>
            <param name="numCols">Number of columns</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetPrevText">
            <summary>
            Returns [in JavaScript] the current "prevText" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetPrevTextJS(System.String)">
            <summary>
            The text to display for the previous month link. This attribute 
            is one of the regionalisation attributes. With the standard 
            ThemeRoller styling, this value is replaced by an icon.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New prevText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetPrevText(System.String,System.Boolean)">
            <summary>
            The text to display for the previous month link. This attribute 
            is one of the regionalisation attributes. With the standard 
            ThemeRoller styling, this value is replaced by an icon.
            </summary>
            <param name="newValue">New prevText setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetPrevText(System.String)">
            <summary>
            The text to display for the previous month link. This attribute 
            is one of the regionalisation attributes. With the standard 
            ThemeRoller styling, this value is replaced by an icon.
            </summary>
            <param name="newValue">New prevText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetSelectOtherMonths">
            <summary>
            Returns [in JavaScript] the current "selectOtherMonths" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetSelectOtherMonths(System.Boolean)">
            <summary>
            When true days in other months shown before or after the current month 
            are selectable. This only applies if showOtherMonths is also true
            </summary>
            <param name="newValue">New selectOtherMonths setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetShortYearCutoff">
            <summary>
            Returns [in JavaScript] the current "shortYearCutoff" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShortYearCutoffJS(System.String)">
            <summary>
            Set the cutoff year for determining the century for a date (used in 
            conjunction with dateFormat 'y'). If a numeric value (0-99) is provided then 
            this value is used directly. 
            If a string value is provided then it is converted to a number and 
            added to the current year. Once the cutoff year is calculated, any dates 
            entered with a year value less than or equal to it are considered to be in 
            the current century, while those greater than it are deemed to be in the previous century.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New shortYearCutoff setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShortYearCutoff(System.String,System.Boolean)">
            <summary>
            Set the cutoff year for determining the century for a date (used in 
            conjunction with dateFormat 'y'). If a numeric value (0-99) is provided then 
            this value is used directly. 
            If a string value is provided then it is converted to a number and 
            added to the current year. Once the cutoff year is calculated, any dates 
            entered with a year value less than or equal to it are considered to be in 
            the current century, while those greater than it are deemed to be in the previous century.
            </summary>
            <param name="newValue">New shortYearCutoff setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShortYearCutoff(System.String)">
            <summary>
            Set the cutoff year for determining the century for a date (used in 
            conjunction with dateFormat 'y'). If a numeric value (0-99) is provided then 
            this value is used directly. 
            If a string value is provided then it is converted to a number and 
            added to the current year. Once the cutoff year is calculated, any dates 
            entered with a year value less than or equal to it are considered to be in 
            the current century, while those greater than it are deemed to be in the previous century.
            </summary>
            <param name="newValue">New shortYearCutoff setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShortYearCutoff(System.Int32)">
            <summary>
            Set the cutoff year for determining the century for a date (used in 
            conjunction with dateFormat 'y'). If a numeric value (0-99) is provided then 
            this value is used directly. 
            If a string value is provided then it is converted to a number and 
            added to the current year. Once the cutoff year is calculated, any dates 
            entered with a year value less than or equal to it are considered to be in 
            the current century, while those greater than it are deemed to be in the previous century.
            </summary>
            <param name="newValue">New shortYearCutoff setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetShowAnim">
            <summary>
            Returns [in JavaScript] the current "showAnim" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowAnimJS(System.String)">
            <summary>
            Set the name of the animation used to show/hide the datepicker. Use 'show' 
            (the default), 'slideDown', 'fadeIn', any of the show/hide jQuery UI effects, 
            or '' for no animation
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New showAnim setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowAnim(System.String,System.Boolean)">
            <summary>
            Set the name of the animation used to show/hide the datepicker. Use 'show' 
            (the default), 'slideDown', 'fadeIn', any of the show/hide jQuery UI effects, 
            or '' for no animation
            </summary>
            <param name="newValue">New showAnim setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowAnim(System.String)">
            <summary>
            Set the name of the animation used to show/hide the datepicker. Use 'show' 
            (the default), 'slideDown', 'fadeIn', any of the show/hide jQuery UI effects, 
            or '' for no animation
            </summary>
            <param name="newValue">New showAnim setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowAnim(Fluqi.Core.Animation.eAnimation)">
            <summary>
            Set the name of the animation used to show/hide the datepicker. Use 'show' 
            (the default), 'slideDown', 'fadeIn', any of the show/hide jQuery UI effects, 
            or '' for no animation
            </summary>
            <param name="animation">New showAnim setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetShowButtonPanel">
            <summary>
            Returns [in JavaScript] the current "showButtonPanel" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowButtonPanel(System.Boolean)">
            <summary>
            Whether to show the button panel.
            </summary>
            <param name="newValue">New showButtonPanel setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetShowCurrentAtPos">
            <summary>
            Returns [in JavaScript] the current "showCurrentAtPos" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowCurrentAtPos(System.Int32)">
            <summary>
            Specify where in a multi-month display the current month shows, 
            starting from 0 at the top/left
            </summary>
            <param name="newValue">New showCurrentAtPos setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetShowMonthAfterYear">
            <summary>
            Returns [in JavaScript] the current "showMonthAfterYear" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowMonthAfterYear(System.Boolean)">
            <summary>
            Whether to show the month after the year in the header. 
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValue">New showMonthAfterYear setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetShowOn">
            <summary>
            Returns [in JavaScript] the current "showOn" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowOnFocus">
            <summary>
            Have the datepicker appear automatically when the field receives focus 
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowOnButton">
            <summary>
            Have the datepicker appear automatically when a button is 
            clicked.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowOnFocusOrButton">
            <summary>
            Have the datepicker appear automatically when the field 
            receives focus or when a button is clicked ('button').
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetShowOtherMonths">
            <summary>
            Returns [in JavaScript] the current "showOtherMonths" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowOtherMonths(System.Boolean)">
            <summary>
            Display dates in other months (non-selectable) at the start or 
            end of the current month. To make these days selectable use selectOtherMonths.
            </summary>
            <param name="newValue">New showOtherMonths setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetShowOptions">
            <summary>
            If using one of the jQuery UI effects for showAnim, you can provide additional settings 
            for that animation via this option.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowOptions(System.String)">
            <summary>
            If using one of the jQuery UI effects for showAnim, you can provide additional settings 
            for that animation via this option.
            </summary>
            <param name="newValue">New showOptions setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetShowWeek">
            <summary>
            Returns [in JavaScript] the current "showWeek" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetShowWeek(System.Boolean)">
            <summary>
            When true a column is added to show the week of the year. The calculateWeek option 
            determines how the week of the year is calculated. 
            You may also want to change the firstDay option.
            </summary>
            <param name="newValue">New showWeek setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetStepMonths">
            <summary>
            Returns [in JavaScript] the current "stepMonths" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetStepMonths(System.Int32)">
            <summary>
            Set how many months to move when clicking the Previous/Next links
            </summary>
            <param name="newValue">New stepMonths setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetWeekHeader">
            <summary>
            Returns [in JavaScript] the current "weekHeader" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetWeekHeaderJS(System.String)">
            <summary>
            The text to display for the week of the year column heading. 
            This attribute is one of the regionalisation attributes. Use showWeek to display this column.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New weekHeader setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetWeekHeader(System.String,System.Boolean)">
            <summary>
            The text to display for the week of the year column heading. 
            This attribute is one of the regionalisation attributes. Use showWeek to display this column.
            </summary>
            <param name="newValue">New weekHeader setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetWeekHeader(System.String)">
            <summary>
            The text to display for the week of the year column heading. 
            This attribute is one of the regionalisation attributes. Use showWeek to display this column.
            </summary>
            <param name="newValue">New weekHeader setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetYearRange">
            <summary>
            Returns [in JavaScript] the current "yearRange" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetYearRangeJS(System.String)">
            <summary>
            Control the range of years displayed in the year drop-down: 
            Either :
            Relative to today's year (-nn:+nn), 
            Relative to the currently selected year (c-nn:c+nn), 
            Absolute (nnnn:nnnn), 
            Or combinations of these formats (nnnn:-nn). 
            Note that this option only affects what appears in the drop-down, to restrict which 
            dates may be selected use the minDate and/or maxDate options.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New yearRange setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetYearRange(System.String,System.Boolean)">
            <summary>
            Control the range of years displayed in the year drop-down: 
            Either :
            Relative to today's year (-nn:+nn), 
            Relative to the currently selected year (c-nn:c+nn), 
            Absolute (nnnn:nnnn), 
            Or combinations of these formats (nnnn:-nn). 
            Note that this option only affects what appears in the drop-down, to restrict which 
            dates may be selected use the minDate and/or maxDate options.
            </summary>
            <param name="newValue">New yearRange setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetYearRange(System.String)">
            <summary>
            Control the range of years displayed in the year drop-down: 
            Either :
            Relative to today's year (-nn:+nn), 
            Relative to the currently selected year (c-nn:c+nn), 
            Absolute (nnnn:nnnn), 
            Or combinations of these formats (nnnn:-nn). 
            Note that this option only affects what appears in the drop-down, to restrict which 
            dates may be selected use the minDate and/or maxDate options.
            </summary>
            <param name="newValue">New yearRange setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetYearRange(System.String,System.String)">
            <summary>
            Control the range of years displayed in the year drop-down: 
            Either :
            Relative to today's year (-nn:+nn), 
            Relative to the currently selected year (c-nn:c+nn), 
            Absolute (nnnn:nnnn), 
            Or combinations of these formats (nnnn:-nn). 
            Note that this option only affects what appears in the drop-down, to restrict which 
            dates may be selected use the minDate and/or maxDate options.
            </summary>
            <param name="lowerRange">Lower range for year dropdown</param>
            <param name="upperRange">Upper range for year dropdown</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.GetYearSuffix">
            <summary>
            Returns [in JavaScript] the current "yearSuffix" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetYearSuffixJS(System.String)">
            <summary>
            Additional text to display after the year in the month headers. 
            This attribute is one of the regionalisation attributes.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New yearSuffix setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetYearSuffix(System.String,System.Boolean)">
            <summary>
            Additional text to display after the year in the month headers. 
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValue">New yearSuffix setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Methods.SetYearSuffix(System.String)">
            <summary>
            Additional text to display after the year in the month headers. 
            This attribute is one of the regionalisation attributes.
            </summary>
            <param name="newValue">New yearSuffix setting</param>
        </member>
        <member name="T:Fluqi.Widget.jDatePicker.DatePicker">
            <summary>
            A set of properties to apply to a set of jQuery UI DatePicker.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.WithCss(System.String,Fluqi.Widget.jDatePicker.DatePicker[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "DatePicker" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "DatePicker" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.WithStyle(System.String,System.String,Fluqi.Widget.jDatePicker.DatePicker[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and tabs initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the DatePicker control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.#ctor(System.IO.TextWriter)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response object to write to</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response object to write to</param>
            <param name="id">ID of the button, this must be unique for the page</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.Render">
            <summary>
            Writes the HTML for the DatePicker control to the response stream.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.GetTagHtml">
            <summary>
            Builds the HTML required for the DatePicker control.
            JavaScript initialisation for the control is also added to the response stream if the
            AutoScript rendering option is true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.DatePicker.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.DatePicker.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the DatePicker control, this is "datepicker".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.DatePicker.ID">
            <summary>
            ID of the control (which must be unique on the page)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.DatePicker.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.DatePicker.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Widget.jDatePicker.DatePicker.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.DatePicker.Events">
            <summary>
            Specifies the events to be adopted for this control (see <see cref="P:Fluqi.Widget.jDatePicker.DatePicker.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.DatePicker.Methods">
            <summary>
            Specifies the events to be adopted for this set of Button (see <see cref="P:Fluqi.Widget.jDatePicker.DatePicker.Methods"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.DatePicker.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAccordion.Methods">
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
            <summary>
            Methods for changing options (after initialisation).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.#ctor(Fluqi.Widget.jAccordion.Accordion)">
            <summary>
            Constructor
            </summary>
            <param name="ac">Accordion object to call</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.Active(System.Int32)">
            <summary>
            Activate a content part of the Accordion programmatically.
            <param name="panelIndex">
            zero-indexed number to match the position of the header to activate. 
            </param>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.Destroy">
            <summary>
            Remove the accordion functionality completely. This will return the element back to its pre-init state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.Disable">
            <summary>
            Disable the accordion.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.Enable">
            <summary>
            Enable the accordion.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.Refresh">
            <summary>
            Recompute heights of the accordion contents when using the heightStyle option and the 
            container height changed. For example, when the container is a resizable, this method 
            should be called by its resize-event.
            </summary>
            <remarks>
            See http://api.jqueryui.com/accordion/#method-refresh for details.
            Note previous to jQuery 1.9 this was called the "resize" method
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.Widget">
            <summary>
            Returns the .ui-accordion element.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.Select(System.Int32)">
            <summary>
            Selects the given content part (the "Select" method is the same as "Activate"
            and is here for ease of discover).
            <param name="panelIndex">
            zero-indexed number to match the position of the header to activate. 
            </param>
            </summary>
            <remarks>See http://jqueryui.com/demos/accordion/#method-activate for details.</remarks>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.CollapseAll">
            <summary>
            Collapses all accordion panels (only possible when collapsible is true).
            </summary>
            <remarks>See http://jqueryui.com/demos/accordion/#method-activate for details.</remarks>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.GetAnimation">
            <summary>
            Gets the animation currently being used.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetAnimateJSON(System.String)">
            <summary>
            If and how to animate changing panels.
            </summary>
            <param name="value">new animation</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetAnimate(System.Int32)">
            <summary>
            Shows the default animation for <paramref name="duration"/> milli-seconds.
            </summary>
            <param name="duration">Duration (in milli-seconds) of the animate</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetEffect(System.String)">
            <summary>
            If and how to animate changing panels.
            </summary>
            <param name="value">new animation</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetEffect(System.String,System.Boolean)">
            <summary>
            If and how to animate changing panels.
            </summary>
            <param name="value">new animation</param>
            <param name="inDoubleQuotes">
            true - double quotes(")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetAnimate(Fluqi.Core.Ease.eEase)">
            <summary>
            Sets the animation to the given easing method, using the default duration
            </summary>
            <param name="ease">Easing method to use</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetAnimate(Fluqi.Core.Ease.eEase,System.Int32)">
            <summary>
            Sets the animation to the given easing method and duration
            </summary>
            <param name="ease">Easing method to use</param>
            <param name="duration">Duration to use</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetAnimate(Fluqi.Core.Ease.eEase,System.Int32,Fluqi.Core.Ease.eEase,System.Int32)">
            <summary>
            Sets the up and down animations to the given easing method and duration
            </summary>
            <param name="easeUp">Easing method to use (on the up)</param>
            <param name="durationUp">Duration to use (on the up)</param>
            <param name="easeDown">Easing method to use (on the down)</param>
            <param name="durationDown">Duration to use (on the down)</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.DisableAnimation">
            <summary>
            Disable animation
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.GetCollapsible">
            <summary>
            Returns [in JavaScript] the current "collapsible" setting.
            Whether all the sections can be closed at once. 
            Allows collapsing the active section by the triggering event (click is the default).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetCollapsible(System.Boolean)">
            <summary>
            Whether all the sections can be closed at once. 
            Allows collapsing the active section by the triggering event (click is the default).
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.GetEvent">
            <summary>
            Returns [in JavaScript] the current "event" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetEventJS(System.String)">
            <summary>
            The event on which to trigger the accordion.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">new setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetEvent(System.String)">
            <summary>
            The event on which to trigger the accordion.
            </summary>
            <param name="newValue">new setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetEvent(System.String,System.Boolean)">
            <summary>
            The event on which to trigger the accordion.
            </summary>
            <param name="newValue">new setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.GetHeightStyle">
            <summary>
            Returns [in JavaScript] the current "heightStyle" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetHeightStyle(Fluqi.Core.HeightStyle.eHeightStyle)">
            <summary>
            Sets the heightStyle of the accordion
            </summary>
            <param name="style">new value</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetHeightStyle(System.String)">
            <summary>
            Sets the heightStyle of the accordion
            </summary>
            <param name="style">new value</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.GetHeader">
            <summary>
            Returns [in JavaScript] the current "header" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetHeaderJS(System.String)">
            <summary>
            Selector for the header element.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New header setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetHeader(System.String)">
            <summary>
            Selector for the header element.
            </summary>
            <param name="newValue">New header setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetHeader(System.String,System.Boolean)">
            <summary>
            Selector for the header element.
            </summary>
            <param name="newValue">New header setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.GetIcons">
            <summary>
            Returns [in JavaScript] the current "icons" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetIcons(System.String,System.String)">
            <summary>
            Icons to use for headers. Icons may be specified for 'header' and 'activeHeader', 
            and we recommend using the icons native to the jQuery UI CSS Framework manipulated by jQuery UI ThemeRoller
            </summary>
            <param name="unselectedHeader">new unselected header setting</param>
            <param name="selectedHeader">new selected header setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Methods.SetIcons(Fluqi.Core.Icons.eIconClass,Fluqi.Core.Icons.eIconClass)">
            <summary>
            Icons to use for headers. Icons may be specified for 'header' and 'activeHeader', 
            and we recommend using the icons native to the jQuery UI CSS Framework manipulated by jQuery UI ThemeRoller
            </summary>
            <param name="unselectedHeader">new unselected header setting</param>
            <param name="selectedHeader">new selected header setting</param>
        </member>
        <member name="T:Fluqi.Widget.jAccordion.Panels">
            <summary>
            Models the Panels to be added to the Accordion object
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Panels._CurrentPane">
            <summary>
            Flags which pane is selected.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Panels._Panels">
            <summary>
            Models the panels for the accordion
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.#ctor(Fluqi.Widget.jAccordion.Accordion)">
            <summary>
            Constructor
            </summary>
            <param name="accordion">Accordion object the panels are related to.</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.Finish">
            <summary>
            Used to flag that configuration of events are completed, and 
            returns the <see cref="P:Fluqi.Widget.jAccordion.Panels.Accordion"/> object so we can continue defining Accordion attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jAccordion.Panels.Accordion"/> object to return chaining to the Accordion</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.Add(System.String)">
            <summary>
            Adds an accordion panel to the accordion control.
            </summary>
            <param name="title">Title to appear in the panel</param>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.GetActivePanel">
            <summary>
            Finds which Panel is defined as the active one.
            </summary>
            <returns>
            Returns the active panel (if one is active).
            Returns null if no panels are active.
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.Add(System.String,System.Boolean)">
            <summary>
            Adds a accordion into the collection of tabs.  Due to the dependencies between the 
            accordion headings and content panes the tabs must be defined up-front
            </summary>
            <param name="title">Title of the accordion (to appear in the accordion headings)</param>
            <param name="active">Flags whether this accordion should be the selected accordion on page load</param>
            <returns>Returns Tabs object to maintain chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.Configure">
            <summary>
            Allows further configuration of a panel that has just been added
            </summary>
            <returns>Added Panel</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.RenderNextPane">
            <summary>
            Renders the tab content pane to the Response.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.ToList">
            <summary>
            Gets the underlying list of Panels on the Accordion control.
            </summary>
            <returns>List of panels on the accordion.</returns>
            <remarks>
            Note that the Panels are intentionally hidden from the caller so that the API reads more clearly.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.ResetPaneIndex">
            <summary>
            Resets the pane to be drawn (so the Accordion can be rendered multiple times if required).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.GetActivePane">
            <summary>
            Works out which (if any) of the content panes are marked 
            as the active one
            </summary>
            <returns>
            Returns the active accordion (if one is marked as active)
            Returns null otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.GetActivePaneIndex">
            <summary>
            Works out the number of the active content pane (if one 
            is defined as the active one).
            </summary>
            <returns>
            Returns the index of the active pane (if there is one)
            Returns -1 if no pane is marked as active.
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.HasActivePane">
            <summary>
            Internal helper method to establish if any of the Accordion
            are the active one.
            </summary>
            <returns>
            Returns true if there is an accordion marked as active.
            Returns false otherwise.
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.ResetActivePanes">
            <summary>
            Resets all panels to not active.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panels.ResolveActivePane">
            <summary>
            Work out if we have an accordion set as the active one.  If not
            we set the first accordion to be active.  This is necessary so we
            output the correct mark-up for the selected accordion (when running
            with the "ShowCSS" option)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Panels.Accordion">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jAccordion.Panels.Accordion"/> object these events are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jToolTip.Events">
            <summary>
            A set of properties to apply to a set of jQuery UI ToolTip.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI ToolTip.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI ToolTip.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Events.#ctor(Fluqi.Widget.jToolTip.ToolTip)">
            <summary>
            Constructor
            </summary>
            <param name="tip">ToolTip object to configure events for</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Events.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jToolTip.Events"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jToolTip.Events.ToolTip"/> object so we can continue defining attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jToolTip.Events.ToolTip"/> object to return chaining to the collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Events.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Events.SetCloseEvent(System.String)">
            <summary>
            Triggered when a tooltip is closed, triggered on focusout or mouseleave.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Events.SetCreateEvent(System.String)">
            <summary>
            This event is triggered when tooltip is created.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Events.SetOpenEvent(System.String)">
            <summary>
            Triggered when a tooltip is shown, triggered on focusin or mouseover.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Events.CloseEvent">
            <summary>
            Triggered when a tooltip is closed, triggered on focusout or mouseleave.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Events.CreateEvent">
            <summary>
            Triggered when the ToolTip is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Events.OpenEvent">
            <summary>
            Triggered when a tooltip is shown, triggered on focusin or mouseover.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Events.ToolTip">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jToolTip.Events.ToolTip"/> object these events are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSelectMenu.SelectMenu">
            <summary>
            A set of properties to apply to a set of jQuery UI SelectMenu.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.WithCss(System.String,System.Object[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Menu" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Menu" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.WithStyle(System.String,System.String,Fluqi.Widget.jSelectMenu.SelectMenu[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the tabs initialisation script to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the SelectMenu control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.Items">
            <summary>
            The SelectMenuItems that should appear under the SelectMenu
            </summary>
            <returns>SelectMenuItems (so we can go straight into adding menuitems)</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.#ctor(System.IO.TextWriter)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
            <param name="id">ID of the control (which must be unique on the page)</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.GetTagHtml">
            <summary>
            Builds and returns the HTML for the SelectMenu control (basically the DIV).
            JavaScript initialisation for the control is also added to the response stream if the
            AutoScript rendering option is true.
            </summary>
            <returns>HTML for the SelectMenu control.</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.Render">
            <summary>
            Writes the HTML for the SelectMenu control to the response stream.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.SelectMenu.Reset(System.IO.TextWriter,System.String)">
            <summary>
            Initialises the control back to its initial state
            </summary>
            <param name="writer">Writer to use when rendering the control</param>
            <param name="id">ID to render for the control</param>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.SelectMenu.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the SelectMenu control, this is "selectMenu".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.SelectMenu.ID">
            <summary>
            ID of the jQuery UI object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.SelectMenu.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.SelectMenu.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Widget.jSelectMenu.SelectMenu.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.SelectMenu.Events">
            <summary>
            Specifies the events to be adopted for the control (see <see cref="P:Fluqi.Widget.jSelectMenu.SelectMenu.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.SelectMenu.Methods">
            <summary>
            Specifies the Methods object that can be used to interact with the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.SelectMenu.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.SelectMenu.Root">
            <summary>
            Specifies any child SelectMenu items
            </summary>
        </member>
        <member name="T:Fluqi.Core.RenderBase">
            <summary>
            Base class for implementing common Rendering options for controls.
            (Rendering options fluently hang off a control, i.e. as well as "Button.Options" we also
            have "Button.Rendering" for setting rendering options).  
            </summary>
        </member>
        <member name="M:Fluqi.Core.RenderBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Fluqi.Core.RenderBase.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Core.RenderBase.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Core.RenderBase.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
            <remarks>
            In DEBUG mode pretty rendering is ON by default.
            In RELEASE mode pretty rendering is OFF by default.
            This method is quite useful if you still want pretty rendering on when in RELEASE mode
            (which we need for the appHarbor demonstrations).
            </remarks>
        </member>
        <member name="M:Fluqi.Core.RenderBase.ShowCSS">
            <summary>
            Writes full CSS to the browser (jQuery UI classes are expanded for non-JS users)
            </summary>
            <returns>Control for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.RenderBase.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Core.RenderBase.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Core.RenderBase.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>Control for chainability</returns>
        </member>
        <member name="M:Fluqi.Core.RenderBase.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>Control for chainability</returns>
        </member>
        <member name="P:Fluqi.Core.RenderBase.PrettyRender">
            <summary>
            Flags whether the output when rendering should omit any whitespace and newlines we can
            </summary>
            <remarks>
            By default this is set depending on the build type.  In DEBUG you get indenting and newlines
            to make it easier to read.  In RELEASE we remove whitespace.  
            </remarks>
        </member>
        <member name="P:Fluqi.Core.RenderBase.RenderCSS">
            <summary>
            Flags whether the CSS classes jQuery UI adds via JavaScript are rendered at run-time.  This
            is useful if you want to same "look" as jQuery UI to non-JavaScript users.  Naturally non-JS
            users will get the "look" but not the "feel".
            </summary>
            <remarks>
            By default RenderCSS is false, so the CSS is _not_ shown.  Also note that the jQuery UI
            documentation recommends that you _do_not_ include the CSS (hence by default we don't).
            </remarks>
        </member>
        <member name="P:Fluqi.Core.RenderBase.TabDepth">
            <summary>
            If the output is in pretty rendering mode (see <see cref="P:Fluqi.Core.RenderBase.PrettyRender"/>), this stipulates 
            where the tabbing should start (so all your output HTML lines up :)
            </summary>
        </member>
        <member name="P:Fluqi.Core.RenderBase.AutoScript">
            <summary>
            Flags whether the HtmlHelper should render it's document $(document).ready section (and init script)
            once the control has been rendered or not (i.e. leave it to the developer to call the RenderScript).
            </summary>
            <remarks>
            If true a $(document).ready section is rendered, with the init of the helper
            If false nothing is rendered and the view must call the "RenderScript" to init the HtmlHelper
            </remarks>
        </member>
        <member name="T:Fluqi.Core.HeightStyle">
            <summary>
            Models the HeightStyle options available as standard with jQuery UI components
            </summary>
        </member>
        <member name="M:Fluqi.Core.HeightStyle.HeightStyleToString(Fluqi.Core.HeightStyle.eHeightStyle)">
            <summary>
            Converts the HeightStyle option into a string.
            </summary>
            <param name="style">HeightStyle option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.HeightStyle.HeightStyleToString(System.Int32)">
            <summary>
            Converts the HeightStyle option into a string.
            </summary>
            <param name="style">HeightStyle option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.HeightStyle.ToList">
            <summary>
            Returns all the enumeration items as list;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Core.HeightStyle.StringToHeightStyle(System.String)">
            <summary>
            Converts a string into an HeightStyle into an enum option.
            </summary>
            <param name="style">String to convert</param>
            <returns>Converted option</returns>
        </member>
        <member name="M:Fluqi.Core.HeightStyle.HeightStyleToString(System.Collections.Generic.List{Fluqi.Core.HeightStyle.eHeightStyle})">
            <summary>
            Converts a list of HeightStyles into a (space) separated string.  Note HeightStyles
            specified as "None" are excluded.
            </summary>
            <param name="styles"></param>
            <returns></returns>
        </member>
        <member name="T:Fluqi.Core.HeightStyle.eHeightStyle">
            <summary>
            Models the HeightStyle options available as standard with jQuery UI components
            </summary>
        </member>
        <member name="F:Fluqi.Core.HeightStyle.eHeightStyle.Auto">
            <summary>All panels will be set to the height of the tallest panel</summary>
        </member>
        <member name="F:Fluqi.Core.HeightStyle.eHeightStyle.Content">
            <summary>Each panel will be only as tall as it's content</summary>
        </member>
        <member name="F:Fluqi.Core.HeightStyle.eHeightStyle.Fill">
            <summary>The accordion will expand to fill the available space in the accordion's parent</summary>
        </member>
        <member name="T:Fluqi.Widget.jProgressBar.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI ProgressBar.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI ProgressBar.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Options.SetDisabled(System.Boolean)">
            <summary>
            Disables (true) or enables (false) the progressbar. Can be set when initialising (first creating) the progressbar.
            </summary>
            <param name="disable">Whether the control is disabled or not</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Options.SetValue(System.Int32)">
            <summary>
            The value of the progressbar.
            </summary>
            <param name="value">Element to append menu to (selector to the element, e.g. #my-element)</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Options.#ctor(Fluqi.Widget.jProgressBar.ProgressBar)">
            <summary>
            Constructor
            </summary>
            <param name="pb">ProgressBar to configure options of</param>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jProgressBar.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jProgressBar.Options.ProgressBar"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jProgressBar.Options.ProgressBar"/> object to return chaining to the ProgressBar collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.Options.Disabled">
            <summary>
            Disables (true) or enables (false) the progressbar. Can be set when initialising (first creating) the progressbar.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.Options.Value">
            <summary>
            The value of the progressbar.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.Options.ProgressBar">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jProgressBar.Options.ProgressBar"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jDatePicker.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Rendering.#ctor(Fluqi.Widget.jDatePicker.DatePicker)">
            <summary>
            Constructor
            </summary>
            <param name="dt">DatePicker object to set rendering options of</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Widget.jDatePicker.Rendering.DatePicker"/> object so we can continue defining DatePicker attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jDatePicker.Rendering.DatePicker"/> object to return chaining to the DatePicker collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jDatePicker.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Rendering.ShowCSS">
            <summary>
            Writes full CSS to the browser (jQuery UI classes are expanded for non-JS users)
            </summary>
            <returns>Control for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jDatePicker.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>DatePicker object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>DatePicker object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Rendering.DatePicker">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jDatePicker.Rendering.DatePicker"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSpinner.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI Spinner.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Spinner.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Spinner.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetCulture(System.String)">
            <summary>
            Sets the culture to use for parsing and formatting the value. 
            If null, the currently set culture in Globalize is used, see Globalize docs for available cultures. 
            Only relevant if the <see cref="M:Fluqi.Widget.jSpinner.Options.SetNumberFormat(System.String)"/> option is set. Requires Globalize to be included.
            </summary>
            <param name="culture"></param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetDisabled(System.Boolean)">
            <summary>
            Disables the spinner.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetIcons(System.String,System.String)">
            <summary>
            Icons to use for buttons, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
            <param name="downIcon">Icon to use for the down</param>
            <param name="upIcon">Icon to use for the up</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetIcons(Fluqi.Core.Icons.eIconClass,Fluqi.Core.Icons.eIconClass)">
            <summary>
            Icons to use for buttons, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
            <param name="downIcon">Icon to use for the down</param>
            <param name="upIcon">Icon to use for the up</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetIncremental(System.Boolean)">
            <summary>
            Controls the number of steps taken when holding down a spin button.
            - When set to true, the stepping delta will increase when spun incessantly. 
            - When set to false, all steps are equal (as defined by the step option).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetIncremental(System.String)">
            <summary>
            Controls the number of steps taken when holding down a spin button.
            - Receives one parameter: the number of spins that have occurred. 
            	Must return the number of steps that should occur for the current spin.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetMin(System.Int32)">
            <summary>
            The minimum allowed value
            </summary>
            <param name="value">The minimum value</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetMin(System.String)">
            <summary>
            The minimum allowed value
            </summary>
            <param name="value">
            If Globalize is included, the min option can be passed as a string which will be parsed based on the 
            numberFormat and culture options; otherwise it will fall back to the native parseFloat() method.
            </param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetMax(System.Int32)">
            <summary>
            The maximum allowed value
            </summary>
            <param name="value">The maximum value</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetMax(System.String)">
            <summary>
            The maximum allowed value
            </summary>
            <param name="value">
            If Globalize is included, the min option can be passed as a string which will be parsed based on the 
            numberFormat and culture options; otherwise it will fall back to the native parseFloat() method.
            </param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetNumberFormat(System.String)">
            <summary>
            Format of numbers passed to Globalize, if available. 
            </summary>
            <param name="value">
            Most common are "n" for a decimal number and "C" for a currency value. 
            Also see the culture option.
            </param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetPage(System.Int32)">
            <summary>
            The number of steps to take when paging via the pageUp/pageDown methods.
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetStep(System.Int32)">
            <summary>
            The size of the step to take when spinning via buttons or via the stepUp()/stepDown() methods. 
            The element's step attribute is used if it exists and the option is not explicitly set.
            </summary>
            <param name="step">The size of the step</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.SetStep(System.String)">
            <summary>
            The size of the step to take when spinning via buttons or via the stepUp()/stepDown() methods. 
            The element's step attribute is used if it exists and the option is not explicitly set.
            </summary>
            <param name="step">
            If Globalize is included, the step option can be passed as a string which will be parsed based on 
            the numberFormat and culture options, otherwise it will fall back to the native parseFloat.
            </param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jSpinner.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jSpinner.Options.Spinner"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jSpinner.Options.Spinner"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Options.#ctor(Fluqi.Widget.jSpinner.Spinner)">
            <summary>
            Constructor
            </summary>
            <param name="spinner">Spinner to configure options of</param>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Options.Spinner">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jSpinner.Options.Spinner"/> object these options are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Options.Culture">
            <summary>
            Sets the culture to use for parsing and formatting the value. 
            If null, the currently set culture in Globalize is used, see Globalize docs for available cultures. Only 
            relevant if the numberFormat option is set. Requires Globalize to be included.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Options.Disabled">
            <summary>
            Disables (true) or enables (false) the control. Can be set when initialising 
            (first creating) the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Options.UpIconClass">
            <summary>
            Icons to use for buttons, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Options.DownIconClass">
            <summary>
            Icons to use for buttons, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Options.Incremental">
            <summary>
            Controls the number of steps taken when holding down a spin button.
            Supports boolean
            	- When set to true, the stepping delta will increase when spun incessantly. 
            	- When set to false, all steps are equal (as defined by the step option).
            Supports function
            	- Receives one parameter: the number of spins that have occurred. 
            		Must return the number of steps that should occur for the current spin.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Options.Min">
            <summary>
            The minimum allowed value. The element's min attribute is used if it exists and the option is not explicitly set. 
            If null, there is no minimum enforced.
            Multiple types supported:
              - Number: The minimum value.
              - String: If Globalize is included, the min option can be passed as a string which will be parsed based on the 
                numberFormat and culture options; otherwise it will fall back to the native parseFloat() method.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Options.Max">
            <summary>
            The maximum allowed value. The element's max attribute is used if it exists and the option is not explicitly set.
            If null, there is no maximum enforced.
            Multiple types supported:
              - Number: The maximum value.
              - String: If Globalize is included, the max option can be passed as a string which will be parsed based on the 
                numberFormat and culture options; otherwise it will fall back to the native parseFloat() method.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Options.NumberFormat">
            <summary>
            Format of numbers passed to Globalize, if available. 
            Most common are "n" for a decimal number and "C" for a currency value. 
            Also see the culture option.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Options.Page">
            <summary>
            The number of steps to take when paging via the pageUp/pageDown methods.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Options.Step">
            <summary>
            The size of the step to take when spinning via buttons or via the stepUp()/stepDown() methods.
            The element's step attribute is used if it exists and the option is not explicitly set.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jMenuItem.MenuItem">
            <summary>
            A set of properties to apply to a set of jQuery UI Tab.
            </summary>
            <summary>
            Defines the logic and rendering of a single menu item (which may also have a sub-menu 
            of items (<see cref="T:Fluqi.Widget.jMenuItem.MenuItems"/>).
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jMenuItem.MenuItem.DEFAULT_SINGLE_TAG">
            <summary>
            Tag to use [by default] for a menu item, by default this is an "LI" but can be _something_else_
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.WithCss(System.String,System.Object[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.WithStyle(System.String,System.String,System.Object[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.#ctor(Fluqi.Widget.jMenu.Menu,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="owner">Menu object _this_ item belongs to</param>
            <param name="id">ID to assign to the MenuItem object</param>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.#ctor(Fluqi.Widget.jMenuItem.MenuItem)">
            <summary>
            Constructor
            </summary>
            <param name="parent">MenuItem object _this_ item belongs to</param>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.SetTitle(System.String)">
            <summary>
            Changes the title that appears in the menu item.
            </summary>
            <returns>this for chainability</returns>
            <remarks>
            Dunno why you'd want to do this after it's already been defined when adding the menu item
            but I'm leaving it here if only for the sake of consistency with the API.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.SetIcon(System.String)">
            <summary>
            Sets the icon which appears to the left of the menu title.
            </summary>
            <returns>this for chainability</returns>
            <remarks>
            Use this for adding your own icon.  The "ui-icon" jQuery UI class will still be added first
            (so you can use this for sizing), but the "ui-icon" prefix won't be added in front of your CSS class.
            </remarks>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.SetIcon(Fluqi.Core.Icons.eIconClass)">
            <summary>
            Sets the icon which appears to the left of the menu item.  This is one of the built in
            icons provdided by the jQuery UI framework.
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.SetTargetURL(System.String)">
            <summary>
            Sets the URL to navigate to from the menu (this replaces the default "#" href).
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.SetTag(System.String)">
            <summary>
            Sets the LI tag to use
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.SetDisabled">
            <summary>
            Sets this menu item as disabled
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.SetAsDivider">
            <summary>
            Sets this menu-item as a divider.
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.Finish">
            <summary>
            Ends configuration of the menu item just added and brings the fluent API back a level to 
            allow further menu items to be added.
            </summary>
            <returns>Parent MenuItems object to maintain fluent API reference point</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.HasChildren">
            <summary>
            Convenience function for eastablishing if there are any child/sub-menu items off this menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.Reset">
            <summary>
            Resets the object back to a known state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.BuildTagHtml(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Builds up the Html for a menu-item
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItem.RenderChildren(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Renders the list of MenuItems to the string builder.  
            </summary>
            <param name="sb">StringBuilder</param>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItem.Menu">
            <summary>
            Holds a reference to the menu the item is on
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItem.IsDisabled">
            <summary>
            Specifies that the rendered menu item should be disabled.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItem.IsDivider">
            <summary>
            Flags that this menu-item is a divider
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItem.Title">
            <summary>
            Text to appear in the item
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItem.Icon">
            <summary>
            Icon to appear alongside the menu item
            ToDo: Can these appear on the left hand and right hand side?
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItem.TargetURL">
            <summary>
            Destination of the menu item
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItem.Html">
            <summary>
            Html to use in the menu item 
            </summary>
            <remarks>If specified, this overrides the Title, Icon and TargetURL properties</remarks>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItem.Tag">
            <summary>
            Html tag to use for containing menu-items.  By default this is LI.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItem.Children">
            <summary>
            Set of sub MenuItems for this item of the menu.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItem.Parent">
            <summary>
            Navigates to the MenuItem this MenuItem is contained within.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItem._IsRoot">
            <summary>
            Flags whether this MenuItem is the root of the menu.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jMenu.Events">
            <summary>
            A set of properties to apply to a set of jQuery UI Menu.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Slider.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI Slider.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Events.SetBlurEvent(System.String)">
            <summary>
            Triggered when the menu loses focus.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Events.SetCreateEvent(System.String)">
            <summary>
            Triggered when the menu is created.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Events.SetFocusEvent(System.String)">
            <summary>
            Triggered when the menu loses focus.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Events.SetSelectEvent(System.String)">
            <summary>
            Triggered when a menu item is selected.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Events.#ctor(Fluqi.Widget.jMenu.Menu)">
            <summary>
            Constructor
            </summary>
            <param name="menu">Menu object to configure events for</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Events.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jMenu.Events"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jMenu.Events.Menu"/> object so we can continue defining attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jMenu.Events.Menu"/> object to return chaining to the collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Events.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Events.BlurEvent">
            <summary>
            Triggered when the menu loses focus.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Events.CreateEvent">
            <summary>
            Triggered when the menu is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Events.FocusEvent">
            <summary>
            Triggered when a menu gains focus or when any menu item is activated.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Events.SelectEvent">
            <summary>
            Triggered when a menu item is selected.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Events.Menu">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jMenu.Events.Menu"/> object these events are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jToolTip.AnimationOptions">
            <summary>
            Models the Animation child for setting placement of the ToolTip control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.AnimationOptions.#ctor(Fluqi.Widget.jToolTip.Options,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="toolTipOptions">ToolTip options object</param>
            <param name="caller">
            Specifies the type of caller using the animation.  For instance it's common for the animation properties
            to be used by both "show" and "hide" methods on a widget.  We need to differentiate between the two
            when rendering the script output.
            </param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.AnimationOptions.Finish">
            <summary>
            Used to flag that configuration of <see cref="P:Fluqi.Widget.jToolTip.AnimationOptions.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jToolTip.AnimationOptions.Options"/> object so we can continue defining attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jToolTip.AnimationOptions.Options"/> object to return chaining to the parent object</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.AnimationOptions.SetEffect(Fluqi.Core.Animation.eAnimation)">
            <summary>
            The effect to use when showing/hiding.
            </summary>
            <param name="effect">Effect enum to use</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.AnimationOptions.SetEffect(System.String)">
            <summary>
            The effect to use when showing/hiding.
            </summary>
            <param name="effect">Effect as a string to use</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.AnimationOptions.SetEasing(Fluqi.Core.Ease.eEase)">
            <summary>
            The easing to use when showing/hiding.
            </summary>
            <param name="ease">Ease enum to use</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.AnimationOptions.SetEasing(System.String)">
            <summary>
            The easing to use when showing/hiding.
            </summary>
            <param name="ease">Ease as a string to use</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.AnimationOptions.SetDuration(System.Int32)">
            <summary>
            The duration the effect should play for (in milliseconds).
            </summary>
            <param name="duration">Duration (milliseconds) to use.</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.AnimationOptions.SetDuration(System.String)">
            <summary>
            The duration the effect should play for.
            </summary>
            <param name="duration">Duration to use, can be milliseconds, or "fast", "slow" or "normal".</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.AnimationOptions.SetDuration(Fluqi.Core.Speed.eSpeed)">
            <summary>
            The duration the effect should play for.
            </summary>
            <param name="speed">Duration enum to use.</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.AnimationOptions.SetJSON(System.String)">
            <summary>
            The json object specifing the animation properties.
            </summary>
            <param name="json">JSON string</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.AnimationOptions.SetDisabled">
            <summary>
            Turns off the animation
            </summary>
            <returns>Object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.AnimationOptions._ToolTipOptions">
            <summary>
            Reference to the ToolTip object to return control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.AnimationOptions.Options">
            <summary>
            Holds the Animation options object for configuration.
            </summary>
        </member>
        <member name="T:Fluqi.ToDo">
            <summary>
            Just a list of stuff to do
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSlider.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI Slider.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Slider.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI Slider.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetDisabled(System.Boolean)">
            <summary>
            Disables (true) or enables (false) the control. Can be set when initialising 
            (first creating) the control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetAnimate(System.Boolean)">
            <summary>
            Flags wether the slide handle smoothly when user clicks outside the handle on the bar.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetAnimate(System.String)">
            <summary>
            Whether to slide handle smoothly when user click outside handle on the bar. Will 
            accept a string representing one of the three predefined speeds ("slow", 
            "normal", or "fast") 
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetAnimate(Fluqi.Core.Speed.eSpeed)">
            <summary>
            Whether to slide handle smoothly when user click outside handle on the bar. 
            Currently can be the constants defined by jQuery - "slow", "normal", or "fast".
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetAnimate(System.Int32)">
            <summary>
            Whether to slide handle smoothly when user click outside handle on the bar. 
            The number of milliseconds to run the animation (e.g. 1000)
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetMin(System.Int32)">
            <summary>
            The minimum value of the slider.
            </summary>		
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetMax(System.Int32)">
            <summary>
            The maximum value of the slider.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetOrientation(Fluqi.Core.Orientation.eOrientation)">
            <summary>
            This option determines whether the slider has the min at the left, the max at the right or 
            the min at the bottom, the max at the top. Possible values: 'horizontal', 'vertical'.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetOrientation(System.String)">
            <summary>
            This option determines whether the slider has the min at the left, the max at the right or 
            the min at the bottom, the max at the top. Possible values: 'horizontal', 'vertical'.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetSize(System.String)">
            <summary>
            Sets the size (it's a string, so whatever units you want) of the slider.  For 
            horizontal slider this is the width or the div (100%), for vertical slider this is the
            height of the div (default 5em).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetRange(System.Boolean)">
            <summary>
            If set to true, the slider will detect if you have two handles and create a stylable 
            range element between these two. Two other possible values are 'min' and 'max'. A 
            min range goes from the slider min to one handle. A max range goes from one handle 
            to the slider max.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetRange(System.String)">
            <summary>
            If set to true, the slider will detect if you have two handles and create a stylable 
            range element between these two. Two other possible values are 'min' and 'max'. A 
            min range goes from the slider min to one handle. A max range goes from one handle 
            to the slider max.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetStep(System.Int32)">
            <summary>
            Determines the size or amount of each interval or step the slider takes between min and max. 
            The full specified value range of the slider (max - min) needs to be evenly divisible 
            by the step.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetValue(System.Int32)">
            <summary>
            The text to display on the trigger button. Use in conjunction with showOn equal to 'button' or 'both'.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetValues(System.Collections.Generic.List{System.Int32})">
            <summary>
            This option can be used to specify multiple handles. If range is set to true, the length of 
            'values' should be 2.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetValues(System.Int32[])">
            <summary>
            This option can be used to specify multiple handles. If range is set to true, the length of 
            'values' should be 2.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.SetValues(System.String)">
            <summary>
            This option can be used to specify multiple handles. If range is set to true, the length of 
            'values' should be 2.
            This entry point expects a number separated list (e.g. "1,3,5")
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.#ctor(Fluqi.Widget.jSlider.Slider)">
            <summary>
            Constructor
            </summary>
            <param name="sldr">Slider to configure options of</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jSlider.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jSlider.Options.Slider"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jSlider.Options.Slider"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Options.Disabled">
            <summary>
            Disables (true) or enables (false) the control. Can be set when initialising 
            (first creating) the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Options.Animate">
            <summary>
            Whether to slide handle smoothly when user click outside handle on the bar. Will 
            also accept a string representing one of the three predefined speeds ("slow", 
            "normal", or "fast") or the number of milliseconds to run the animation (e.g. 1000)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Options.Max">
            <summary>
            The maximum value of the Slider.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Options.Min">
            <summary>
            The minimum value of the slider.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Options.Orientation">
            <summary>
            This option determines whether the slider has the min at the left, the max at the right or 
            the min at the bottom, the max at the top. Possible values: 'horizontal', 'vertical'.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Options.Size">
            <summary>
            Sets the size (it's a string, so whatever units you want) of the slider.  For 
            horizontal slider this is the width or the div (100%), for vertical slider this is the
            height of the div (default 5em).
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Options.Range">
            <summary>
            If set to true, the slider will detect if you have two handles and create a stylable 
            range element between these two. Two other possible values are 'min' and 'max'. A 
            min range goes from the slider min to one handle. A max range goes from one handle 
            to the slider max.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Options.Step">
            <summary>
            Determines the size or amount of each interval or step the slider takes between min and max. 
            The full specified value range of the slider (max - min) needs to be evenly divisible 
            by the step.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Options.Value">
            <summary>
            Determines the value of the slider, if there's only one handle. If there is more than one handle, 
            determines the value of the first handle.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Options.Values">
            <summary>
            This option can be used to specify multiple handles. If range is set to true, the length of 
            'values' should be 2.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Options.Slider">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jSlider.Options.Slider"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Utilities.jPosition.Position">
            <summary>
            Models the Position jQuery utility object (see http://jqueryui.com/demos/position/)
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Position.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and tabs initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Position.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Position.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and position initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Position.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and position initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Position.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Position.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Response stream to write the control to.</param>
            <param name="id">ID of the button, this must be unique for the page</param>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Position.Render">
            <summary>
            There is not underlying control for a Position object to render onto.  The "Render"
            method merely calls the initialisation routine and adds it into the outgoing Response
            object
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Position.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Position.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the Position control, this is "position".
            </remarks>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Position.ID">
            <summary>
            ID of the jQuery UI object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Position.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Position.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Utilities.jPosition.Position.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Position.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jDialog.Events">
            <summary>
            A set of Events to apply to a set of jQuery UI AutoComplete.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI Dialog.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.#ctor(Fluqi.Widget.jDialog.Dialog)">
            <summary>
            Constructor
            </summary>
            <param name="dlg">Dialog object to configure events for</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jDialog.Events"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jDialog.Events.Dialog"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jDialog.Events.Dialog"/> object to return chaining to the ProgressBar collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.SetCreateEvent(System.String)">
            <summary>
            This event is triggered when Dialog is created.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.SetBeforeCloseEvent(System.String)">
            <summary>
            This event is triggered when a dialog attempts to close. If the beforeClose event 
            handler (callback function) returns false, the close will be prevented.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.SetOpenEvent(System.String)">
            <summary>
            This event is triggered when dialog is opened.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.SetFocusEvent(System.String)">
            <summary>
            This event is triggered when the dialog gains focus.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.SetDragStartEvent(System.String)">
            <summary>
            This event is triggered at the beginning of the dialog being dragged.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.SetDragEvent(System.String)">
            <summary>
            This event is triggered when the dialog is dragged.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.SetDragStopEvent(System.String)">
            <summary>
            This event is triggered after the dialog has been dragged.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.SetResizeStartEvent(System.String)">
            <summary>
            This event is triggered at the beginning of the dialog being resized.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.SetResizeEvent(System.String)">
            <summary>
            This event is triggered when the dialog is resized.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.SetResizeStopEvent(System.String)">
            <summary>
            This event is triggered after the dialog has been resized.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Events.SetCloseEvent(System.String)">
            <summary>
            This event is triggered when the dialog is closed.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.Dialog">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jDialog.Events.Dialog"/> object these options are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.CreateEvent">
            <summary>
            This event is triggered when dialog is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.BeforeCloseEvent">
            <summary>
            This event is triggered when a dialog attempts to close. If the beforeClose event 
            handler (callback function) returns false, the close will be prevented.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.OpenEvent">
            <summary>
            This event is triggered when dialog is opened.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.FocusEvent">
            <summary>
            This event is triggered when the dialog gains focus.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.DragStartEvent">
            <summary>
            This event is triggered at the beginning of the dialog being dragged.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.DragEvent">
            <summary>
            This event is triggered when the dialog is dragged.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.DragStopEvent">
            <summary>
            This event is triggered after the dialog has been dragged.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.ResizeStartEvent">
            <summary>
            This event is triggered at the beginning of the dialog being resized.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.ResizeEvent">
            <summary>
            This event is triggered when the dialog is resized.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.ResizeStopEvent">
            <summary>
            This event is triggered after the dialog has been resized.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Events.CloseEvent">
            <summary>
            This event is triggered when the dialog is closed.
            </summary>
        </member>
        <member name="T:Fluqi.Utilities.jCookie.Cookie">
            <summary>
            Code for rendering the jQuery Cookie utility plugin (see http://archive.plugins.jquery.com/project/Cookie)
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Cookie.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Response stream to write the control to.</param>
            <param name="id">ID of the button, this must be unique for the page</param>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Cookie.Render">
            <summary>
            There is not underlying control for a Cookie object to render onto.  The "Render"
            method merely calls the initialisation routine and adds it into the outgoing Response
            object
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Cookie.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the tabs in the script code.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Cookie.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and tabs initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Cookie.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Cookie.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and cookie initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Cookie.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and cookie initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Cookie.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.Cookie.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the Cookie control, this is "cookie".
            </remarks>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.Cookie.ID">
            <summary>
            ID of the jQuery UI object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.Cookie.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.Cookie.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Utilities.jCookie.Cookie.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.Cookie.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="T:Fluqi.Utilities.jCookie.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI Cookie.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Cookie.
            </summary>
            <summary>
            A set of properties to apply to for the Cookie plug-in (required for some of the other controls, e.g. tabs).
            </summary>
        </member>
        <member name="F:Fluqi.Utilities.jCookie.Options.DEFAULT_EXPIRY">
            <summary>
            Default expiry time (as defined by jQuery).
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Options.#ctor(Fluqi.Utilities.jCookie.Cookie)">
            <summary>
            Constructor
            </summary>
            <param name="cookie">Cookie object to define options for</param>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Utilities.jCookie.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Utilities.jCookie.Options.Cookie"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Utilities.jCookie.Options.Cookie"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Options.GetCookieScriptOption">
            <summary>
            Gets a script option defining the Cookie options (this is exposed as the Cookie control
            is used in other controls).
            </summary>
            <returns>Script option for the Cookie object</returns>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Options.GetCookieScriptOption(System.Boolean)">
            <summary>
            Gets a script option defining the Cookie options (this is exposed as the Cookie control
            is used in other controls).
            </summary>
            <param name="asChild">Flags that this option should be added a child</param>
            <returns>Script option for the Cookie object</returns>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Options.SetExpiry(System.Int32)">
            <summary>
            Specifies when the cookie should expire
            </summary>
            <param name="days">Number of days in which the expiry page</param>
            <remarks>
            If no expiration is specified the cookie expires at the end of the browsing session.
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Options.SetPath(System.String)">
            <summary>
            Specifies the path the cookie is valid within.  So "/" means the whole site, "/demos" 
            means it's only applicable in the "demos" subfolder.
            </summary>
            <param name="path">Path of the cookie</param>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Options.SetDomain(System.String)">
            <summary>
            Specifies the domain the cookie should be saved to.  So you could have a subdomain
            so the cookie is only saved there.
            </summary>
            <param name="domain">Domain of the cookie</param>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Options.SetSecure(System.Boolean)">
            <summary>
            If true, the secure attribute of the cookie will be set and the cookie transmission will
            require a secure protocol (like HTTPS).
            </summary>
            <param name="secure">
            true for a secure cookie
            false for non-secure cookie
            </param>
            <remarks>
            Naturally true only works if you're running under SSL.
            </remarks>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.Options.Expires">
            <summary>
            Specifies when the cookie should expire
            </summary>
            <remarks>
            If no expiration is specified the cookie expires at the end of the browsing session.
            </remarks>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.Options.Path">
            <summary>
            Specifies the path the cookie is valid within.  So "/" means the whole site, "/demos" 
            means it's only applicable in the "demos" subfolder.
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.Options.Domain">
            <summary>
            Specifies the domain the cookie should be saved to.  So you could have a subdomain
            so the cookie is only saved there.
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.Options.Secure">
            <summary>
            If true, the secure attribute of the cookie will be set and the cookie transmission will
            require a secure protocol (like HTTPS).
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.Options.Cookie">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Utilities.jCookie.Options.Cookie"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jDialog.Methods">
            <summary>
            Methods for changing options (after initialisation).
            </summary>
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetCloseOnEscape">
            <summary>
            Returns [in JavaScript] the current "closeOnEscape" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetCloseOnEscape(System.Boolean)">
            <summary>
            Specifies whether the dialog should close when it has focus and the user 
            presses the esacpe (ESC) key.
            </summary>
            <param name="newValue">New closeOnEscape setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetCloseText">
            <summary>
            Returns [in JavaScript] the current "closeText" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetCloseTextJS(System.String)">
            <summary>
            Specifies the text for the close button. 
            Note that the close text is visibly hidden when using a standard theme.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New closeText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetCloseText(System.String,System.Boolean)">
            <summary>
            Specifies the text for the close button. 
            Note that the close text is visibly hidden when using a standard theme.
            </summary>
            <param name="newValue">New closeText setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetCloseText(System.String)">
            <summary>
            Specifies the text for the close button. 
            Note that the close text is visibly hidden when using a standard theme.
            </summary>
            <param name="newValue">New closeText setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetDialogClass">
            <summary>
            Returns [in JavaScript] the current "dialogClass" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetDialogClassJS(System.String)">
            <summary>
            The specified class name(s) will be added to the dialog, for additional theming.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New dialogClass setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetDialogClass(System.String,System.Boolean)">
            <summary>
            The specified class name(s) will be added to the dialog, for additional theming.
            </summary>
            <param name="newValue">New dialogClass setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetDialogClass(System.String)">
            <summary>
            The specified class name(s) will be added to the dialog, for additional theming.
            </summary>
            <param name="newValue">New dialogClass setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetDraggable">
            <summary>
            Returns [in JavaScript] the current "draggable" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetDraggable(System.Boolean)">
            <summary>
            If set to true, the dialog will be draggable will be draggable by the titlebar.
            </summary>
            <param name="newValue">New draggable setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetHeight">
            <summary>
            Returns [in JavaScript] the current "height" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetHeight(System.Int32)">
            <summary>
            The height of the dialog, in pixels. 
            </summary>
            <param name="newValue">New height setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetHeightToAuto">
            <summary>
            The height of the dialog, in pixels. 
            Specifying 'auto' is also supported to make the dialog adjust based on its content.		
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetHideEffect">
            <summary>
            Returns [in JavaScript] the current "hide" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetHideEffect(Fluqi.Core.Animation.eAnimation)">
            <summary>
            The effect to be used when the dialog is closed.
            </summary>
            <param name="newValue">New hide setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetHideEffectJS(System.String)">
            <summary>
            The effect to be used when the dialog is closed.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New hide setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetHideEffect(System.String,System.Boolean)">
            <summary>
            The effect to be used when the dialog is closed.
            </summary>
            <param name="newValue">New hide setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetHideEffect(System.String)">
            <summary>
            The effect to be used when the dialog is closed.
            </summary>
            <param name="newValue">New hide setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetMaxHeight">
            <summary>
            Returns [in JavaScript] the current "maxHeight" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetMaxHeight(System.Int32)">
            <summary>
            The maximum height to which the dialog can be resized, in pixels.
            </summary>
            <param name="newValue">New maxHeight setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetMaxWidth">
            <summary>
            Returns [in JavaScript] the current "maxWidth" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetMaxWidth(System.Int32)">
            <summary>
            The maximum width to which the dialog can be resized, in pixels
            </summary>
            <param name="newValue">New maxWidth setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetMinHeight">
            <summary>
            Returns [in JavaScript] the current "minHeight" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetMinHeight(System.Int32)">
            <summary>
            The minimum height to which the dialog can be resized, in pixels.
            </summary>
            <param name="newValue">New minHeight setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetMinWidth">
            <summary>
            Returns [in JavaScript] the current "minWidth" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetMinWidth(System.Int32)">
            <summary>
            The minimum width to which the dialog can be resized, in pixels.
            </summary>
            <param name="newValue">New minWidth setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetModal">
            <summary>
            Returns [in JavaScript] the current "modal" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetModal(System.Boolean)">
            <summary>
            If set to true, the dialog will have modal behavior; other items on the 
            page will be disabled (i.e. cannot be interacted with). Modal dialogs 
            create an overlay below the dialog but above other page elements.
            </summary>
            <param name="newValue">New modal setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetPosition">
            <summary>
            Returns [in JavaScript] the current "position" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetPositionJS(System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetPosition(System.String,System.Boolean)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetPosition(System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetPosition(Fluqi.Core.Position.ePosition)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetPosition(System.String,System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing x,y position string values (e.g. ['right','top'] for top right corner)
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetPosition(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing x,y position string values (e.g. ['right','top'] for top right corner)
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetPosition(System.Int32,System.Int32)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing an x,y coordinate pair in pixel offset from left, top corner of viewport (e.g. [350,100]) 
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetResizable">
            <summary>
            Returns [in JavaScript] the current "reisizable" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetResizable(System.Boolean)">
            <summary>
            If set to true, the dialog will be resizeable.
            </summary>
            <param name="newValue">New reisizable setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetShowEffect">
            <summary>
            Returns [in JavaScript] the current "show" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetShowEffect(Fluqi.Core.Animation.eAnimation)">
            <summary>
            The effect to be used when the dialog is opened.
            </summary>
            <param name="newValue">New show setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetShowEffectJS(System.String)">
            <summary>
            The effect to be used when the dialog is opened.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New show setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetShowEffect(System.String,System.Boolean)">
            <summary>
            The effect to be used when the dialog is opened.
            </summary>
            <param name="newValue">New show setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetShowEffect(System.String)">
            <summary>
            The effect to be used when the dialog is opened.
            </summary>
            <param name="newValue">New show setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetStack">
            <summary>
            Returns [in JavaScript] the current "stack" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetStack(System.Boolean)">
            <summary>
            Specifies whether the dialog will stack on top of other dialogs. 
            This will cause the dialog to move to the front of other dialogs when 
            it gains focus.
            </summary>
            <param name="newValue">New stack setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetTitle">
            <summary>
            Returns [in JavaScript] the current "title" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetTitleJS(System.String)">
            <summary>
            Specifies the title of the dialog. Any valid HTML may be set as the title. 
            The title can also be specified by the title attribute on the dialog source element.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New title setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetTitle(System.String,System.Boolean)">
            <summary>
            Specifies the title of the dialog. Any valid HTML may be set as the title. 
            The title can also be specified by the title attribute on the dialog source element.
            </summary>
            <param name="newValue">New title setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetTitle(System.String)">
            <summary>
            Specifies the title of the dialog. Any valid HTML may be set as the title. 
            The title can also be specified by the title attribute on the dialog source element.
            </summary>
            <param name="newValue">New title setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetWidth">
            <summary>
            Returns [in JavaScript] the current "width" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetWidth(System.Int32)">
            <summary>
            The width of the dialog, in pixels.
            </summary>
            <param name="newValue">New width setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.GetZIndex">
            <summary>
            Returns [in JavaScript] the current "zIndex" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.SetZIndex(System.Int32)">
            <summary>
            The starting z-index for the dialog.
            </summary>
            <param name="newValue">New zIndex setting</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.#ctor(Fluqi.Widget.jDialog.Dialog)">
            <summary>
            Constructor
            </summary>
            <param name="dlg">Dialog object to call</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.Destroy">
            <summary>
            Remove the dialog functionality completely. This will return the element back to its pre-init state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.Disable">
            <summary>
            Disable the dialog.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.Enable">
            <summary>
            Enable the dialog.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.Widget">
            <summary>
            Returns the .ui-dialog element.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.IsOpen">
            <summary>
            Returns true if the dialog is currently open.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.MoveToTop">
            <summary>
            Moves the dialog to the top of the dialog stack.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.Open">
            <summary>
            Opens the dialog.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Methods.Close">
            <summary>
            Closes the dialog.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSpinner.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Rendering.#ctor(Fluqi.Widget.jSpinner.Spinner)">
            <summary>
            Constructor
            </summary>
            <param name="spinner">Spinner object to set rendering options of</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Widget.jSpinner.Rendering.Spinner"/> object so we can continue defining Spinner attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jSpinner.Rendering.Spinner"/> object to return chaining to the Spinner collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jSpinner.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Rendering.ShowCSS">
            <summary>
            Writes slim CSS to the browser (jQuery UI classes aren't expanded for non-JS users)
            </summary>
            <returns>Spinner object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jSpinner.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>Spinner object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>Spinner object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jSpinner.Rendering.Spinner">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jSpinner.Rendering.Spinner"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSelectMenu.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Rendering.#ctor(Fluqi.Widget.jSelectMenu.SelectMenu)">
            <summary>
            Constructor
            </summary>
            <param name="selectMenu">SelectMenu object to set rendering options of</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Widget.jSelectMenu.Rendering.SelectMenu"/> object so we can continue defining SelectMenu attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jSelectMenu.Rendering.SelectMenu"/> object to return chaining to the SelectMenu collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jSelectMenu.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Rendering.ShowCSS">
            <summary>
            Writes slim CSS to the browser (jQuery UI classes aren't expanded for non-JS users)
            </summary>
            <returns>SelectMenu object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jSelectMenu.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>SelectMenu object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>SelectMenu object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Rendering.SelectMenu">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jSelectMenu.Rendering.SelectMenu"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Utilities.jAnimation.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI Animation.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI Animation.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="F:Fluqi.Utilities.jAnimation.Options.DEFAULT_DURATION">
            <summary>
            Default expiry time (as defined by jQuery).
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.SetEffect(Fluqi.Core.Animation.eAnimation)">
            <summary>
            The effect to use when showing/hiding.
            </summary>
            <param name="animation">Effect enum to use</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.SetEffect(System.String)">
            <summary>
            The effect to use when showing/hiding.
            </summary>
            <param name="effect">Effect as a string to use</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.SetEasing(Fluqi.Core.Ease.eEase)">
            <summary>
            The easing effect to use when showing/hiding.
            </summary>
            <param name="easing">Easing enum to use</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.SetEasing(System.String)">
            <summary>
            The easing effect to use when showing/hiding.
            </summary>
            <param name="easing">Easing name to use</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.SetDuration(System.Int32)">
            <summary>
            The duration the effect should play for (in milliseconds).
            </summary>
            <param name="duration">Duration (milliseconds) to use.</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.SetDuration(System.String)">
            <summary>
            The duration the effect should play for.
            </summary>
            <param name="duration">Duration to use, can be milliseconds, or "fast", "slow" or "normal".</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.SetDuration(Fluqi.Core.Speed.eSpeed)">
            <summary>
            The duration the effect should play for.
            </summary>
            <param name="speed">Duration enum to use.</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.SetJSON(System.String)">
            <summary>
            Sets the effects as a JSON object
            </summary>
            <param name="json">JSON object to use</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.SetDisabled">
            <summary>
            Turns off the animation
            </summary>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.#ctor(Fluqi.Utilities.jAnimation.Animation,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ani">Animation object to define options for</param>
            <param name="caller">caller</param>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Utilities.jAnimation.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Utilities.jAnimation.Options.Animation"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Utilities.jAnimation.Options.Animation"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.GetAnimationScriptOption">
            <summary>
            Gets a script option defining the Animation options (this is exposed as the Animation control
            is used in other controls).
            </summary>
            <returns>Script option for the Animation object</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.GetAnimationScriptOption(System.Boolean)">
            <summary>
            Gets a script option defining the Animation options (this is exposed as the Animation control
            is used in other controls).
            </summary>
            <param name="asChild">Flags that this option should be added a child</param>
            <returns>Script option for the Animation object</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jAnimation.Options.Animation">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Utilities.jAnimation.Options.Animation"/> object these options are for
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jAnimation.Options.Caller">
            <summary>
            Specifies the type of caller using the animation.  For instance it's common for the animation properties
            to be used by both "show" and "hide" methods on a widget.  We need to differentiate between the two
            when rendering the script output.
            </summary>
            <remarks>
            So if you're calling from a "show" you'll get something like 
            	{ show: { effect: "blind", duration: 500 } }
            for example
            </remarks>
        </member>
        <member name="P:Fluqi.Utilities.jAnimation.Options.Effect">
            <summary>
            Corresponds to <see cref="T:Fluqi.Core.Animation.eAnimation"/>
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jAnimation.Options.Easing">
            <summary>
            Corresponds to <see cref="T:Fluqi.Core.Ease.eEase"/>
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jAnimation.Options.Duration">
            <summary>
            String (as it can be "slow"/"fast", etc - think you can stil do this)
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jAnimation.Options.JSON">
            <summary>
            Sets the Animation properties as a JSON string object
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jAnimation.Options.Disable">
            <summary>
            Specifies that the animation is off.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jTab.AnimationOptions">
            <summary>
            Models the Animation child for setting placement of the tab control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.AnimationOptions.#ctor(Fluqi.Widget.jTab.Options,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tabOptions">Tab options object</param>
            <param name="caller">
            Specifies the type of caller using the animation.  For instance it's common for the animation properties
            to be used by both "show" and "hide" methods on a widget.  We need to differentiate between the two
            when rendering the script output.
            </param>
        </member>
        <member name="M:Fluqi.Widget.jTab.AnimationOptions.Finish">
            <summary>
            Used to flag that configuration of <see cref="P:Fluqi.Widget.jTab.AnimationOptions.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jTab.AnimationOptions.Options"/> object so we can continue defining attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jTab.AnimationOptions.Options"/> object to return chaining to the parent object</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.AnimationOptions.SetEffect(Fluqi.Core.Animation.eAnimation)">
            <summary>
            The effect to use when showing/hiding.
            </summary>
            <param name="effect">Effect enum to use</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.AnimationOptions.SetEffect(System.String)">
            <summary>
            The effect to use when showing/hiding.
            </summary>
            <param name="effect">Effect as a string to use</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.AnimationOptions.SetDuration(System.Int32)">
            <summary>
            The duration the effect should play for (in milliseconds).
            </summary>
            <param name="duration">Duration (milliseconds) to use.</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.AnimationOptions.SetDuration(System.String)">
            <summary>
            The duration the effect should play for.
            </summary>
            <param name="duration">Duration to use, can be milliseconds, or "fast", "slow" or "normal".</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.AnimationOptions.SetDuration(Fluqi.Core.Speed.eSpeed)">
            <summary>
            The duration the effect should play for.
            </summary>
            <param name="speed">Duration enum to use.</param>
            <returns>Object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jTab.AnimationOptions._TabOptions">
            <summary>
            Reference to the Tab object to return control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.AnimationOptions.Options">
            <summary>
            Holds the Animation options object for configuration.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jDialog.ButtonOptions">
            <summary>
            Set of properties to be applied to the button(s) added to the dialog, and the responsibility for how
            they are scripted out to the page.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.ButtonOptions.#ctor(Fluqi.Widget.jDialog.Options)">
            <summary>
            Constructor
            </summary>
            <param name="options">Dialog object to define options for</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.ButtonOptions.AddButton(System.String,System.String)">
            <summary>
            Adds a button definition to the dialog to be rendered when the dialog is shown.
            </summary>
            <param name="label">What the user sees on the button.</param>
            <param name="methodSource">JavaScript to be executed when the button is clicked.</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.ButtonOptions.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jDialog.ButtonOptions"/> has finished, and 
            returns the <see cref="T:Fluqi.Widget.jDialog.Dialog"/> object so we can continue defining Dialog attributes.
            </summary>
            <returns>Returns <see cref="T:Fluqi.Widget.jDialog.Dialog"/> object to return chaining to the Dialog object</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.ButtonOptions.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.ButtonOptions.GetButtonsScriptOptions">
            <summary>
            Gets a script option defining the Button options to use for the Dialog control.
            </summary>
            <returns>Script option for the Buttons</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.ButtonOptions.GetButtonsScriptOption(System.Boolean)">
            <summary>
            Gets a script option defining the Button options to use for the Dialog control.
            </summary>
            <param name="asChild">Flags that this option should be added a child</param>
            <returns>Script option for the Buttons</returns>
        </member>
        <member name="P:Fluqi.Widget.jDialog.ButtonOptions.DialogOptions">
            <summary>
            Holds a reference to the Options class of the Dialog (so the fluent interface can
            be maintained and the caller can return back to the dialog to continue the configuration)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.ButtonOptions.Buttons">
            <summary>
            The set of buttons to be added to the dialog.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAutoComplete.Events">
            <summary>
            A set of events to apply to a set of jQuery UI AutoComplete.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of events to apply to a set of jQuery UI AutoComplete.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.#ctor(Fluqi.Widget.jAutoComplete.AutoComplete)">
            <summary>
            Constructor
            </summary>
            <param name="ac">Autocomplete object to configure events for</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jAutoComplete.Events"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jAutoComplete.Events.AutoComplete"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jAutoComplete.Events.AutoComplete"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of events the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.SetCreateEvent(System.String)">
            <summary>
            This event is triggered when autocomplete is created.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.SetSearchEvent(System.String)">
            <summary>
            Specifies the code that should be used when event is called from jQuery.
            Note that you shouldn't include any function prototype information as Fluqi does
            this part for you.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.SetResponseEvent(System.String)">
            <summary>
            Triggered after a search completes, but before the menu is shown. Useful for local manipuation
            of suggestion data, where a custom "source" option callback is not required. This event is always
            triggered when a search completes, even if the menu will not be shown because there are no results or
            the Autocomplete is disabled.
            </summary>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.SetOpenEvent(System.String)">
            <summary>
            Triggered when the suggestion menu is opened.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.SetFocusEvent(System.String)">
            <summary>
            Before focus is moved to an item (not selecting), ui.item refers to the focused item. 
            The default action of focus is to replace the text field's value with the value of the 
            focused item, though only if the focus event was triggered by a keyboard interaction. 
            Canceling this event prevents the value from being updated, but does not prevent 
            the menu item from being focused.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.SetSelectEvent(System.String)">
            <summary>
            Triggered when an item is selected from the menu; ui.item refers to the selected item. 
            The default action of select is to replace the text field's value with the value of 
            the selected item. Canceling this event prevents the value from being updated, but 
            does not prevent the menu from closing.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.SetCloseEvent(System.String)">
            <summary>
            When the list is hidden - doesn't have to occur together with a change.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Events.SetChangeEvent(System.String)">
            <summary>
            Triggered when the field is blurred, if the value has changed; ui.item refers to the selected item.
            </summary>
            <param name="methodSource">Source code to use when the event is called</param>
            <returns>Events object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Events.SearchEvent">
            <summary>
            Before a request (source-option) is started, after minLength and delay are met. 
            Can be canceled (return false), then no request will be started and no items suggested.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Events.ResponseEvent">
            <summary>
            Triggered after a search completes, but before the menu is shown. Useful for local manipuation
            of suggestion data, where a custom "source" option callback is not required. This event is always
            triggered when a search completes, even if the menu will not be shown because there are no results or
            the Autocomplete is disabled.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Events.CreateEvent">
            <summary>
            This event is triggered when autocomplete is created.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Events.OpenEvent">
            <summary>
            Triggered when the suggestion menu is opened.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Events.FocusEvent">
            <summary>
            Before focus is moved to an item (not selecting), ui.item refers to the focused item. 
            The default action of focus is to replace the text field's value with the value of the 
            focused item, though only if the focus event was triggered by a keyboard interaction. 
            Canceling this event prevents the value from being updated, but does not prevent 
            the menu item from being focused.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Events.SelectEvent">
            <summary>
            Triggered when an item is selected from the menu; ui.item refers to the selected item. 
            The default action of select is to replace the text field's value with the value of 
            the selected item. Canceling this event prevents the value from being updated, but 
            does not prevent the menu from closing.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Events.CloseEvent">
            <summary>
            When the list is hidden - doesn't have to occur together with a change.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Events.ChangeEvent">
            <summary>
            Triggered when the field is blurred, if the value has changed; ui.item refers to the selected item.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Events.AutoComplete">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jAutoComplete.Events.AutoComplete"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAccordion.Hyperlink">
            <summary>
            A set of properties to apply to a set of jQuery UI Tab.
            </summary>
            <summary>
            Hyperlink that appears in the header of the accordion panel.
            </summary>
        </member>
        <member name="T:Fluqi.Core.Hyperlink">
            <summary>
            Properies for a hyperlink.
            </summary>
        </member>
        <member name="P:Fluqi.Core.Hyperlink.Title">
            <summary>
            Specifies the Title that should appear in the hyperlink (i.e. the content of the a link).
            </summary>
        </member>
        <member name="P:Fluqi.Core.Hyperlink.URL">
            <summary>
            Destination link of the hyperlink
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.WithCss(System.String,System.Object[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.WithStyle(System.String,System.String,System.Object[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Hyperlink._Header">
            <summary>
            Header object the hyperlink is part of.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.#ctor(Fluqi.Widget.jAccordion.Header)">
            <summary>
            Constructor
            </summary>
            <param name="header">Header this hyperlink belongs to</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.Finish">
            <summary>
            Returns the fluent interface back to the panel header.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.SetTitle(System.String)">
            <summary>
            Specifies the title that should appear in the panel
            </summary>
            <param name="title">Title to appear in the panel</param>
            <returns>Header of the panel to main the fluent interface</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.SetURL(System.String)">
            <summary>
            Specifies where the panel header should link to.  
            Normally this is just to the anchor in the accordion control.
            Be _VERY_ careful changing this to anything other than "#"
            as it probably won't do what you think or want.
            </summary>
            <param name="url">URL to link to when the panel is clicked</param>
            <returns>Header of the panel to main the fluent interface</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Hyperlink.GetTagHtml">
            <summary>
            Renders the HTML for the hyperlink.
            </summary>
            <returns>String of HTML</returns>
        </member>
        <member name="T:Fluqi.Widget.jMenu.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Rendering.#ctor(Fluqi.Widget.jMenu.Menu)">
            <summary>
            Constructor
            </summary>
            <param name="menu">Menu object to set rendering options of</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Widget.jMenu.Rendering.Menu"/> object so we can continue defining Menu attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jMenu.Rendering.Menu"/> object to return chaining to the Menu collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jMenu.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Rendering.ShowCSS">
            <summary>
            Writes slim CSS to the browser (jQuery UI classes aren't expanded for non-JS users)
            </summary>
            <returns>Menu object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jMenu.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>Menu object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>Menu object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jMenu.Rendering.Menu">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jMenu.Rendering.Menu"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jToolTip.Methods">
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
            <summary>
            Methods for changing options (after initialisation).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.#ctor(Fluqi.Widget.jToolTip.ToolTip)">
            <summary>
            Constructor
            </summary>
            <param name="tooltip">ToolTip object to call</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.Destroy">
            <summary>
            Removes the ToolTip functionality completely. This will return the element back to its pre-init state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.Disable">
            <summary>
            Disables the tooltip.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.Enable">
            <summary>
            Enable the tooltip.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.Widget">
            <summary>
            Returns a jQuery object containing the generated wrapper.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.Open">
            <summary>
            Programmatically open a tooltip. This is only intended to be called for non-delegated tooltips.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.Close">
            <summary>
            Closes a tooltip. This is only intended to be called for non-delegated tooltips.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.BuildMethodCall(System.String,System.Object[])">
            <summary>
            Builds up the JavaScript required to call a given method.
            </summary>
            <param name="methodName">Name of the method to call (as define in the jQuery UI documentation for the control.</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>JavaScript required to call the jQuery UI control method</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.GetContent">
            <summary>
            Returns [in JavaScript] the current "content" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetContentByString(System.String)">
            <summary>
            The content of the tooltip.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetContentByFunction(System.String)">
            <summary>
            The content of the tooltip.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.GetDisabled">
            <summary>
            Returns [in JavaScript] the current "disabled" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetDisabled(System.Boolean)">
            <summary>
            Disables the tooltip.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.GetHide">
            <summary>
            Returns [in JavaScript] the current "hide" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.DisabledHideEffect">
            <summary>
            Hide by Boolean: When set to false, no animation will be used and the tooltip will be hidden immediately. 
            When set to true, the tooltip will fade out with the default duration and the default easing.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetHide(System.Int32)">
            <summary>
            Hide by Number: The tooltip will fade out with the specified duration and the default easing.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetHide(Fluqi.Core.Animation.eAnimation,Fluqi.Core.Ease.eEase,System.Int32)">
            <summary>
            Hide by Number: The tooltip will fade out with the specified duration and the default easing.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetHide(System.String)">
            <summary>
            Hide by Number: The tooltip will fade out with the specified duration and the default easing.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.GetShow">
            <summary>
            Returns [in JavaScript] the current "show" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.DisabledShowEffect">
            <summary>
            Show by Boolean: When set to false, no animation will be used and the tooltip will be hidden immediately. 
            When set to true, the tooltip will fade out with the default duration and the default easing.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetShow(Fluqi.Core.Animation.eAnimation,Fluqi.Core.Ease.eEase,System.Int32)">
            <summary>
            Show by Number: The tooltip will fade out with the specified duration and the default easing.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetShow(System.Int32)">
            <summary>
            Show by Number: The tooltip will fade out with the specified duration and the default easing.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetShow(System.String)">
            <summary>
            Show by Object: 
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.GetItems">
            <summary>
            A selector indicating which items should show tooltips. 
            Customize if you're using something other then the title attribute for the tooltip content, or if you need a different selector for event delegation.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetItems(System.String[])">
            <summary>
            A selector indicating which items should show tooltips. 
            Customize if you're using something other then the title attribute for the tooltip content, or if you need a different selector for event delegation.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.GetTooltipClass">
            <summary>
            Returns [in JavaScript] the current "tooltipClass" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetTooltipClass(System.String)">
            <summary>
            Tooltip class to add
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.GetTrack">
            <summary>
            Returns [in JavaScript] the current "track" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetTrack(System.Boolean)">
            <summary>
            Whether the tooltip should track the mouse
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.GetPosition">
            <summary>
            Returns [in JavaScript] the current "position" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetPositionJS(System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetPosition(System.String,System.Boolean)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetPosition(System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetPosition(Fluqi.Core.Position.ePosition)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetPosition(System.String,System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing x,y position string values (e.g. ['right','top'] for top right corner)
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetPosition(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing x,y position string values (e.g. ['right','top'] for top right corner)
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Methods.SetPosition(System.Int32,System.Int32)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing an x,y coordinate pair in pixel offset from left, top corner of viewport (e.g. [350,100]) 
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Methods.ToolTip">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jToolTip.Methods.ToolTip"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAutoComplete.AutoComplete">
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
            <param name="source">
            Source for the AutoComplete to resolve items from, which could be a JavaScript array,
            a JavaScript callback function, a URL, etc.
            </param>	
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.#ctor(System.IO.TextWriter,System.String,System.String)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
            <param name="id">ID of the control (which must be unique on the page)</param>
            <param name="source">
            Source for the AutoComplete to resolve items from, which could be a JavaScript array,
            a JavaScript callback function, a URL, etc.
            </param>	
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.GetTagHtml">
            <summary>
            Builds up the HTML for the AutoComplete control and options (and returns the generated HTML).
            </summary>
            <returns>Generated HTML for the control.</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.Render">
            <summary>
            Builds up the HTML for the AutoComplete control and adds to the response stream.
            JavaScript initialisation for the control is also added to the response stream if the
            AutoScript rendering option is true.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and tabs initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the accordion control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.WithCss(System.String,Fluqi.Widget.jAutoComplete.AutoComplete[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "autocomplete" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "autocomplete" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.WithStyle(System.String,System.String,Fluqi.Widget.jAutoComplete.AutoComplete[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.AutoComplete.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.AutoComplete.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the AutoComplete control, this is "autocomplete".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.AutoComplete.ID">
            <summary>
            ID of the jQuery UI object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.AutoComplete.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.AutoComplete.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Widget.jAutoComplete.AutoComplete.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.AutoComplete.Events">
            <summary>
            Specifies the events to be adopted for this control (see <see cref="P:Fluqi.Widget.jAutoComplete.AutoComplete.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.AutoComplete.Methods">
            <summary>
            Specifies the Methods object that can be used to interact with the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.AutoComplete.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAccordion.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI Accordion.
            </summary>
            <remarks>
            Properties not yet supported:
              header
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Accordion.
            </summary>
            <remarks>
            Properties not yet supported:
              header
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI Accordion.
            </summary>
            <remarks>
            Properties not yet supported:
              header
            </remarks>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Options.DEFAULT_CONTAINER_TAG">
            <summary>
            Default HTML element to use for the accordion container
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Options.DEFAULT_HEADING_TAG">
            <summary>
            Default heading to use for the accordion widget panel header.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Options.DEFAULT_CONTENT_TAG">
            <summary>
            Default tag to use for the accordion content HTML element.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Options.DEFAULT_HEADER_ICON_CLASS">
            <summary>
            Default header icon for the accordion widget.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Options.DEFAULT_ACTIVE_HEADER_ICON_CLASS">
            <summary>
            Default selected header icon for the accordion widget.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Options.DEFAULT_HEIGHT_STYLE">
            <summary>
            Default Height Style for panels.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Options.DEFAULT_ANIMATE">
            <summary>
            Default animation for the accordion widget.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Options.DEFAULT_EVENT">
            <summary>
            Default event for changing panels for the accordion widget.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.#ctor(Fluqi.Widget.jAccordion.Accordion)">
            <summary>
            Constructor
            </summary>
            <param name="accordion">Accordion object to be configured</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jAccordion.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jAccordion.Options.Accordion"/> object so we can continue defining Accordion attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jAccordion.Options.Accordion"/> object to return chaining to the Accordion collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.AreIconsEnabled">
            <summary>
            Flags whether the panel header icons are going to be shown or not.
            </summary>
            <returns>true if (either) icon is on, false otherwise</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.AreIconsDefaults">
            <summary>
            Flags whether the panel header icons are set to the defaults (that is if they are we don't need
            to render the javascript to render them as it's wasted)
            </summary>
            <returns>
            Returns true if icons are set to the jQuery UI defaults
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetDisabled(System.Boolean)">
            <summary>
            Disables the accordion if set to true 
            </summary>
            <param name="disabled">Disables the accordion if set to true</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetAnimate(System.String)">
            <summary>
            If and how to animate changing panels.
            </summary>
            <param name="animated">Name of easing to use with default duration.</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetAnimate(Fluqi.Core.Ease.eEase)">
            <summary>
            If and how to animate changing panels.
            </summary>
            <param name="effect">Name of easing to use with default duration.</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetCollapsible(System.Boolean)">
            <summary>
            Whether all the sections can be closed at once. Allows collapsing the active section.
            </summary>
            <param name="collapsible">Flags whether collapsible is on or off</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetEvent(System.String)">
            <summary>
            The event that accordion headers will react to in order to activate the associated panel. 
            Multiple events can be specificed, separated by a space
            </summary>
            <param name="evt">Event to use to open a tab</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetEvent(Fluqi.Core.BrowserEvent.eBrowserEvent)">
            <summary>
            The event that accordion headers will react to in order to activate the associated panel. 
            </summary>
            <param name="browserEvent">Event to kick off changing of panes</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetHeightStyle(Fluqi.Core.HeightStyle.eHeightStyle)">
            <summary>
            Controls the height of the accordion and each panel.  Possible values are "auto", "fill" and "content".
            </summary>
            <param name="style">Style to use</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetHeightStyle(System.String)">
            <summary>
            Controls the height of the accordion and each panel.  Possible values are "auto", "fill" and "content".
            </summary>
            <param name="style">Style to use</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetContainerTag(System.String)">
            <summary>
            Sets the container tag (outer accordion HTML element) that contains all panels.
            By default this is DIV.
            </summary>
            <param name="containerTag">Container tag to use, e.g. DL, DIV, etc</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetHeadingTag(System.String)">
            <summary>
            Sets the tag to use for the heading of all panels, by default this is H3.
            </summary>
            <param name="headingTag">Heading tag to use, e.g. H2</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetContentTag(System.String)">
            <summary>
            Sets the tag to use for the content of all panels, by default this is DIV.
            </summary>
            <param name="contentTag">Content tag to use, e.g. P or DT</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetIcons(System.String,System.String)">
            <summary>
            Icons to use for headers, matching an icon defined by the jQuery UI CSS Framework. 
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetIcons(Fluqi.Core.Icons.eIconClass,Fluqi.Core.Icons.eIconClass)">
            <summary>
            Icons to use for headers, matching an icon defined by the jQuery UI CSS Framework. 
            </summary>
            <remarks>
            Overload for specifying icons through an enumeration (so you get the itellisense when finding them).
            See http://api.jqueryui.com/accordion/#option-icons for details
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Options.SetIconsOff">
            <summary>
            Icons to use for headers, matching an icon defined by the jQuery UI CSS Framework. 
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Options.ContainerTag">
            <summary>
            Tag used for the outer accordion HTML element (i.e. the parent element of all panels).
            By default this is DIV
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Options.HeadingTag">
            <summary>
            Tag used for the accordion panel header (by default this is an H3).
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Options.ContentTag">
            <summary>
            Tag used for the accordion panel content element (by default this is a DIV)
            </summary>
            <remarks>
            Note that this is not detailed in the jQuery UI library, this is a property for Fluqi to
            aid overriding the HTML mark-up of the content element of the panel.
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Options.Disabled">
            <summary>
            Flags whether the "disabled" flag is on or off (default is "false").
            </summary>
            <remarks>See http://jqueryui.com/demos/accordion/#option-disabled for details</remarks>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Options.Animate">
            <summary>
            Stores the animation to be used when opening/closing panels (default is "slide")
            </summary>
            <remarks>See http://jqueryui.com/demos/accordion/#option-animated for details</remarks>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Options.HeightStyle">
            <summary>
            Specifies how the panels should expand (default is "auto")
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Options.Collapsible">
            <summary>
            Stores whether the panels are initialised with the collapsible option on or off (default is "false").
            </summary>
            <remarks>See http://jqueryui.com/demos/accordion/#option-collapsible for more details</remarks>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Options.Event">
            <summary>
            Stores the event [override] to be used when opening/closing panels (default is "click").
            </summary>
            <remarks>See http://jqueryui.com/demos/accordion/#option-event for details</remarks>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Options.HeaderIconClass">
            <summary>
            Icons to use for non-selected accordion headers icon class.  This equates to the 'header' 
            class.
            We recommend using the icons native to the jQuery UI CSS Framework manipulated 
            by jQuery UI ThemeRoller
            </summary>
            <remarks>See http://jqueryui.com/demos/accordion/#option-icons for more details</remarks>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Options.activeHeaderIconClass">
            <summary>
            Icons to use for selected accordion header icon class.  This equates to the 'activeHeader' 
            class.
            We recommend using the icons native to the jQuery UI CSS Framework manipulated 
            by jQuery UI ThemeRoller
            </summary>
            <remarks>See http://jqueryui.com/demos/accordion/#option-icons for more details</remarks>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Options.Accordion">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jAccordion.Options.Accordion"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Core.Orientation">
            <summary>
            Models the Orientation options for the Slider control
            </summary>
        </member>
        <member name="M:Fluqi.Core.Orientation.OrientationToString(Fluqi.Core.Orientation.eOrientation)">
            <summary>
            Converts the provided option into a string, used for rendering the Slider control.
            </summary>
            <param name="orientation">Option to convert</param>
            <returns>Converted option as string</returns>
        </member>
        <member name="M:Fluqi.Core.Orientation.StringToOrientation(System.String)">
            <summary>
            Converts the provided option into the equivalent enumeration value.
            </summary>
            <param name="orientation">String to convert</param>
            <returns>String converted to the corresponding enumeration</returns>
        </member>
        <member name="M:Fluqi.Core.Orientation.ToList">
            <summary>
            Returns all the enumeration items as list;
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fluqi.Core.Orientation.eOrientation">
            <summary>
            Models the Orientation options for the Slider control
            </summary>
        </member>
        <member name="F:Fluqi.Core.Orientation.eOrientation.Horizontal">
            <summary>Flags that the Slider should be rendered horizonally</summary>
        </member>
        <member name="F:Fluqi.Core.Orientation.eOrientation.Vertical">
            <summary>Flags that the Slider should be rendered vertically</summary>
        </member>
        <member name="T:Fluqi.Widget.jSlider.Slider">
            <summary>
            A set of properties to apply to a set of jQuery UI Slider.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.WithCss(System.String,System.Object[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Slider" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Slider" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.WithStyle(System.String,System.String,Fluqi.Widget.jSlider.Slider[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the tabs initialisation script to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the slider control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.#ctor(System.IO.TextWriter)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
            <param name="id">ID of the control (which must be unique on the page)</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.GetTagHtml">
            <summary>
            Builds and returns the HTML for the Slider control (basically the DIV).
            JavaScript initialisation for the control is also added to the response stream if the
            AutoScript rendering option is true.
            </summary>
            <returns>HTML for the Slider control.</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.Render">
            <summary>
            Writes the HTML for the Slider control to the response stream.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Slider.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Slider.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the Slider control, this is "slider".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Slider.ID">
            <summary>
            ID of the jQuery UI object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Slider.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Slider.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Widget.jSlider.Slider.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Slider.Events">
            <summary>
            Specifies the events to be adopted for the control (see <see cref="P:Fluqi.Widget.jSlider.Slider.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Slider.Methods">
            <summary>
            Specifies the Methods object that can be used to interact with the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Slider.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jPushButton.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Rendering.#ctor(Fluqi.Widget.jPushButton.PushButton)">
            <summary>
            Constructor
            </summary>
            <param name="btn">PushButton object to set rendering options of</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="T:Fluqi.Widget.jPushButton.PushButton"/> object so we can continue defining Button attributes.
            </summary>
            <returns>Returns <see cref="T:Fluqi.Widget.jPushButton.PushButton"/> object to return chaining to the Button collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jPushButton.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Rendering.ShowCSS">
            <summary>
            Writes full CSS to the browser (jQuery UI classes are expanded for non-JS users)
            </summary>
            <returns>Control for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jPushButton.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>Button object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>Button object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.Rendering.Button">
            <summary>
            Holds a reference to the <see cref="T:Fluqi.Widget.jPushButton.PushButton"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAccordion.Header">
            <summary>
            A set of properties to apply to a set of jQuery UI Tab.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Header.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Header.WithCss(System.String,System.Object[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Header.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Header.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Header.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Header.WithStyle(System.String,System.String,System.Object[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Header.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Header.#ctor(Fluqi.Widget.jAccordion.Panel)">
            <summary>
            Constructor
            </summary>
            <param name="panel">Panel the header is for</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Header.Finish">
            <summary>
            Returns the Panel the header is on to maintain the fluent
            interface.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Header.GetTagHtml">
            <summary>
            Renders the panel header and returns the HTML
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Header.OnPanel">
            <summary>
            Holds a reference to the Panel the header is on
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSpinner.Methods">
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
            <summary>
            Methods for changing options (after initialisation).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.#ctor(Fluqi.Widget.jSpinner.Spinner)">
            <summary>
            Constructor
            </summary>
            <param name="spinner">Spinner object to call</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.Destroy">
            <summary>
            Removes the spinner functionality completely. This will return the element back to its pre-init state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.Disable">
            <summary>
            Disables the spinner.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.Enable">
            <summary>
            Enable the spinner.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.Widget">
            <summary>
            Returns a jQuery object containing the generated wrapper.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.PageDown(System.Int32)">
            <summary>
            Decrements the value by the specified number of pages, as defined by the page option. 
            Without the parameter, a single page is decremented.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.PageUp(System.Int32)">
            <summary>
            Decrements the value by the specified number of pages, as defined by the page option. 
            Without the parameter, a single page is decremented.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.StepDown(System.Int32)">
            <summary>
            Decrements the value by the specified number of steps. Without the parameter, a single step is decremented. 
            If the resulting value is above the max, below the min, or reuslts in a step mismatch, 
            the value will be adjusted to the closest valid value.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.StepUp(System.Int32)">
            <summary>
            Increments the value by the specified number of steps. Without the parameter, a single step is incremented. 
            If the resulting value is above the max, below the min, or reuslts in a step mismatch, 
            the value will be adjusted to the closest valid value.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.GetValue">
            <summary>
            Gets the current value as a number.
            The value is parsed based on the numberFormat and culture options.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetValue(System.Int32)">
            <summary>
            Sets the value
            </summary>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetValue(System.String)">
            <summary>
            Sets the value
            </summary>
            <param name="value">The value is parsed based on the numberFormat and culture options.</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.GetCulture">
            <summary>
            Returns [in JavaScript] the current "culture" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetCulture(System.String)">
            <summary>
            Sets the culture to use for parsing and formatting the value. 
            If null, the currently set culture in Globalize is used, see Globalize docs for available cultures. 
            Only relevant if the <see cref="M:Fluqi.Widget.jSpinner.Methods.SetNumberFormat(System.String)"/> option is set. Requires Globalize to be included.
            </summary>
            <param name="culture"></param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.GetDisabled">
            <summary>
            Returns [in JavaScript] the current "disabled" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetDisabled(System.Boolean)">
            <summary>
            Disables the spinner.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.GetIcons">
            <summary>
            Returns [in JavaScript] the current "icons" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetIcons(System.String,System.String)">
            <summary>
            Icons to use for buttons, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
            <param name="downIcon">Icon to use for the down</param>
            <param name="upIcon">Icon to use for the up</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetIcons(Fluqi.Core.Icons.eIconClass,Fluqi.Core.Icons.eIconClass)">
            <summary>
            Icons to use for buttons, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
            <param name="downIcon">Icon to use for the down</param>
            <param name="upIcon">Icon to use for the up</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.GetIncremental">
            <summary>
            Returns [in JavaScript] the current "incremental" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetIncremental(System.Boolean)">
            <summary>
            Controls the number of steps taken when holding down a spin button.
            - When set to true, the stepping delta will increase when spun incessantly. 
            - When set to false, all steps are equal (as defined by the step option).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetIncremental(System.String)">
            <summary>
            Controls the number of steps taken when holding down a spin button.
            - Receives one parameter: the number of spins that have occurred. 
            	Must return the number of steps that should occur for the current spin.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.GetMin">
            <summary>
            Returns [in JavaScript] the current "min" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetMin(System.Int32)">
            <summary>
            The minimum allowed value
            </summary>
            <param name="value">The minimum value</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetMin(System.String)">
            <summary>
            The minimum allowed value
            </summary>
            <param name="value">
            If Globalize is included, the min option can be passed as a string which will be parsed based on the 
            numberFormat and culture options; otherwise it will fall back to the native parseFloat() method.
            </param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.GetMax">
            <summary>
            Returns [in JavaScript] the current "max" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetMax(System.Int32)">
            <summary>
            The maximum allowed value
            </summary>
            <param name="value">The maximum value</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetMax(System.String)">
            <summary>
            The maximum allowed value
            </summary>
            <param name="value">
            If Globalize is included, the min option can be passed as a string which will be parsed based on the 
            numberFormat and culture options; otherwise it will fall back to the native parseFloat() method.
            </param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.GetNumberFormat">
            <summary>
            Returns [in JavaScript] the current "numberFormat" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetNumberFormat(System.String)">
            <summary>
            Format of numbers passed to Globalize, if available. 
            </summary>
            <param name="value">
            Most common are "n" for a decimal number and "C" for a currency value. 
            Also see the culture option.
            </param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.GetPage">
            <summary>
            Returns [in JavaScript] the current "page" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetPage(System.Int32)">
            <summary>
            The number of steps to take when paging via the pageUp/pageDown methods.
            </summary>
            <param name="value">New value</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.GetStep">
            <summary>
            Returns [in JavaScript] the current "step" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetStep(System.Int32)">
            <summary>
            The size of the step to take when spinning via buttons or via the stepUp()/stepDown() methods. 
            The element's step attribute is used if it exists and the option is not explicitly set.
            </summary>
            <param name="value">The size of the step</param>
        </member>
        <member name="M:Fluqi.Widget.jSpinner.Methods.SetStep(System.String)">
            <summary>
            The size of the step to take when spinning via buttons or via the stepUp()/stepDown() methods. 
            The element's step attribute is used if it exists and the option is not explicitly set.
            </summary>
            <param name="value">
            If Globalize is included, the step option can be passed as a string which will be parsed based on 
            the numberFormat and culture options, otherwise it will fall back to the native parseFloat.
            </param>
        </member>
        <member name="T:Fluqi.Widget.jToolTip.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI ToolTip.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI ToolTip.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI ToolTip.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Options.#ctor(Fluqi.Widget.jToolTip.ToolTip)">
            <summary>
            Contructor
            </summary>
            <param name="tooltip">Tooltip object we're configuring</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jToolTip.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jToolTip.Options.ToolTip"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jToolTip.Options.ToolTip"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Options.SetContentByFunction(System.String)">
            <summary>
            Sets the tooltip function to use
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Options.SetContentByString(System.String)">
            <summary>
            Sets the tooltip to use
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Options.SetDisabled(System.Boolean)">
            <summary>
            Disables the tooltip.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Options.SetItems(System.String[])">
            <summary>
            A selector indicating which items should show tooltips. 
            Customize if you're using something other then the title attribute for the tooltip content, 
            or if you need a different selector for event delegation.
            When changing this option, you likely need to also change the content option.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Options.SetItemsObject(System.String)">
            <summary>
            A selector indicating which items should show tooltips. 
            Use this option if you're referencing a jQuery object selector
            Customize if you're using something other then the title attribute for the tooltip content, 
            or if you need a different selector for event delegation.
            When changing this option, you likely need to also change the content option.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Options.SetToolTipClass(System.String)">
            <summary>
            A class to add to the widget, can be used to display various tooltip types, like warnings or errors.
            This may get replaced by the classes option.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Options.SetTrack(System.Boolean)">
            <summary>
            Whether the tooltip should track (follow) the mouse.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Options.ToolTip">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jToolTip.Options.ToolTip"/> object these options are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Options.ShowAnimation">
            <summary>
            Defines animation properties when the tab shows.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Options.HideAnimation">
            <summary>
            Defines animation properties when the tab hides.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Options.Content">
            <summary>
            Content of the tooltip
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Options.Disabled">
            <summary>
            Disables (true) or enables (false) the control. Can be set when initialising 
            (first creating) the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Options.Items">
            <summary>
            A selector indicating which items should show tooltips. 
            Customize if you're using something other then the title attribute for the tooltip content, or 
            if you need a different selector for event delegation.
            When changing this option, you likely need to also change the content option.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Options.Position">
            <summary>
            Configuration for the Position utility. The of property defaults to the target element, but can also be overriden.
            Note: In 1.9.0, the default value was { my: "left+15 center", at: "right center", collision: "flipfit" }, 
            but this was changed to more closely match native tooltip positioning.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Options.ToolTipClass">
            <summary>
            A class to add to the widget, can be used to display various tooltip types, like warnings or errors.
            </summary>
            <remarks>
            This may get replaced by the classes option.
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Options.Track">
            <summary>
            Whether the tooltip should track (follow) the mouse.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jToolTip.ToolTip">
            <summary>
            A set of properties to apply to a set of jQuery UI ToolTip.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.WithCss(System.String,System.Object[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "ToolTip" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "ToolTip" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.WithStyle(System.String,System.String,Fluqi.Widget.jToolTip.ToolTip[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the tabs initialisation script to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the ToolTip control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.#ctor(System.IO.TextWriter)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">Response stream to write the control to</param>
            <param name="id">
            ID of the control (which must be unique on the page)
            Leave this empty to apply the tooltip settings to everything on the page (e.g. if you're targetting the
            [title] attribute for everything on the page)
            </param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.GetTagHtml">
            <summary>
            Builds and returns the HTML for the ToolTip control (basically the DIV).
            JavaScript initialisation for the control is also added to the response stream if the
            AutoScript rendering option is true.
            </summary>
            <returns>HTML for the ToolTip control.</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.Render">
            <summary>
            Writes the HTML for the ToolTip control to the response stream.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the script code setting.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.ToolTip.IsGlobal">
            <summary>
            Flags that tooltip settings should be applied globally on the page
            </summary>
            <remarks>
            In essence this just looks for an empty ID.  If the ID is empty, we're not targetting a 
            specific element => we're targetting everything on the page
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.ToolTip.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the ToolTip control, this is "tooltip".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.ToolTip.ID">
            <summary>
            ID of the control to apply the tooltip to (or "document" to apply to the full page).
            By default this is to the "document" level (and cascading downwards).
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.ToolTip.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.ToolTip.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Widget.jToolTip.ToolTip.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.ToolTip.Events">
            <summary>
            Specifies the events to be adopted for the control (see <see cref="P:Fluqi.Widget.jToolTip.ToolTip.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.ToolTip.Methods">
            <summary>
            Specifies the Methods object that can be used to interact with the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.ToolTip.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSelectMenu.Methods">
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
            <summary>
            Methods for changing options (after initialisation).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.#ctor(Fluqi.Widget.jSelectMenu.SelectMenu)">
            <summary>
            Constructor
            </summary>
            <param name="selectMenu">SelectMenu object to call</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.Close">
            <summary>
            Closes the control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.Destroy">
            <summary>
            Removes the control functionality completely. This will return the element back to its pre-init state.
            </summary>		
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.Disable">
            <summary>
            Disables the control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.Enable">
            <summary>
            Enables the control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.Instance">
            <summary>
            Retrieves the selectmenu's instance object. If the element does not have an associated instance, undefined is returned
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.MenuWidget">
            <summary>
            Returns a jQuery object containing the menu element.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.Open">
            <summary>
            Opens the control
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.Refresh">
            <summary>
            Parses the original element and re-renders the menu. Processes any &gt;option&lt; or &gt;optgroup&lt; elements that were added, removed or disabled.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.Widget">
            <summary>
            Returns a jQuery object containing the control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.GetDisabled">
            <summary>
            Disables the control if set to true.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetDisabled(System.Boolean)">
            <summary>
            Disables the control if set to true.
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.GetIcons">
            <summary>
            Icons to use for opening the control, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetIcons(System.String)">
            <summary>
            Icons to use for opening the control, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
            <param name="dropdownIcon"></param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetIcons(Fluqi.Core.Icons.eIconClass)">
            <summary>
            Icons to use for opening the control, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
            <param name="dropdownIcon"></param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.GetAppendTo">
            <summary>
            Icons to use for opening the control, matching an icon defined by the jQuery UI CSS Framework.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetAppendTo(System.String)">
            <summary>
            Which element to append the menu to
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.GetPosition">
            <summary>
            Returns [in JavaScript] the current "position" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetPositionJS(System.String)">
            <summary>
            Identifies the position of the menu in relation to the associated button element
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetPosition(System.String,System.Boolean)">
            <summary>
            Identifies the position of the menu in relation to the associated button element
            </summary>
            <param name="position">New position setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetPosition(System.String)">
            <summary>
            Identifies the position of the menu in relation to the associated button element
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetPosition(Fluqi.Core.Position.ePosition)">
            <summary>
            Identifies the position of the menu in relation to the associated button element
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetPosition(System.String,System.String)">
            <summary>
            Identifies the position of the menu in relation to the associated button element
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetPosition(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Identifies the position of the menu in relation to the associated button element
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetPosition(System.Int32,System.Int32)">
            <summary>
            Identifies the position of the menu in relation to the associated button element
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.GetWidth">
            <summary>
            The width of the menu, in pixels.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Methods.SetWidth(System.Nullable{System.Int32})">
            <summary>
            The width of the menu, in pixels.
            </summary>
            <param name="width">value</param>
        </member>
        <member name="T:Fluqi.Widget.jSelectMenuItem.SelectMenuItem">
            <summary>
            Defines the logic and rendering of a single option.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase">
            <summary>
            A set of properties to apply to a set of jQuery UI Tab.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.HasChildren">
            <summary>
            Convenience function for eastablishing if there are any child/sub-menu items off this menu item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.Finish">
            <summary>
            Ends configuration of the option just added and brings the fluent API back a level to 
            allow further select menu items to be added.
            </summary>
            <returns>Parent MenuItems object to maintain fluent API reference point</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.WithCss(System.String,System.Object[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.WithStyle(System.String,System.String,System.Object[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.BuildTagHtml(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Override entry-point for the SelectMenuItem and SelectOptGroups classes to render how they should be
            </summary>
            <param name="sb"></param>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.Children">
            <summary>
            Set of sub MenuItems for this item of the menu.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.SelectMenu">
            <summary>
            Holds a reference to the select menu the option is on
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase.Parent">
            <summary>
            Navigates to the MenuItem this MenuItem is contained within.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.PARENT_TAG">
            <summary>
            Tag used for items (SELECT)
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.CHILD_TAG">
            <summary>
            Tags used for item children (OPTION)
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.#ctor(Fluqi.Widget.jSelectMenu.SelectMenu)">
            <summary>
            Constructor
            </summary>
            <param name="owner">SelectMenu object _this_ item belongs to</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.#ctor(Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase)">
            <summary>
            Constructor for a child menu option
            </summary>
            <param name="parent">SelectMenuItem object _this_ item belongs to</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.SetTitle(System.String)">
            <summary>
            Changes the title that appears in the menu item.
            </summary>
            <returns>this for chainability</returns>
            <remarks>
            Dunno why you'd want to do this after it's already been defined when adding the menu item
            but I'm leaving it here if only for the sake of consistency with the API.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.SetValue(System.Object)">
            <summary>
            Changes the value of the menu item.
            </summary>
            <param name="value">value</param>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.SetSelected(System.Boolean)">
            <summary>
            Flags that this item is selected (or not)
            </summary>
            <param name="selected">selected value</param>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.SetIcon(System.String)">
            <summary>
            Sets the icon which appears to the left of the menu title.
            </summary>
            <returns>this for chainability</returns>
            <remarks>
            Use this for adding your own icon.  The "ui-icon" jQuery UI class will still be added first
            (so you can use this for sizing), but the "ui-icon" prefix won't be added in front of your CSS class.
            </remarks>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.SetIcon(Fluqi.Core.Icons.eIconClass)">
            <summary>
            Sets the icon which appears to the left of the menu item.  This is one of the built in
            icons provdided by the jQuery UI framework.
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.SetTag(System.String)">
            <summary>
            Sets the tag to use (should only be "OPTION" really)
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.SetDisabled">
            <summary>
            Sets this menu item as disabled
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.Reset">
            <summary>
            Resets the object back to a known state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.BuildTagHtml(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Builds up the Html for a select menuitem
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.RenderChildren(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Renders the list of SelectMenuItems to the string builder.  
            Note: For the SelectMenu this only happens for the root (i.e. this isn't recursive like the Menu control)
            </summary>
            <param name="sb">StringBuilder</param>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.IsDisabled">
            <summary>
            Specifies that the rendered menu item should be disabled.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.Title">
            <summary>
            Text to appear in the item
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.Value">
            <summary>
            Value of the item
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.Selected">
            <summary>
            Flags this is the selected item
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.Icon">
            <summary>
            Icon to appear alongside the menu item
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItem.Tag">
            <summary>
            Html tag to use for containing menu-items.  By default this is LI.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItem._IsRoot">
            <summary>
            Flags whether this MenuItem is the root of the menu.
            </summary>
        </member>
        <member name="T:Fluqi.Core.Animation">
            <summary>
            Models the Animation options available as standard with jQuery UI components
            </summary>
        </member>
        <member name="M:Fluqi.Core.Animation.AnimationToString(Fluqi.Core.Animation.eAnimation)">
            <summary>
            Converts the Animation option into a string.
            </summary>
            <param name="animation">Animation option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.Animation.AnimationToString(System.Int32)">
            <summary>
            Converts the Animation option into a string.
            </summary>
            <param name="nAnimation">Animation option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.Animation.ToList">
            <summary>
            Returns all the enumeration items as list;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Core.Animation.StringToAnimation(System.String)">
            <summary>
            Converts a string into an Animation into an enum option.
            </summary>
            <param name="animation">String to convert</param>
            <returns>Converted option</returns>
        </member>
        <member name="M:Fluqi.Core.Animation.AnimationsToString(System.Collections.Generic.List{Fluqi.Core.Animation.eAnimation})">
            <summary>
            Converts a list of Animations into a (space) separated string.  Note Animations
            specified as "None" are excluded.
            </summary>
            <param name="animations"></param>
            <returns></returns>
        </member>
        <member name="T:Fluqi.Core.Animation.eAnimation">
            <summary>
            Models the Animation options available as standard with jQuery UI components
            (as defined in the jQuery documentation - http://docs.jquery.com/UI/Effects/effect#option-effect)
            </summary>
        </member>
        <member name="T:Fluqi.Extension.Helpers.jStringBuilder">
            <summary>
            The jStringBuilder class is used for building up code it an indented manner, however the 
            indentation can be switched off to compress the output if required.
            </summary>
        </member>
        <member name="F:Fluqi.Extension.Helpers.jStringBuilder._sb">
            <summary>
            Can't inherit from StringBuilder so have to provide our own interface to it :(
            </summary>
        </member>
        <member name="F:Fluqi.Extension.Helpers.jStringBuilder._IndentLevel">
            <summary>
            Records how many tabs we should use when pretty things up
            </summary>
        </member>
        <member name="F:Fluqi.Extension.Helpers.jStringBuilder._RespectWS">
            <summary>
            Flags that Whitespace should be respected and output (in reality this means that
            linefeeds and tabs are respected when using the "If" methods)
            </summary>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.#ctor(System.Boolean)">
            <summary>
            Detailed constructor
            </summary>
            <param name="includeWhitespace">Flags that tabs and newline should be added to the underlying StringBuilder</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.#ctor(System.Boolean,System.Int32)">
            <summary>
            Detailed constructor
            </summary>
            <param name="includeWhitespace">Flags that tabs and newline should be added to the underlying StringBuilder</param>
            <param name="initialTabDepth">Initial number of tabs that be inserted at the start of a new line of code</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabsFormat(System.String,System.Object[])">
            <summary>
            Inserts tabs followed by a String.Format argument set.
            </summary>
            <param name="format">String of format arguments</param>
            <param name="args">Values to be added to the format string</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabsFormatIf(System.String,System.Object[])">
            <summary>
            Inserts tabs (if <see cref="P:Fluqi.Extension.Helpers.jStringBuilder.RespectWs"/> is true) followed by a String.Format argument set.
            </summary>
            <param name="format">String of format arguments</param>
            <param name="args">Values to be added to the format string</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendFormatLine(System.String,System.Object[])">
            <summary>
            Adds a String.Format followed by a newline.
            </summary>
            <param name="format">String of format arguments</param>
            <param name="args">Values to be added to the format string</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabsFormatLine(System.String,System.Object[])">
            <summary>
            Adds tabs (at the current indent level) followed by a String.Format string and a newline
            </summary>
            <param name="format">String of format arguments</param>
            <param name="args">Values to be added to the format string</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendFormatLineIf(System.String,System.Object[])">
            <summary>
            Adds a String.Format string.  A newline is then added, but only if the RespectWs
            is true.
            </summary>
            <param name="format">String of format arguments</param>
            <param name="args">Values to be added to the format string</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabsFormatLineIf(System.String,System.Object[])">
            <summary>
            Adds tabs (at the current indent level) followed by a String.Format string and a newline.
            Note the tabs and newline part are only added if the RespectWs flag is true.
            </summary>
            <param name="format">String of format arguments</param>
            <param name="args">Values to be added to the format string</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendLineIf">
            <summary>
            Adds a newline, but only if the RespectWs is true.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendLineIf(System.String)">
            <summary>
            Adds a string to the StringBuilder, followed by a newline.  Note the newline is only
            added if the RespectWs is true.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabsLineIf(System.String)">
            <summary>
            Adds tabs to the current indent level, then the provided string and finally a newline.
            Note tabs and newline are only added if the RespectWs is true.
            </summary>
            <param name="value">String to add to the StringBuilder</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabsLine(System.String)">
            <summary>
            Adds tabs (at the current IndentLevel), then the provided string and finally a newline to the
            StringBuilder.
            </summary>
            <param name="value">String to be added.</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.SetIndent(System.Int32)">
            <summary>
            Sets the IndentLevel to <paramref name="numTabs"/> (the indent level being the number of tabs
            to insert at the start of a newline).
            </summary>
            <param name="numTabs"></param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.IncIndent">
            <summary>
            Increments the IndentLevel by one (the indent level being the number of tabs
            to insert at the start of a newline).
            </summary>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.IncIndent(System.Int32)">
            <summary>
            Increments the IndentLevel by one (the indent level being the number of tabs
            to insert at the start of a newline).
            </summary>
            <param name="by">Number of tabs to increment the indent by</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.DecIndent">
            <summary>
            Decrements the IndentLevel by one (the indent level being the number of tabs to 
            insert at the start of a newline).
            </summary>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.DecIndent(System.Int32)">
            <summary>
            Decrements the IndentLevel by one (the indent level being the number of tabs to 
            insert at the start of a newline).
            </summary>
            <param name="by">Number of tabs to decrement the indent by</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabs(System.Int32)">
            <summary>
            Adds the provided number of tabs to the StringBuilder.
            </summary>
            <param name="numTabs">Number of tabs to add to the StringBuilder</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabsIf(System.Int32)">
            <summary>
            Adds the provided number of tabs to the StringBuilder (but only if the RespectWs is true.
            </summary>
            <param name="numTabs">Number of tabs to add to the StringBuilder</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabs">
            <summary>
            Adds a number of tabs to the StringBuilder (the number of tabs being driven by 
            the IndentLevel).
            </summary>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabsIf">
            <summary>
            Adds a number of tabs to the StringBuilder (the number of tabs being driven by 
            the IndentLevel) - but only if the RespectWs is true.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabsIf(System.String)">
            <summary>
            Adds the defined number of tabs to the StringBuilder, followed by the given String.
            The tabs only added if the RespectWs is true.
            </summary>
            <param name="value">String to be added to the StringBuilder.</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendTabsFormatIf(System.String,System.String[])">
            <summary>
            Adds the defined number of tabs, then a String.Format string.  Tabs are only added if the RespectWs is true.
            </summary>
            <param name="fmt">String of format arguments</param>
            <param name="args">Values to be added to the format string</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendIndent">
            <summary>
            Adds the defined number of tabs to the StringBuilder.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendIndentIf">
            <summary>
            Adds the defined number of tabs to the StringBuilder, but only if the RespectWs flag is true.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.AppendUIStartUp(System.String)">
            <summary>
            Adds the given JavaScript into a script/document.ready block to the StringBuilder.
            This is used to initialise a control (<see cref="P:Fluqi.Core.RenderBase.AutoScript"/> flag).
            </summary>
            <param name="script">JavaScript to be initialised</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.TrimEnd(System.String)">
            <summary>
            Removes any occurence of the given String from the end of the StringBuilder.
            </summary>
            <param name="value">String to be trimmed</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.TrimStart(System.String)">
            <summary>
            Removes any occurence of the given String from the start of the StringBuilder.
            </summary>
            <param name="value">String to be trimmed</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.Trim(System.String)">
            <summary>
            Removes any occurence of the given String from the start and end of the StringBuilder.
            </summary>
            <param name="value">String to be trimmed</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.TrimExcessContent(System.String)">
            <summary>
            Kind of like a normal trip, but we ignore whitespace until we find
            "something" which may or may not be what we're after.  If it 
            is what we're after we'll remove it
            </summary>
            <param name="valueToTrim">The "something" we want removing</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.SubString(System.Int32,System.Int32)">
            <summary>
            Establishes the string of characters located between <paramref name="start"/> and <paramref name="stop"/>
            in the StringBuilder.
            </summary>
            <param name="start">Where to start extracting</param>
            <param name="stop">Where to stop extracting</param>
            <returns>
            Returns the string located between start/stop of the StringBuilder.
            </returns>
            <remarks>
            If the start/stop is invalid an exception is thrown.
            </remarks>
        </member>
        <member name="M:Fluqi.Extension.Helpers.jStringBuilder.SubStringByLength(System.Int32,System.Int32)">
            <summary>
            Establishes a number characters in the StringBuilder starting at postion <paramref name="start"/> 
            (for <paramref name="countChars"/>).
            </summary>
            <param name="start">Where to start copying from</param>
            <param name="countChars">Number of characters to copy</param>
            <returns></returns>
        </member>
        <member name="P:Fluqi.Extension.Helpers.jStringBuilder.IndentLevel">
            <summary>
            Establishes how many tabs are currently being inserted at the start of a new line of code.
            </summary>
        </member>
        <member name="P:Fluqi.Extension.Helpers.jStringBuilder.RespectWs">
            <summary>
            Establishes whether whitespace (tabs and newlines) should be added to the underlying StringBuilder.
            </summary>
        </member>
        <member name="T:Fluqi.Helpers.Utils">
            <summary>
            Set of helper methods for accomplishing various things.
            </summary>
        </member>
        <member name="M:Fluqi.Helpers.Utils.IsEmptyQuotes(System.String)">
            <summary>
            Establishes if the given value is merely a set of empty quotes (either "" or '').
            </summary>
            <param name="value">String to check</param>
            <returns>
            Returns true if string is "" or ''
            Returns false otherwise
            Returns _false_ if string is null or empty!
            </returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.IsNullEmptyOrDefault(System.String,System.String)">
            <summary>
            Establishes if the given value is null, empty or the same as the default.  We look
            at the default value because if we're rendering the default we don't need to output
            the setting (as it's the default for the jQuery UI control) and thus we can reduce the
            JavaScript needed to initialise the control (which can be fairly big if you've got 20+ 
            options (never mind readability!))
            </summary>
            <param name="value">Options being set</param>
            <param name="defaultValue">Default for the option</param>
            <returns>
            Returns true if the value is null, empty or the same as the default
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.IsNullEmptyOrDefault(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Establishes if the given value is null, empty or the same as the default.  We look
            at the default value because if we're rendering the default we don't need to output
            the setting (as it's the default for the jQuery UI control) and thus we can reduce the
            JavaScript needed to initialise the control (which can be fairly big if you've got 20+ 
            options (never mind readability!))
            </summary>
            <param name="values">Options being set</param>
            <param name="defaultValues">Defaults for the option</param>
            <returns>
            Returns true if the value is null, empty or the same as the default
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.AddQuotesToJQueryDate(System.String)">
            <summary>
            Works out what type of date value or object is being passed in (i.e. is a string date like "01/01/2000",
            a numerical date value like "3" for 3 days, or a relative date specification like "+1w -1d" where some
            of them need quotes, but other don't.
            </summary>
            <param name="dateValue">Value to be queried</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.Quote(System.String,System.Boolean)">
            <summary>
            Surrounds the value in double quote marks.
            </summary>
            <param name="value">String to be quoted</param>
            <param name="doubleQuote">
            If true double quotes (") are used
            If false single quotes (') are used
            </param>
            <returns>Returns provided value in quotes.</returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.InSingleQuotes(System.String)">
            <summary>
            Surrounds the value in single quote marks.
            </summary>
            <param name="value">String to be quoted</param>
            <returns>Returns provided value in quotes.</returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.InDoubleQuotes(System.String)">
            <summary>
            Surrounds the value in double quote marks.
            </summary>
            <param name="value">String to be quoted</param>
            <returns>Returns provided value in double quotes.</returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.IsNumeric(System.String)">
            <summary>
            Establishes if the given value is a numeric value or not (note +10 and -10 are considered numeric 
            too).
            </summary>
            <param name="value">Value to query</param>
            <returns>
            Returns true if the value is considered numeric
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.IsBool(System.String)">
            <summary>
            Establishes if the given value is a numeric value or not (note +10 and -10 are considered numeric 
            too).
            </summary>
            <param name="value">Value to query</param>
            <returns>
            Returns true if the value is considered numeric
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.IsRelativeDateSpec(System.String)">
            <summary>
            Establishes whether the given value is considered to be a string representing
            a relative date.  Some jQuery UI controls (mainly DatePicker) allow you to 
            specify a relate date, "+10d" is "10 days in the future" and "-1m" is "one month in the past"
            </summary>
            <param name="value">Value to be queried</param>
            <returns>
            Returns true if the value is considered to be a relative date specification
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.IsSelector(System.String)">
            <summary>
            Establishes whether the given value is considered to be a [jQuery] selector string
            </summary>
            <param name="value">Value to be queried</param>
            <returns>
            Returns true if value is deemed to be a selector
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.IsJSON(System.String)">
            <summary>
            Establishes whether the given value is considered to be a JSON string
            </summary>
            <param name="value">Value to be queried</param>
            <returns>
            Returns true if value is deemed to be a JSON object
            Returns false otherwise
            </returns>
            <remarks>To determine this we simply look for the presence of "{", "}", "," or ":"</remarks>
        </member>
        <member name="M:Fluqi.Helpers.Utils.TrimQuotes(System.String)">
            <summary>
            Simply removes any quotations marks at the start/end of a given
            string.  This is usually so we can remove any added by the user
            and add our own (otherwise we could add a second set of quotes that 
            aren't required.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Helpers.Utils.IsQuoted(System.String)">
            <summary>
            Simple query method to work out if a given string has 
            any quotation ('") marks at the start of end of the string
            </summary>
            <param name="value"></param>
            <returns>
            Returns true if there are quotes at _either_ the start of the end
            Returns false otherwise (so false if there are quotes in the middle)
            </returns>
        </member>
        <member name="T:Fluqi.Core.BrowserEvent">
            <summary>
            Models the Event interaction options for controls, e.g. mouseover, click, keydown, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Core.BrowserEvent.BrowserEventToString(Fluqi.Core.BrowserEvent.eBrowserEvent)">
            <summary>
            Converts the BrowserEvent option into a string.
            </summary>
            <param name="browserEvent">BrowserEvent option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.BrowserEvent.BrowserEventToString(System.Int32)">
            <summary>
            Converts the BrowserEvent option into a string.
            </summary>
            <param name="browserEvent">BrowserEvent option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.BrowserEvent.StringToBrowserEvent(System.String)">
            <summary>
            Converts a string into a BrowserEvent into an enum option.
            </summary>
            <param name="browserEvent">String to convert</param>
            <returns>Converted option</returns>
        </member>
        <member name="M:Fluqi.Core.BrowserEvent.ToList">
            <summary>
            Returns all the enumeration items as list;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Core.BrowserEvent.BrowserEventsToString(System.Collections.Generic.List{Fluqi.Core.BrowserEvent.eBrowserEvent})">
            <summary>
            Converts a list of BrowserEvents into a (space) separated string.  Note BrowserEvents 
            specified as "None" are excluded.
            </summary>
            <param name="browserEvents"></param>
            <returns></returns>
        </member>
        <member name="T:Fluqi.Core.BrowserEvent.eBrowserEvent">
            <summary>
            Models the Event interaction options for controls, e.g. mouseover, click, keydown, etc.
            </summary>
            <remarks>
            Whilst a control may allow a given BrowserEvent to be specified, this does not mean it's
            an appropriate event to use.
            </remarks>
        </member>
        <member name="T:Fluqi.Widget.jDatePicker.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI DatePicker.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI DatePicker.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI DatePicker.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDisabled(System.Boolean)">
            <summary>
            Disables (true) or enables (false) the control. Can be set when initialising 
            (first creating) the control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetAltField(System.String)">
            <summary>
            The jQuery selector for another field that is to be updated with the selected date from 
            the datepicker. Use the altFormat setting to change the format of the date within this 
            field. Leave as blank for no alternate field.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetAltFormat(System.String)">
            <summary>
            The dateFormat to be used for the altField option. This allows one date format to 
            be shown to the user for selection purposes, while a different format is actually 
            sent behind the scenes. For a full list of the possible formats see the formatDate function
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetAppendText(System.String)">
            <summary>
            The dateFormat to be used for the altField option. This allows one date format to 
            be shown to the user for selection purposes, while a different format is actually 
            sent behind the scenes. For a full list of the possible formats see the formatDate function
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetAutoSize(System.Boolean)">
            <summary>
            Set to true to automatically resize the input field to accommodate dates in the 
            current dateFormat.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetButtonImage(System.String)">
            <summary>
            The URL for the popup button image. If set, buttonText becomes the alt value and is not directly displayed.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetButtonImageOnly(System.Boolean)">
            <summary>
            Set to true to place an image after the field to use as the trigger without it appearing on a button.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetButtonText(System.String)">
            <summary>
            The text to display on the trigger button. Use in conjunction with showOn equal to 'button' or 'both'.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetCalculateWeek(System.String)">
            <summary>
            A function to calculate the week of the year for a given date. The default implementation uses the ISO 8601 
            definition: weeks start on a Monday; the first week of the year contains the first Thursday of the year.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetChangeMonth(System.Boolean)">
            <summary>
            Allows you to change the month by selecting from a drop-down list. You can enable this feature by setting the 
            attribute to true.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetChangeYear(System.Boolean)">
            <summary>
            Allows you to change the year by selecting from a drop-down list. You can enable this feature by setting 
            the attribute to true. Use the yearRange option to control which years are made available for selection.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetCloseText(System.String)">
            <summary>
            The text to display for the close link. This attribute is one of the regionalisation attributes. Use the 
            showButtonPanel to display this button.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetConstrainInput(System.Boolean)">
            <summary>
            When true entry in the input field is constrained to those characters allowed by the current dateFormat.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetCurrentText(System.String)">
            <summary>
            The text to display for the current day link. This attribute is one of the regionalisation attributes. Use 
            the showButtonPanel to display this button.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDateFormat(System.String)">
            <summary>
            The format for parsed and displayed dates. This attribute is one of the regionalisation attributes. For a full 
            list of the possible formats see the formatDate function.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDayNames(System.Collections.Generic.List{System.String})">
            <summary>
            The list of long day names, starting from Sunday, for use as requested via the dateFormat setting. 
            They also appear as popup hints when hovering over the corresponding column headings. This attribute is 
            one of the regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDayNames(System.String)">
            <summary>
            The list of long day names, starting from Sunday, for use as requested via the dateFormat setting. 
            They also appear as popup hints when hovering over the corresponding column headings. This attribute is 
            one of the regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDayNamesMin(System.Collections.Generic.List{System.String})">
            <summary>
            The list of minimised day names, starting from Sunday, for use as column headers within the datepicker. 
            This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDayNamesMin(System.String)">
            <summary>
            The list of minimised day names, starting from Sunday, for use as column headers within the datepicker. 
            This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDayNamesShort(System.Collections.Generic.List{System.String})">
            <summary>
            The list of abbreviated day names, starting from Sunday, for use as requested via the dateFormat setting. 
            This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDayNamesShort(System.String)">
            <summary>
            The list of abbreviated day names, starting from Sunday, for use as requested via the dateFormat setting. 
            This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDefaultDate(System.String)">
            <summary>
            Set the date to highlight on first opening if the field is blank. Specify either an actual date via a 
            Date object or as a string in the current dateFormat, or a number of days from today (e.g. +7) or a string 
            of values and periods ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDefaultDate(System.Int32)">
            <summary>
            Set the date to highlight on first opening if the field is blank. Specify either an actual date via a 
            Date object or as a string in the current dateFormat, or a number of days from today (e.g. +7) or a string 
            of values and periods ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDefaultDate(System.DateTime)">
            <summary>
            Set the date to highlight on first opening if the field is blank, using an actual date object.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDuration(System.String)">
            <summary>
            Control the speed at which the datepicker appears using 
            one of the three predefined speeds ("slow", "normal", "fast").
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDuration(Fluqi.Core.Speed.eSpeed)">
            <summary>
            Control the speed at which the datepicker appears using 
            one of the three predefined speeds ("slow", "normal", "fast").
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetDuration(System.Int32)">
            <summary>
            Control the speed at which the datepicker appears, it may be a time in milliseconds or a string representing 
            one of the three predefined speeds ("slow", "normal", "fast").
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetFirstDay(System.Int32)">
            <summary>
            Set the first day of the week: Sunday is 0, Monday is 1, ... This attribute is one of the 
            regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetGotoCurrent(System.Boolean)">
            <summary>
            When true the current day link moves to the currently selected date instead of today.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetHideIfNoPrevNext(System.Boolean)">
            <summary>
            Normally the previous and next links are disabled when not applicable (see minDate/maxDate). You 
            can hide them altogether by setting this attribute to true.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetIsRTL(System.Boolean)">
            <summary>
            True if the current language is drawn from right to left. This attribute is one of the 
            regionalisation attributes
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetMinDate(System.DateTime)">
            <summary>
            Set a minimum selectable date via a Date object.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetMinDate(System.String)">
            <summary>
            Set a minimum selectable date via a string in the current dateFormat, 
            or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 
            'm' for months, 'w' for weeks, 'd' for days, e.g. '-1y -1m'), or null for no limit.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetMinDate(System.Int32)">
            <summary>
            Set a minimum selectable date via a string in the current dateFormat, 
            or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 
            'm' for months, 'w' for weeks, 'd' for days, e.g. '-1y -1m'), or null for no limit.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetMaxDate(System.DateTime)">
            <summary>
            Set a maximum selectable date via a Date object.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetMaxDate(System.String)">
            <summary>
            Set a maximum selectable date via a string in the current dateFormat, 
            or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 
            'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +1w'), or null for no limit.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetMaxDate(System.Int32)">
            <summary>
            Set a maximum selectable date via a string in the current dateFormat, 
            or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 
            'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +1w'), or null for no limit.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetMonthNames(System.Collections.Generic.List{System.String})">
            <summary>
            The list of full month names, for use as requested via the dateFormat setting. This attribute is one of 
            the regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetMonthNames(System.String)">
            <summary>
            The list of full month names, for use as requested via the dateFormat setting. This attribute is one of 
            the regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetMonthNamesShort(System.Collections.Generic.List{System.String})">
            <summary>
            The list of abbreviated month names, as used in the month header on each datepicker and as requested via 
            the dateFormat setting. This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetMonthNamesShort(System.String)">
            <summary>
            The list of abbreviated month names, as used in the month header on each datepicker and as requested via 
            the dateFormat setting. This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetNavigationAsDateFormat(System.Boolean)">
            <summary>
            When true the formatDate function is applied to the prevText, nextText, and currentText values before 
            display, allowing them to display the target month names for example.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetNextText(System.String)">
            <summary>
            The text to display for the next month link. This attribute is one of the regionalisation attributes. 
            With the standard ThemeRoller styling, this value is replaced by an icon.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetNumberOfMonths(System.Int32)">
            <summary>
            Set how many months to show at once. The value can be a straight integer, or can be a two-element array 
            to define the number of rows and columns to display.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetNumberOfMonths(System.Int32,System.Int32)">
            <summary>
            Set how many months to show at once. The value can be a straight integer, or can be a two-element array 
            to define the number of rows and columns to display.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetPrevText(System.String)">
            <summary>
            The text to display for the previous month link. This attribute is one of the regionalisation attributes. 
            With the standard ThemeRoller styling, this value is replaced by an icon.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetSelectOtherMonths(System.Boolean)">
            <summary>
            When true days in other months shown before or after the current month are selectable. 
            This only applies if showOtherMonths is also true.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShortYearCutoff(System.String)">
            <summary>
            Set the cutoff year for determining the century for a date (used in conjunction with dateFormat 'y'). 
            If a numeric value (0-99) is provided then this value is used directly. If a string value is provided 
            then it is converted to a number and added to the current year. Once the cutoff year is calculated, 
            any dates entered with a year value less than or equal to it are considered to be in the current century, 
            while those greater than it are deemed to be in the previous century.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShortYearCutoff(System.Int32)">
            <summary>
            Set the cutoff year for determining the century for a date (used in conjunction with dateFormat 'y'). 
            If a numeric value (0-99) is provided then this value is used directly. If a string value is provided 
            then it is converted to a number and added to the current year. Once the cutoff year is calculated, 
            any dates entered with a year value less than or equal to it are considered to be in the current century, 
            while those greater than it are deemed to be in the previous century.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShowAnim(System.String)">
            <summary>
            Set the name of the animation used to show/hide the datepicker. Use 'show' (the default), 
            'slideDown', 'fadeIn', any of the show/hide jQuery UI effects, or '' for no animation.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShowAnim(Fluqi.Core.Animation.eAnimation)">
            <summary>
            Set the name of the animation used to show/hide the datepicker. Use 'show' (the default), 
            'slideDown', 'fadeIn', any of the show/hide jQuery UI effects, or '' for no animation.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShowOptions(System.String)">
            <summary>
            If using one of the jQuery UI effects for showAnim, you can provide additional 
            settings for that animation via this option.
            <param name="showOptions">
            showOptions is expected to be a JSON type object, including
            the curly braces.</param>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShowButtonPanel(System.Boolean)">
            <summary>
            Whether to show the button panel
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShowCurrentAtPos(System.Int32)">
            <summary>
            Specify where in a multi-month display the current month shows, starting from 0 at the top/left
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShowMonthAfterYear(System.Boolean)">
            <summary>
            Whether to show the month after the year in the header. This attribute is one of the regionalisation 
            attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShowOn(System.String)">
            <summary>
            Have the datepicker appear automatically when the field receives focus ('focus'), appear only when 
            a button is clicked ('button'), or appear when either event takes place ('both').
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShowOtherMonths(System.Boolean)">
            <summary>
            Display dates in other months (non-selectable) at the start or end of the current month. 
            To make these days selectable use selectOtherMonths.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShowWeek(System.Boolean)">
            <summary>
            When true a column is added to show the week of the year. The calculateWeek option determines how 
            the week of the year is calculated. You may also want to change the firstDay option.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetStepMonths(System.Int32)">
            <summary>
            Set how many months to move when clicking the Previous/Next links
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetWeekHeader(System.String)">
            <summary>
            The text to display for the week of the year column heading. This attribute is one of the regionalisation 
            attributes. Use showWeek to display this column.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetYearRange(System.String)">
            <summary>
            Control the range of years displayed in the year drop-down: either relative to today's year (-nn:+nn), 
            relative to the currently selected year (c-nn:c+nn), absolute (nnnn:nnnn), or combinations of these 
            formats (nnnn:-nn). Note that this option only affects what appears in the drop-down, to restrict which 
            dates may be selected use the minDate and/or maxDate options.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetYearSuffix(System.String)">
            <summary>
            Additional text to display after the year in the month headers. This attribute is one of the 
            regionalisation attributes.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.SetShowInline(System.Boolean)">
            <summary>
            Shows the calendar inline on the page (attaches the datePicker to a DIV rather than an INPUT)
            </summary>
            <param name="showInline">
            If true datePicker is shown inline (inside a DIV)
            If false datePicker is shown against an INPUT
            </param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.#ctor(Fluqi.Widget.jDatePicker.DatePicker)">
            <summary>
            Constructor
            </summary>
            <param name="dp">DatePicker to configure options of</param>
        </member>
        <member name="F:Fluqi.Widget.jDatePicker.Options.DEFAULT_DAY_NAMES">
            <summary>
            Default names of the days of the week used by jQuery UI date picker.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jDatePicker.Options.DEFAULT_DAY_NAMES_MIN">
            <summary>
            Default names of the days of the week (min version, which is the first two characters) used by jQuery UI date picker.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jDatePicker.Options.DEFAULT_DAY_NAMES_SHORT">
            <summary>
            Default names of the days of the week (short version, which is the first three characters) used by jQuery UI date picker.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jDatePicker.Options.DEFAULT_MONTH_NAMES">
            <summary>
            Default names of the months of the year used by jQuery UI date picker.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jDatePicker.Options.DEFAULT_MONTH_NAMES_SHORT">
            <summary>
            Default names of the months of the year (short version, which is the first three characters) used by jQuery UI date picker.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jDatePicker.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jDatePicker.Options.DatePicker"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jDatePicker.Options.DatePicker"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.GetDatePickerScriptOption">
            <summary>
            Gets a script option defining the DatePicker options.
            </summary>
            <returns>Script option for the DatePicker object</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.GetDatePickerScriptOption(System.Boolean)">
            <summary>
            Gets a script option defining the DatePicker options.
            </summary>
            <param name="asChild">Flags that this option should be added a child</param>
            <returns>Script option for the DatePicker object</returns>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.InitialiseDayNames">
            <summary>
            Initialises the day-names the DatePicker is set-up with initially
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.InitialiseMonthNames">
            <summary>
            Initialises the month-names the DatePicker is set-up with initially
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDatePicker.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.Disabled">
            <summary>
            Disables (true) or enables (false) the control. Can be set when initialising 
            (first creating) the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.AltField">
            <summary>
            The jQuery selector for another field that is to be updated with the selected date from 
            the datepicker. Use the altFormat setting to change the format of the date within this 
            field. Leave as blank for no alternate field.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.AltFormat">
            <summary>
            The dateFormat to be used for the altField option. This allows one date format to 
            be shown to the user for selection purposes, while a different format is actually 
            sent behind the scenes. For a full list of the possible formats see the formatDate function
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.AppendText">
            <summary>
            The dateFormat to be used for the altField option. This allows one date format to 
            be shown to the user for selection purposes, while a different format is actually 
            sent behind the scenes. For a full list of the possible formats see the formatDate function
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.AutoSize">
            <summary>
            Set to true to automatically resize the input field to accommodate dates in the 
            current dateFormat.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ButtonImage">
            <summary>
            The URL for the popup button image. If set, buttonText becomes the alt value and is not directly displayed.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ButtonImageOnly">
            <summary>
            Set to true to place an image after the field to use as the trigger without it appearing on a button.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ButtonText">
            <summary>
            The text to display on the trigger button. Use in conjunction with showOn equal to 'button' or 'both'.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.CalculateWeek">
            <summary>
            A function to calculate the week of the year for a given date. The default implementation uses the ISO 8601 
            definition: weeks start on a Monday; the first week of the year contains the first Thursday of the year.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ChangeMonth">
            <summary>
            Allows you to change the month by selecting from a drop-down list. You can enable this feature by setting the 
            attribute to true.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ChangeYear">
            <summary>
            Allows you to change the year by selecting from a drop-down list. You can enable this feature by setting 
            the attribute to true. Use the yearRange option to control which years are made available for selection.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.CloseText">
            <summary>
            The text to display for the close link. This attribute is one of the regionalisation attributes. Use the 
            showButtonPanel to display this button.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ConstrainInput">
            <summary>
            When true entry in the input field is constrained to those characters allowed by the current dateFormat.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.CurrentText">
            <summary>
            The text to display for the current day link. This attribute is one of the regionalisation attributes. Use 
            the showButtonPanel to display this button.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.DateFormat">
            <summary>
            The format for parsed and displayed dates. This attribute is one of the regionalisation attributes. For a full 
            list of the possible formats see the formatDate function.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.DayNamesList">
            <summary>
            The list of long day names, starting from Sunday, for use as requested via the dateFormat setting. 
            They also appear as popup hints when hovering over the corresponding column headings. This attribute is 
            one of the regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.DayNames">
            <summary>
            The list of long day names, starting from Sunday, for use as requested via the dateFormat setting. 
            They also appear as popup hints when hovering over the corresponding column headings. This attribute is 
            one of the regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.DayNamesMinList">
            <summary>
            The list of minimised day names, starting from Sunday, for use as column headers within the datepicker. 
            This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.DayNamesMin">
            <summary>
            The list of minimised day names, starting from Sunday, for use as column headers within the datepicker. 
            This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.DayNamesShortList">
            <summary>
            The list of abbreviated day names, starting from Sunday, for use as requested via the dateFormat setting. 
            This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.DayNamesShort">
            <summary>
            The list of abbreviated day names, starting from Sunday, for use as requested via the dateFormat setting. 
            This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.DefaultDate">
            <summary>
            Set the date to highlight on first opening if the field is blank. Specify either an actual date via a 
            Date object or as a string in the current dateFormat, or a number of days from today (e.g. +7) or a string 
            of values and periods ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.DefaultDateString">
            <summary>
            Set the date to highlight on first opening if the field is blank. Specify either an actual date via a 
            Date object or as a string in the current dateFormat, or a number of days from today (e.g. +7) or a string 
            of values and periods ('y' for years, 'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +7d'), or null for today.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.Duration">
            <summary>
            Control the speed at which the datepicker appears, it may be a time in milliseconds or a string representing 
            one of the three predefined speeds ("slow", "normal", "fast").
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.FirstDay">
            <summary>
            Set the first day of the week: Sunday is 0, Monday is 1, ... This attribute is one of the 
            regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.GotoCurrent">
            <summary>
            When true the current day link moves to the currently selected date instead of today.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.HideIfNoPrevNext">
            <summary>
            Normally the previous and next links are disabled when not applicable (see minDate/maxDate). You 
            can hide them altogether by setting this attribute to true.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.IsRTL">
            <summary>
            True if the current language is drawn from right to left. This attribute is one of the 
            regionalisation attributes
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.MinDateString">
            <summary>
            Set a minimum selectable date via a string in the current dateFormat, 
            or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 
            'm' for months, 'w' for weeks, 'd' for days, e.g. '-1y -1m'), or null for no limit.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.MinDate">
            <summary>
            Set a minimum selectable date via a Date object.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.MaxDateString">
            <summary>
            Set a maximum selectable date via a string in the current dateFormat, 
            or a number of days from today (e.g. +7) or a string of values and periods ('y' for years, 
            'm' for months, 'w' for weeks, 'd' for days, e.g. '+1m +1w'), or null for no limit.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.MaxDate">
            <summary>
            Set a maximum selectable date via a Date object.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.MonthNamesList">
            <summary>
            The list of full month names, for use as requested via the dateFormat setting. This attribute is one of 
            the regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.MonthNames">
            <summary>
            The list of full month names, for use as requested via the dateFormat setting. This attribute is one of 
            the regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.MonthNamesShortList">
            <summary>
            The list of abbreviated month names, as used in the month header on each datepicker and as requested via 
            the dateFormat setting. This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.MonthNamesShort">
            <summary>
            The list of abbreviated month names, as used in the month header on each datepicker and as requested via 
            the dateFormat setting. This attribute is one of the regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.NavigationAsDateFormat">
            <summary>
            When true the formatDate function is applied to the prevText, nextText, and currentText values before 
            display, allowing them to display the target month names for example.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.NextText">
            <summary>
            The text to display for the next month link. This attribute is one of the regionalisation attributes. 
            With the standard ThemeRoller styling, this value is replaced by an icon.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.NumberOfMonths">
            <summary>
            Set how many months to show at once. The value can be a straight integer, or can be a two-element array 
            to define the number of rows and columns to display.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.PrevText">
            <summary>
            The text to display for the previous month link. This attribute is one of the regionalisation attributes. 
            With the standard ThemeRoller styling, this value is replaced by an icon.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.SelectOtherMonths">
            <summary>
            When true days in other months shown before or after the current month are selectable. 
            This only applies if showOtherMonths is also true.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ShortYearCutoff">
            <summary>
            Set the cutoff year for determining the century for a date (used in conjunction with dateFormat 'y'). 
            If a numeric value (0-99) is provided then this value is used directly. If a string value is provided 
            then it is converted to a number and added to the current year. Once the cutoff year is calculated, 
            any dates entered with a year value less than or equal to it are considered to be in the current century, 
            while those greater than it are deemed to be in the previous century.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ShowAnim">
            <summary>
            Set the name of the animation used to show/hide the datepicker. Use 'show' (the default), 
            'slideDown', 'fadeIn', any of the show/hide jQuery UI effects, or '' for no animation.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ShowOptions">
            <summary>
            If using one of the jQuery UI effects for showAnim, you can provide additional 
            settings for that animation via this option.
            </summary>
            <remarks>
            Due to the numerous permutations that can be applied, only string support is provided
            which will be passed to the DatePicker "as is".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ShowButtonPanel">
            <summary>
            Whether to show the button panel
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ShowCurrentAtPos">
            <summary>
            Specify where in a multi-month display the current month shows, starting from 0 at the top/left
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ShowMonthAfterYear">
            <summary>
            Whether to show the month after the year in the header. This attribute is one of the regionalisation 
            attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ShowOn">
            <summary>
            Have the datepicker appear automatically when the field receives focus ('focus'), appear only when 
            a button is clicked ('button'), or appear when either event takes place ('both').
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ShowOtherMonths">
            <summary>
            Display dates in other months (non-selectable) at the start or end of the current month. 
            To make these days selectable use selectOtherMonths.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ShowWeek">
            <summary>
            When true a column is added to show the week of the year. The calculateWeek option determines how 
            the week of the year is calculated. You may also want to change the firstDay option.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.StepMonths">
            <summary>
            Set how many months to move when clicking the Previous/Next links
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.WeekHeader">
            <summary>
            The text to display for the week of the year column heading. This attribute is one of the regionalisation 
            attributes. Use showWeek to display this column.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.YearRange">
            <summary>
            Control the range of years displayed in the year drop-down: either relative to today's year (-nn:+nn), 
            relative to the currently selected year (c-nn:c+nn), absolute (nnnn:nnnn), or combinations of these 
            formats (nnnn:-nn). Note that this option only affects what appears in the drop-down, to restrict which 
            dates may be selected use the minDate and/or maxDate options.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.YearSuffix">
            <summary>
            Additional text to display after the year in the month headers. This attribute is one of the 
            regionalisation attributes.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.ShowInline">
            <summary>
            Shows the calendar inline on the page (attaches the datePicker to a DIV rather than an INPUT)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDatePicker.Options.DatePicker">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jDatePicker.Options.DatePicker"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAutoComplete.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="F:Fluqi.Widget.jAutoComplete.Options.DEFAULT_DELAY">
            <summary>
            Default length of delay before the available options are shown.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAutoComplete.Options.DEFAULT_MINIMUM_LENGTH">
            <summary>
            Default number of characters that must be entered before the available options are shown.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAutoComplete.Options.DEFAULT_APPEND_TO">
            <summary>
            Default element options should be appended to.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Options.#ctor(Fluqi.Widget.jAutoComplete.AutoComplete)">
            <summary>
            Constructor
            </summary>
            <param name="ac">Autocomplete object to be configured</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jAutoComplete.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jAutoComplete.Options.AutoComplete"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jAutoComplete.Options.AutoComplete"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Options.SetDisabled(System.Boolean)">
            <summary>
            Disables (true) or enables (false) the autocomplete. Can be set when initialising (first creating) the autocomplete.	
            </summary>
            <param name="disable">Whether the control is disabled or not</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Options.SetAppendTo(System.String)">
            <summary>
            Which element the menu should be appended to.
            </summary>
            <param name="appendTo">Element to append menu to (selector to the element, e.g. #my-element)</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Options.SetAutoFocus(System.Boolean)">
            <summary>
            If set to true the first item will be automatically focused.
            </summary>
            <param name="autoFocus">Flag</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Options.SetDelay(System.Int32)">
            <summary>
            The delay in milliseconds the Autocomplete waits after a keystroke to activate itself. A zero-delay 
            makes sense for local data (more responsive), but can produce a lot of load for remote data, 
            while being less responsive.
            </summary>
            <param name="delay">Delay (in milliseconds).  By default this is 300</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Options.SetMinimumLength(System.Int32)">
            <summary>
            The minimum number of characters a user has to type before the Autocomplete activates. Zero is 
            useful for local data with just a few items. Should be increased when there are a lot of items, 
            where a single character would match a few thousand items.
            </summary>
            <param name="minLength">Min length (default is 1)</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Options.Disabled">
            <summary>
            Flags whether the "disabled" flag is on or off (default is "false").
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Options.AppendTo">
            <summary>
            Which element the menu should be appended to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Options.AutoFocus">
            <summary>
            If set to true the first item will be automatically focused.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Options.Delay">
            <summary>
            The delay in milliseconds the Autocomplete waits after a keystroke to activate itself. A zero-delay 
            makes sense for local data (more responsive), but can produce a lot of load for remote data, 
            while being less responsive.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Options.MinimumLength">
            <summary>
            The minimum number of characters a user has to type before the Autocomplete activates. Zero is 
            useful for local data with just a few items. Should be increased when there are a lot of items, 
            where a single character would match a few thousand items.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Options.Source">
            <summary>
            Defines the data to use, must be specified.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Options.AutoComplete">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jAutoComplete.Options.AutoComplete"/> object these options are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Options.Position">
            <summary>
            Identifies the position of the Autocomplete widget in relation to the associated input 
            element. The "of" option defaults to the input element, but you can specify another element 
            to position against. You can refer to the jQuery UI Position utility for more details 
            about the various options.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jPushButton.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI Button.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI AutoComplete.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of events to apply to a set of jQuery UI Button.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Options.#ctor(Fluqi.Widget.jPushButton.PushButton)">
            <summary>
            Constructor
            </summary>
            <param name="btn">PushButton to configure options of</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jPushButton.Options"/> has finished, and 
            returns the <see cref="T:Fluqi.Widget.jPushButton.PushButton"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="T:Fluqi.Widget.jPushButton.PushButton"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Options.SetDisabled(System.Boolean)">
            <summary>
            Disables (true) or enables (false) the button. Can be set when initialising (first creating) 
            the button.
            </summary>
            <param name="disable">Whether the control is disabled or not</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Options.SetText(System.Boolean)">
            <summary>
            Whether to show any text - when set to false (display no text), icons (see icons option) 
            must be enabled, otherwise it'll be ignored.
            </summary>
            <param name="text">New flag setting</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Options.SetIcons(System.String,System.String)">
            <summary>
            Icons to display, with or without text (see text option). The primary icon is 
            displayed by default on the left of the label text, the secondary by default is on the right. 
            Value for the primary and secondary properties must be a classname (String), eg. "ui-icon-gear". 
            For using only one icon: icons: {primary:'ui-icon-locked'}. 
            For using two icons: icons: {primary:'ui-icon-gear',secondary:'ui-icon-triangle-1-s'}
            </summary>
            <param name="primaryIcon">New setting</param>
            <param name="secondaryIcon">New setting</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Options.SetIcons(System.String)">
            <summary>
            Icons to display, with or without text (see text option). The primary icon is 
            displayed by default on the left of the label text, the secondary by default is on the right. 
            Value for the primary and secondary properties must be a classname (String), eg. "ui-icon-gear". 
            For using only one icon: icons: {primary:'ui-icon-locked'}. 
            </summary>
            <param name="primaryIcon">New setting</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Options.SetIcons(Fluqi.Core.Icons.eIconClass)">
            <summary>
            Icons to display, with or without text (see text option). The primary icon is 
            displayed by default on the left of the label text, the secondary by default is on the right. 
            Value for the primary and secondary properties must be a classname (String), eg. "ui-icon-gear". 
            For using only one icon: icons: {primary:'ui-icon-locked'}. 
            </summary>
            <param name="primaryIconClass">New setting</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Options.SetIcons(Fluqi.Core.Icons.eIconClass,Fluqi.Core.Icons.eIconClass)">
            <summary>
            Icons to display, with or without text (see text option). The primary icon is 
            displayed by default on the left of the label text, the secondary by default is on the right. 
            Value for the primary and secondary properties must be a classname (String), eg. "ui-icon-gear". 
            For using only one icon: icons: {primary:'ui-icon-locked'}. 
            For using two icons: icons: {primary:'ui-icon-gear',secondary:'ui-icon-triangle-1-s'}
            </summary>
            <param name="primaryIconClass">New setting</param>
            <param name="secondaryIconClass">New setting</param>
            <returns>Options object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.Options.Button">
            <summary>
            Holds a reference to the <see cref="T:Fluqi.Widget.jPushButton.PushButton"/> object these options are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.Options.Disabled">
            <summary>
            Disables (true) or enables (false) the button. Can be set when initialising (first creating) 
            the button.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.Options.Text">
            <summary>
            Whether to show any text - when set to false (display no text), icons (see icons option) 
            must be enabled, otherwise it'll be ignored.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.Options.PrimaryIconClass">
            <summary>
            Icons to display, with or without text (see text option). The primary icon is 
            displayed by default on the left of the label text, the secondary by default is on the right. 
            Value for the primary and secondary properties must be a classname (String), eg. "ui-icon-gear". 
            For using only one icon: icons: {primary:'ui-icon-locked'}. 
            For using two icons: icons: {primary:'ui-icon-gear',secondary:'ui-icon-triangle-1-s'}
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jPushButton.Options.SecondaryIconClass">
            <summary>
            Icons to display, with or without text (see text option). The primary icon is 
            displayed by default on the left of the label text, the secondary by default is on the right. 
            Value for the primary and secondary properties must be a classname (String), eg. "ui-icon-gear". 
            For using only one icon: icons: {primary:'ui-icon-locked'}. 
            For using two icons: icons: {primary:'ui-icon-gear',secondary:'ui-icon-triangle-1-s'}
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAutoComplete.Methods">
            <summary>
            Methods for changing options (after initialisation).
            </summary>
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.GetAppendTo">
            <summary>
            Returns [in JavaScript] the current "appendTo" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetAppendToJS(System.String)">
            <summary>
            Which element the menu should be appended to.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New appendTo value</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetAppendTo(System.String,System.Boolean)">
            <summary>
            Which element the menu should be appended to.
            </summary>
            <param name="newValue">New appendTo value</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetAppendTo(System.String)">
            <summary>
            Which element the menu should be appended to.
            </summary>
            <param name="newValue">New appendTo value</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.GetAutoFocus">
            <summary>
            Returns [in JavaScript] the current "autoFocus" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetAutoFocus(System.Boolean)">
            <summary>
            If set to true the first item will be automatically focused.
            </summary>
            <param name="newValue">New autoFocus setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.GetDelay">
            <summary>
            Returns [in JavaScript] the current "delay" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetDelay(System.Int32)">
            <summary>
            The delay in milliseconds the Autocomplete waits after a keystroke to activate 
            itself. A zero-delay makes sense for local data (more responsive), but can produce 
            a lot of load for remote data, while being less responsive.
            </summary>
            <param name="newValue">New delay setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.GetMinLength">
            <summary>
            Returns [in JavaScript] the current "minLength" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetMinLength(System.Int32)">
            <summary>
            The minimum number of characters a user has to type before the Autocomplete 
            activates. Zero is useful for local data with just a few items. Should be increased when 
            there are a lot of items, where a single character would match a few thousand items.
            </summary>
            <param name="newValue">New minLength setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.GetPosition">
            <summary>
            Returns [in JavaScript] the current "position" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetPositionJS(System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetPosition(System.String,System.Boolean)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetPosition(System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetPosition(Fluqi.Core.Position.ePosition)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            A single string representing position within viewport: 'center', 'left', 'right', 'top', 'bottom'. 
            </summary>
            <param name="position">New position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetPosition(System.String,System.String)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing x,y position string values (e.g. ['right','top'] for top right corner)
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetPosition(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing x,y position string values (e.g. ['right','top'] for top right corner)
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetPosition(System.Int32,System.Int32)">
            <summary>
            Specifies where the dialog should be displayed. Possible values: 
            An array containing an x,y coordinate pair in pixel offset from left, top corner of viewport (e.g. [350,100]) 
            </summary>
            <param name="pos1">First position setting</param>
            <param name="pos2">Second position setting</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetSource(System.Collections.Generic.List{System.String})">
            <summary>
            Defines the data to use, must be specified. See Overview section for more details, 
            and look at the various demos.
            </summary>
            <param name="sourceItems">Array of items to become the source</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetSource(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Defines the data to use, must be specified. See Overview section for more details, 
            and look at the various demos.
            </summary>
            <param name="sourceItems">Array of items to become the source</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetSource(System.Boolean,System.String[])">
            <summary>
            Defines the data to use, must be specified. See Overview section for more details, 
            and look at the various demos.
            </summary>
            <param name="items">Items to become the source</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetSource(System.String[])">
            <summary>
            Defines the data to use, must be specified. See Overview section for more details, 
            and look at the various demos.
            </summary>
            <param name="items">Array of items to become the source</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetSource(System.String)">
            <summary>
            Defines the data to use, must be specified. See Overview section for more details, 
            and look at the various demos.
            </summary>
            <param name="url">url to deliver the source items for</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SetSource(System.String,System.Boolean)">
            <summary>
            Defines the data to use, must be specified. See Overview section for more details, 
            and look at the various demos.
            </summary>
            <param name="url">url to deliver the source items for</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.#ctor(Fluqi.Widget.jAutoComplete.AutoComplete)">
            <summary>
            Constructor
            </summary>
            <param name="ac">Autocomplete object to be called</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.Close">
            <summary>
            Close the Autocomplete menu. Useful in combination with the search method, to 
            close the open menu.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.Destroy">
            <summary>
            Remove the AutoComplete functionality completely. This will return the element back to its pre-init state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.Disable">
            <summary>
            Disable the AutoComplete.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.Enable">
            <summary>
            Enable the AutoComplete.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.SearchJS(System.String)">
            <summary>
            Triggers a search event, which, when data is available, then will display the suggestions; 
            can be used by a selectbox-like button to open the suggestions when clicked. 
            If no value argument is specified, the current input's value is used. Can be called with an 
            empty string and minLength: 0 to display all items.
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="searchParam">Search string to use</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.Search(System.String)">
            <summary>
            Triggers a search event, which, when data is available, then will display the suggestions; 
            can be used by a selectbox-like button to open the suggestions when clicked. 
            If no value argument is specified, the current input's value is used. Can be called with an 
            empty string and minLength: 0 to display all items.
            </summary>
            <param name="searchParam">Search string to use</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.Search(System.String,System.Boolean)">
            <summary>
            Triggers a search event, which, when data is available, then will display the suggestions; 
            can be used by a selectbox-like button to open the suggestions when clicked. 
            If no value argument is specified, the current input's value is used. Can be called with an 
            empty string and minLength: 0 to display all items.
            </summary>
            <param name="searchParam">Search string to use</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Methods.Widget">
            <summary>
            Returns the .ui-autocomplete element.
            </summary>
            <remarks>See http://jqueryui.com/demos/autocomplete/#method-widget for details.</remarks>
        </member>
        <member name="T:Fluqi.Widget.jAccordion.Accordion">
            <summary>
            A set of properties to apply to a set of jQuery UI Tab.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.WithCss(System.String,Fluqi.Widget.jAccordion.Panel[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.WithStyle(System.String,System.String,Fluqi.Widget.jAccordion.Panel[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.RenderAttributes(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Renders the registered attributes to the provided jStringBuilder object.  The registered
            CSS classes and Style rules are also added at this point (as they're attributes as well really).
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Accordion._Disposed">
            <summary>
            Flags the Accordion has been disposed.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jAccordion.Accordion._Panels">
            <summary>
            Holds the Panels of the Accordion.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Response object to write to</param>
            <param name="id">ID of the accordion, this must be unique for the page</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.#ctor(System.IO.TextWriter,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Response object to write to</param>
            <param name="id">ID of the tabs collection, this must be unique for the page</param>
            <param name="headingTag">Heading tag to be used (by default this is H3)</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.RenderContainer">
            <summary>
            Renders the tab headers
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.BeginAccordion">
            <summary>
            Renders the tab heading (where each tab is laid out horizontally).
            </summary>
            <remarks>
            Note all the class information is also output to maintain styling for non-JavaScript users.
            </remarks>
            <returns>Returns Accordion object to maintain chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.GetTagHtml">
            <summary>
            Builds up the opening HTML for the Accordion control.
            </summary>
            <returns>Opening HTML</returns>
            <remarks>
            Only renders the opening part as we need to allow the HTML in the "using" block 
            to be rendered out and then close off).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.GetControlScript(System.Int32)">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.EndAccordion">
            <summary>
            Writes the closing part of the Tabs layout (i.e. the closing DIV tag).
            Also writes out the document.ready and tabs initialisation JavaScript 
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.Dispose(System.Boolean)">
            <summary>
            Forces the closing DIV tag to be output after a Tabs "using" block has completed.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.GetStartUpScript(System.Boolean)">
            <summary>
            Renders (and returns) the JavaScript required to initialise the control
            with the required options.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the accordion control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and control initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Accordion.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Accordion.PlugInName">
            <summary>
            Name of the control being rendered.  This string is used when calling into the jQuery 
            control itself, and so must match the control name in the jQuery UI JavaScript files
            </summary>
            <remarks>
            For the Accordion control, this is "accordion".
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Accordion.ID">
            <summary>
            ID of the jQuery UI Tabs object.  Must be unique on the page.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Accordion.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Accordion.Options">
            <summary>
            Specifies the options to be adopted for this set of Accordion (see <see cref="P:Fluqi.Widget.jAccordion.Accordion.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Accordion.Events">
            <summary>
            Specifies the events to be adopted for this set of Accordion (see <see cref="P:Fluqi.Widget.jAccordion.Accordion.Events"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Accordion.Methods">
            <summary>
            Specifies the Methods object that can be used to interact with the control.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Accordion.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Accordion.Panels">
            <summary>
            Returns the list of Panels added to the Accordion control.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jToolTip.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Rendering.#ctor(Fluqi.Widget.jToolTip.ToolTip)">
            <summary>
            Constructor
            </summary>
            <param name="tooltip">ToolTip object to set rendering options of</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Widget.jToolTip.Rendering.ToolTip"/> object so we can continue defining ToolTip attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jToolTip.Rendering.ToolTip"/> object to return chaining to the ToolTip collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jToolTip.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Rendering.ShowCSS">
            <summary>
            Writes slim CSS to the browser (jQuery UI classes aren't expanded for non-JS users)
            </summary>
            <returns>ToolTip object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jToolTip.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>ToolTip object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>ToolTip object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.Rendering.ToolTip">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jToolTip.Rendering.ToolTip"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Extension.jToolTip_Extensions">
            <summary>
            Set of extensions to the Html and Page objects for creating a ToolTip widget through the library.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.jToolTip_Extensions.CreateToolTips(System.Web.Mvc.HtmlHelper)">
            <summary>
            Creates a ToolTip control that can be configured and later rendered on the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <returns>Created ToolTip control</returns>
        </member>
        <member name="M:Fluqi.Extension.jToolTip_Extensions.CreateToolTip(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a ToolTip control that can be configured and later rendered on the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to target the tooltip (must be unique on the page)</param>
            <returns>Created ToolTip control</returns>
        </member>
        <member name="M:Fluqi.Extension.jToolTip_Extensions.CreateToolTip(System.Web.UI.Page,System.String)">
            <summary>
            Creates a ToolTip control that can be configured and later rendered on the page.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to target the tooltip on (must be unique on the page)</param>
            <returns>Created ToolTip control</returns>
        </member>
        <member name="T:Fluqi.Core.Collision">
            <summary>
            Models the Collision options for when an element overflows the window in some direction
            and it gets moved to alternative position.
            </summary>
        </member>
        <member name="M:Fluqi.Core.Collision.CollisionToString(Fluqi.Core.Collision.eCollision)">
            <summary>
            Converts the Collision option into a string.
            </summary>
            <param name="collision">Collision option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.Collision.StringToCollision(System.String)">
            <summary>
            Converts a string into a Collision into an enum option.
            </summary>
            <param name="collision">String to convert</param>
            <returns>Converted option</returns>
        </member>
        <member name="M:Fluqi.Core.Collision.ToList">
            <summary>
            Returns all the enumeration items as list;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Core.Collision.CollisionsToString(System.Collections.Generic.List{Fluqi.Core.Collision.eCollision})">
            <summary>
            Converts a list of Collisions into a (space) separated string.  Note collisions 
            specified as "None" are excluded.
            </summary>
            <param name="collisions"></param>
            <returns></returns>
        </member>
        <member name="T:Fluqi.Core.Collision.eCollision">
            <summary>
            Models the Collision options for when an element overflows the window in some direction
            and it gets moved to alternative position.
            </summary>
        </member>
        <member name="F:Fluqi.Core.Collision.eCollision.None">
            <summary>
            none: not do collision detection.
            </summary>
        </member>
        <member name="F:Fluqi.Core.Collision.eCollision.Flip">
            <summary>
            flip: to the opposite side and the collision detection is run again to see if it will fit. 
            If it won't fit in either position, the center option should be used as a fall back.
            </summary>
        </member>
        <member name="F:Fluqi.Core.Collision.eCollision.Fit">
            <summary>
            fit: so the element keeps in the desired direction, but is re-positioned so it fits.
            </summary>
        </member>
        <member name="F:Fluqi.Core.Collision.eCollision.FlipFit">
            <summary>
            flipfit: First applies the flip logic, placing the element on whichever side allows more of the 
            element to be visible. Then the fit logic is applied to ensure as much of the element is visible 
            as possible.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jTab.Panes">
            <summary>
            Models the set of Panes that are in the Tabs control.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jTab.Panes._CurrentPaneValue">
            <summary>
            Flags the currently active pane.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jTab.Panes._Panes">
            <summary>
            Holds the set of panes added to the Tabs object.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jTab.Panes._CurrentPane">
            <summary>
            Holds a reference to the Pane which has just been added, in case further configuration
            of the Pane is required.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.#ctor(Fluqi.Widget.jTab.Tabs)">
            <summary>
            Constructor
            </summary>
            <param name="tabs">Tabs object the panels belong to</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jTab.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jTab.Panes.Tabs"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jTab.Panes.Tabs"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.Add(System.String,System.String)">
            <summary>
            Adds a tab into the collection of tabs.  Due to the dependencies between the 
            tab headings and content panes the tabs must be defined up-front
            </summary>
            <param name="idOrLocation">
            For static tabs this is the ID of the tab content pane (must be unique on the page).
            For dynamic tabs this is the URL where the content is loaded from.
            </param>
            <param name="title">Title of the tab (to appear in the tab headings)</param>
            <returns>Returns Tabs object to maintain chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.Add(System.String,System.String,System.Boolean)">
            <summary>
            Adds a tab into the collection of tabs.  Due to the dependencies between the 
            tab headings and content panes the tabs must be defined up-front
            </summary>
            <param name="idOrLocation">
            For static tabs this is the ID of the tab content pane (must be unique on the page).
            For dynamic tabs this is the URL where the content is loaded from.
            </param>
            <param name="title">Title of the tab (to appear in the tab headings)</param>
            <param name="active">Flags whether this tab should be the active tab on page load</param>
            <returns>Returns Tabs object to maintain chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.Configure">
            <summary>
            Allows further configuration of a tab pane that has just been added.
            </summary>
            <returns>Added tab Pane.</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.RenderNextPane">
            <summary>
            Renders the tab content pane to the Response.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.ToDictionary">
            <summary>
            Gets the underlying list of Panes on the Accordion control.
            </summary>
            <returns>List of panes on the tab.</returns>
            <remarks>
            Note that the Panes are intentionally hidden from the caller so that the API reads more clearly.
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.GetActiveTab">
            <summary>
            Internal helper method to get the Tab marked as active (if there is one)
            </summary>
            <returns>
            Returns the active Tab if there is one
            Returns null otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.HasActiveTab">
            <summary>
            Internal helper method to establish if any of the tabs are marked as active
            </summary>
            <returns>
            Returns true if a active Tab is defined
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.ResetSelectedTabs">
            <summary>
            Resets all tabs to unselected.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.ResolveActiveTab">
            <summary>
            Works out which (if any) of the tab panes are marked as active.
            If none are active, the first tab is marked as selected.
            </summary>
            <remarks>
            This is necessary to ensure the correct mark-up is produced when the
            ShowCSS option is enabled (i.e. full markup is rendered).
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.GetNextTab">
            <summary>
            Returns the next tab to be rendered through <see cref="M:Fluqi.Widget.jTab.Panes.RenderNextPane"/>.
            </summary>
            <returns>
            Returns next tab to be rendered if list has not been exhausted.
            Returns null if all tab panes have already been rendered.
            </returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Panes.ResetEnumerator">
            <summary>
            Resets where the enumerator is (used for tracking which tab is due to 
            be rendered on the next call to <see cref="M:Fluqi.Widget.jTab.Panes.RenderNextPane"/>).
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Panes.Tabs">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jTab.Panes.Tabs"/> object these events are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jTab.Panes.Item(System.Int32)">
            <summary>
            Gets the Pane at a given index.
            </summary>
            <param name="index">Index to find</param>
            <remarks>
            The index is based on the <see cref="P:Fluqi.Widget.jTab.Pane.Index"/> property
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jTab.Panes.Item(System.String)">
            <summary>
            Gets a Pane with a given key (the key allocated when the Tabs was first built.
            </summary>
            <param name="key">Key index to the pane</param>
        </member>
        <member name="T:Fluqi.Widget.jDialog.Button">
            <summary>
            Stores how the button will appear on the dialog.
            </summary>	
        </member>
        <member name="P:Fluqi.Widget.jDialog.Button.Label">
            <summary>
            What prompt the user will see on the button.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Button.ClickEvent">
            <summary>
            What JavaScript will be executed when the user clicks the button
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAccordion.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Rendering.#ctor(Fluqi.Widget.jAccordion.Accordion)">
            <summary>
            Constructor
            </summary>
            <param name="accordion">Accordion object to configure rendering options for</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Widget.jAccordion.Rendering.Accordion"/> object so we can continue defining Accordion attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jAccordion.Rendering.Accordion"/> object to return chaining to the Accordion collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jAccordion.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Rendering.ShowCSS">
            <summary>
            Writes full CSS to the browser (jQuery UI classes are expanded for non-JS users)
            </summary>
            <returns>Accordion object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jAccordion.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>Accordion object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>Accordion object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Rendering.Accordion">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jAccordion.Rendering.Accordion"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSelectMenuItem.SelectMenuItems">
            <summary>
            Defines the logic for sub-selectMenu items.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.#ctor(Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase)">
            <summary>
            Constructor
            </summary>
            <param name="owner">SelectMenuItem object _this_ item belongs to</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.#ctor(Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="owner">SelectMenuItem object _this_ item belongs to</param>
            <param name="id">ID to assign to this menu item</param>
            TODO: Does having an ID on the OPTION even make sense?
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.SubMenu">
            <summary>
            Entry point for adding sub-menu items using the fluent API.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.Add(System.String,System.Boolean)">
            <summary>
            Adds a new item to the menu
            </summary>
            <param name="title">Text to appear in the URL (within the LI container)</param>
            <param name="isSelected">Flags whether this is the selected item in the list</param>
            <returns>Sub-menu list for chainability</returns>
            <remarks>
            This entry point has no URL on click.  The hyperlink will have a URL of "#".
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a new item to the menu
            </summary>
            <param name="title">Text to appear in the list</param>
            <param name="value">Value associated with the item</param>
            <param name="isSelected">Flags whether this is the selected item in the list</param>
            <returns>SelectMenuItems for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.AddGroup(System.String,System.Boolean)">
            <summary>
            Adds an OptGroup to the SelectMenu
            </summary>
            <param name="label">Label of the group</param>
            <param name="isDisabled">
            Whether the group (and all it's child options) are disabled
            Note: I'm not sure if the jQuery UI select-menu supports this however
            </param>
            <returns>SelectMenuItems for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.FinishGroup">
            <summary>
            Stipulates that all options have been added for this OptGroup.
            Control is returned to the SelectMenu control to allow further items
            (or further OptGroups to be defined).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.Add(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds a collection of options to the menu.
            The "Key" becomes the "value" attribute of the OPTION (in the SELECT tag)
            The "Value" becomes the readable text of the OPTION (what the user sees in the dropdown)
            </summary>
            <param name="dict">Dictionary of options to add</param>
            <returns>SelectMenuItem for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.Add(System.Web.Mvc.SelectList)">
            <summary>
            Adds a list of SelectListItems to the menu
            </summary>
            <param name="options">List of items</param>
            <returns>SelectMenuItem for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.ConfigureItem">
            <summary>
            Provides an entry point to continue configuring the MenuItem that has just been defined.
            This allows an Icon to be added for instance.
            </summary>
            <returns>Last added MenuItem</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.Finish">
            <summary>
            Returns control back to the underlying menu widget.  This in essence says "I've finished
            defining the menu items" and returns the fluent API back to the menu.
            </summary>
            <returns>Menu object to continue chaining</returns>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItems.Parent">
            <summary>
            Holds a reference to the menu the item is on
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuItems._SelectMenuItems">
            <summary>
            Holds the list of sub-menu items.
            </summary>
            <remarks>
            This is delberately hidden from the user so they only see what they need to see.
            </remarks>
        </member>
        <member name="T:Fluqi.Core.ScriptOptions">
            <summary>
            Holds a list of script options that have multiple properties that
            are latered rendered into one string of JavaScript.
            </summary>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.#ctor(Fluqi.Core.ScriptOption)">
            <summary>
            Constructor - used for create a set of child options (for instance the Position control
            appears as part of other control).
            </summary>
            <param name="parent">Parent control</param>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.Add(System.Boolean,System.String,System.String)">
            <summary>
            Adds a new option into the list, if the <paramref name="condition"/> holds true.
            </summary>
            <param name="condition">
            If true the identified option is added to the list
            If false the option isn't added to the list
            </param>
            <param name="key">Name of the property being added to the list</param>
            <param name="value">Value of the property being added to the list</param>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.Add(System.String,System.String)">
            <summary>
            Adds a new option into the list
            </summary>
            <param name="key">Name of the property being added to the list</param>
            <param name="value">Value of the property being added to the list</param>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.Add(System.Boolean,System.String,System.String,System.String[])">
            <summary>
            Adds a new option into the list, if the <paramref name="condition"/> holds true.
            </summary>
            <param name="condition">
            If true the identified option is added to the list
            If false the option isn't added to the list
            </param>
            <param name="key">Name of the property being added to the list</param>
            <param name="fmt">Set of instructions for formatting a string (to be used in a String.Format call)</param>
            <param name="args">Set of arguments for the String.Format call</param>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.Add(System.String,System.String,System.String[])">
            <summary>
            Adds a new option into the list.
            </summary>
            <param name="key">Name of the property being added to the list</param>
            <param name="fmt">Set of instructions for formatting the value (to be used in a String.Format call)</param>
            <param name="args">Set of arguments to formatulate the value from the String.Format call</param>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.AddDate(System.String,System.String)">
            <summary>
            Adds a new [date] option into the list.
            </summary>
            <param name="key">Name of the property being added to the list</param>
            <param name="dateStr">
            Value considered to be a date - can be a date in a string (e.g. "01/01/2000")
            a numerical relative date (e.g. +4, -3) or a relative date specification like "+1w -1d" where some
            of them need quotes, but others don't.
            </param>
            <remarks>
            If <paramref name="dateStr"/> is null or empty nothing is added to the list.
            </remarks>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.AddDate(System.String,System.DateTime)">
            <summary>
            Adds a date option to the list of options.
            </summary>
            <param name="key">Name of the property being added to the list</param>
            <param name="dt">Date to add</param>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.AddDate(System.String,System.Nullable{System.DateTime})">
            <summary>
            Adds a date option to the list of options.
            </summary>
            <param name="key">Name of the property being added to the list</param>
            <param name="dt">Date to add</param>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.AddEventHandler(System.String,System.String,System.String)">
            <summary>
            Adds an event handler script opion to the list.  In effect we create a small JavaScript inline function and add 
            the <paramref name="methodSource"/> to the inline function.
            </summary>
            <param name="key">Name of the event to add</param>
            <param name="functionPrototype">Function signature documented by jQuery UI for the event handler</param>
            <param name="methodSource">Source code to add to the event handler</param>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.Render(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Generates the JavaScript for a control required to initialise it's properties
            and event handlers that have been defined in the list.
            </summary>
            <param name="sb">The string builder used to add the JavaScript code to.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.RenderOptionList(Fluqi.Extension.Helpers.jStringBuilder,System.Collections.Generic.List{Fluqi.Core.ScriptOption})">
            <summary>
            Goes through each option and rendered the JavaScript required for the property/event handler.
            JavaScript is then added to the provided string builder.
            </summary>
            <param name="sb">String builder to add the options to</param>
            <param name="activeOptions">List of options to add to the string builder.</param>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.RenderOption(Fluqi.Extension.Helpers.jStringBuilder,Fluqi.Core.ScriptOption)">
            <summary>
            Renders an individual property/event handler to the given string builder.
            </summary>
            <param name="sb">String builder to add the JavaScript to.</param>
            <param name="activeOption">Option to the string builder.</param>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.RenderPropertyOption(Fluqi.Extension.Helpers.jStringBuilder,Fluqi.Core.ScriptOption)">
            <summary>
            Takes the provided option and renders the JavaScript required to initialise 
            the option as a property key/value pair.
            </summary>
            <param name="sb">String builder to add the JavaScript to</param>
            <param name="option">Option being rendered</param>
        </member>
        <member name="M:Fluqi.Core.ScriptOptions.RenderFunctionOption(Fluqi.Extension.Helpers.jStringBuilder,Fluqi.Core.ScriptOption)">
            <summary>
            Takes the provided option and renders the JavaScript required to initialise
            the calling of the function.
            </summary>
            <param name="sb">String builder to add the JavaScript to</param>
            <param name="option">Option being rendered</param>
        </member>
        <member name="T:Fluqi.Utilities.jPosition.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Rendering.#ctor(Fluqi.Utilities.jPosition.Position)">
            <summary>
            Constructor
            </summary>
            <param name="pos">Position object to configure the rendering options of</param>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Utilities.jPosition.Rendering.Position"/> object so we can continue defining Position attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Utilities.jPosition.Rendering.Position"/> object to return chaining to the Position collection</returns>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Utilities.jPosition.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Rendering.ShowCSS">
            <summary>
            Writes full CSS to the browser (jQuery UI classes are expanded for non-JS users)
            </summary>
            <returns>Control for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Utilities.jPosition.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>Position object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jPosition.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>Position object for chainability</returns>
        </member>
        <member name="P:Fluqi.Utilities.jPosition.Rendering.Position">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Utilities.jPosition.Rendering.Position"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Utilities.jCookie.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Rendering.#ctor(Fluqi.Utilities.jCookie.Cookie)">
            <summary>
            Constructor
            </summary>
            <param name="cookie">Cookie object to set rendering options for</param>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Utilities.jCookie.Rendering.Cookie"/> object so we can continue defining Cookie attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Utilities.jCookie.Rendering.Cookie"/> object to return chaining to the Cookie collection</returns>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Utilities.jCookie.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Rendering.ShowCSS">
            <summary>
            Writes full CSS to the browser (jQuery UI classes are expanded for non-JS users)
            </summary>
            <returns>Control for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Utilities.jCookie.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>Cookie object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>Cookie object for chainability</returns>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.Rendering.Cookie">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Utilities.jCookie.Rendering.Cookie"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAccordion.Panel">
            <summary>
            A set of properties to apply to a set of jQuery UI Tab.
            </summary>
            <summary>
            Responsible for modelling and rendering a single pane in the Accordion control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.WithCss(System.String)">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            </summary>
            <param name="cssClasses">Set of space separated CSS class names to add</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.WithCss(System.String,Fluqi.Widget.jAccordion.Panel[])">
            <summary>
            Registers a set of CSS class names to be added to the control when it is rendered.
            This is in addition to jQuery UI styles that may appear (see RenderCss property).
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="cssClassesWithFormat">Set of space separated CSS class names to add (which has formatting arguments ({0}{1], etc))</param>
            <param name="args"></param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.WithAttribute(System.String,System.String)">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValue">Value to be applied when the attribute is rendered</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.WithAttribute(System.String,System.String,System.Object[])">
            <summary>
            Registers an HTML attribute to be added to the control when it is rendered.
            This override supports adding dynamic parameters (i.e. {0} {1}, etc).
            </summary>
            <param name="attrName">Name of the HTML attribute, e.g. "Tab" or "id" for example</param>
            <param name="attrValueWithFormat">Value to be applied when the attribute is rendered (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.WithStyle(System.String,System.String)">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValue">Value of the style to be added</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.WithStyle(System.String,System.String,Fluqi.Widget.jAccordion.Panel[])">
            <summary>
            Registers an embedded style setting to be added to the control when it is rendered.
            These are written out as part of the "style" attribute, so we might add 'WithStyle("border", "solid 1px blue")' for example.
            </summary>
            <param name="styleName">Name of the style attribute to be added</param>
            <param name="styleValueWithFormat">Value of the style to be added (which has formatting arguments ({0}{1], etc))</param>
            <param name="args">Set of arguments to pass to String.Format</param>
            <returns>Returns this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.WithID(System.String)">
            <summary>
            Registers an ID attribute to be added to the control when it is rendered.
            </summary>
            <param name="idValue">Value for the ID</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.SetVisibility(System.Boolean)">
            <summary>
            Flags whether this Accordion Pane is visible or not.
            </summary>
            <param name="isVisible">Flags whether this Accordion Pane is visible or not.</param>
            <returns>Panel (for chainability)</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.#ctor(System.IO.TextWriter,Fluqi.Widget.jAccordion.Accordion,System.String,System.Boolean)">
            <summary>
            Detailed constructor
            </summary>
            <param name="writer">HttpResponse object to render the accordion onto</param>
            <param name="owner">Accordions object the panel belongs to</param>
            <param name="title">Title to appear in the accordion panel</param>
            <param name="isActive">Flags whether this panel is the active one</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.Finish">
            <summary>
            Returns the fluent interface back to the Panels collection
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.Render">
            <summary>
            Adds the panel HTML to the response stream.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.GetTagHtml">
            <summary>
            Renders the accordion panel and returns the HTML
            </summary>
            <returns>Rendered HTML for the accordion panel</returns>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.RenderBody(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Renders the body of the accordion panel.
            </summary>
            <param name="sb">StringBuilder to render the object to</param>
        </member>
        <member name="M:Fluqi.Widget.jAccordion.Panel.Dispose(System.Boolean)">
            <summary>
            Writes out the closing tag for the content DIV of the tab
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Panel.Title">
            <summary>
            Specifies the Title that should appear in the tab.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Panel.Visible">
            <summary>
            Flags whether this Panel is to be rendered or not.
            </summary>
            <remarks>
            Note this is very different to show/hide as you would in jQuery.  This is really a server-side thing.
            If you mark a Panel as !Visible the Panel is not rendered to the page at all.  So you will actually have
            less Panes rendered on the page (also the indexes will be different as there's one missing).
            This is so you can programmatically remove a Pane dynamically from a set of Panes in an Accordion.
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Panel.IsActive">
            <summary>
            Flags whether this tab should be selected when the page is first loaded.
            </summary>
            <remarks>
            If more than 1 tab is marked as selected, the first one wins.
            By default the first tab is selected.
            </remarks>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Panel.OnAccordion">
            <summary>
            Holds a reference to the set of Tabs this tab is being rendered on.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAccordion.Panel.Header">
            <summary>
            Reference to the header of the panel.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jToolTip.PositionOptions">
            <summary>
            Models the Position child for setting placement of the tooltip control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.#ctor(Fluqi.Widget.jToolTip.Options)">
            <summary>
            Constructor
            </summary>
            <param name="options">Tooltip options object</param>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.Finish">
            <summary>
            Flags the end of the options configuration and returns the Fluent interface back to the tooltip
            object.
            </summary>
            <returns>Control back to the ToolTip object</returns>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetMy(Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetMy(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetMy(System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetMy(System.String,System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetAt(Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetAt(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetAt(System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetAt(System.String,System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetOf(System.String)">
            <summary>
            Element to position against. If you provide a selector, the first matching element 
            will be used. If you provide a jQuery object, the first element will be used. If you 
            provide an event object, the pageX and pageY properties will be used. Example: "#top-menu"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetCollision(Fluqi.Core.Collision.eCollision)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetCollision(Fluqi.Core.Collision.eCollision,Fluqi.Core.Collision.eCollision)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetCollision(System.String)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetCollision(System.String,System.String)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jToolTip.PositionOptions.SetUsingFunction(System.String)">
            <summary>
            When specified the actual property setting is delegated to this callback. Receives a 
            single parameter which is a hash of top and left values for the position that should be set.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.PositionOptions._TipOptions">
            <summary>
            Reference to the Tooltip object to return control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jToolTip.PositionOptions.Options">
            <summary>
            Holds the Position options object for configuration.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSelectMenu.Options">
            <summary>
            A set of properties to apply to a set of jQuery UI SelectMenu.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
            <summary>
            A set of properties to apply to a set of jQuery UI SelectMenu.
            </summary>
            <summary>
            A set of properties to apply to a set of jQuery UI SelectMenu.
            </summary>
            <remarks>
            Properties not yet supported:
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Options.#ctor(Fluqi.Widget.jSelectMenu.SelectMenu)">
            <summary>
            Constructor
            </summary>
            <param name="selectMenu">SelectMenu to configure options of</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Options.Finish">
            <summary>
            Used to flag that configuration of <see cref="T:Fluqi.Widget.jSelectMenu.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Widget.jSelectMenu.Options.SelectMenu"/> object so we can continue defining attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jSelectMenu.Options.SelectMenu"/> object to return chaining</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Options.DiscoverOptions(Fluqi.Core.ScriptOptions)">
            <summary>
            Builds up a set of options the control can use (i.e. jQuery UI control supports).  Which is
            then used in rendering the JavaScript required to initialise the control properties.
            </summary>
            <param name="options">Collection to add the identified options to</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Options.Reset">
            <summary>
            Resets all the control properties back to their default settings (i.e. the
            defaults as documented by jQuery UI library
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Options.SetAppendTo(System.String)">
            <summary>
            Which element to append the menu to
            </summary>
            <param name="value">value</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Options.SetDisabled(System.Boolean)">
            <summary>
            Disables the control if set to true.
            </summary>
            <param name="value">If true disables the control, enabled otherwise</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Options.SetIcons(Fluqi.Core.Icons.eIconClass)">
            <summary>
            Icons to use for opening the control, matching an icon defined by the jQuery UI CSS Framework.
            (string, default: "ui-icon-triangle-1-s")
            </summary>
            <param name="selectMenuIcon">Dropdown icon to use</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Options.SetIcons(System.String)">
            <summary>
            Icons to use for opening the control, matching an icon defined by the jQuery UI CSS Framework.
            (string, default: "ui-icon-triangle-1-s")
            </summary>
            <param name="selectMenuIcon">Dropdown icon to use</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.Options.SetWidth(System.Int32)">
            <summary>
            The width of the menu, in pixels
            </summary>
            <param name="width">width</param>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Options.SelectMenu">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jSelectMenu.Options.SelectMenu"/> object these options are for
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Options.Disabled">
            <summary>
            Disables the control if set to true.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Options.Icons">
            <summary>
            Icons to use for opening the control, matching an icon defined by the jQuery UI CSS Framework.
            (string, default: "ui-icon-triangle-1-s")
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Options.AppendTo">
            <summary>
            Which element to append the menu to
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Options.Position">
            <summary>
            Identifies the position of the menu in relation to the associated button element
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.Options.Width">
            <summary>
            The width of the menu, in pixels
            </summary>
        </member>
        <member name="T:Fluqi.Utilities.jAnimation.Animation">
            <summary>
            Responsible for rendering the script for an animation
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Animation.GetStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and tabs initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true wraps the initialisation script with a jQuery document.ready section
            If false only the control initialisation script is written.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Animation.GetStartUpScript">
            <summary>
            Renders (and returns) the JavaScript required to initialise the control
            with the required options.
            A jQuery document.ready section is wrapped around the script.
            </summary>
            <returns>Returns initialisation JavaScript</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Animation.RenderStartUpScript">
            <summary>
            Writes out the document.ready, text/JavaScript and Animation initialisation script
            to the Response.
            </summary>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Animation.RenderStartUpScript(System.Boolean)">
            <summary>
            Writes out the document.ready, text/JavaScript and Animation initialisation script
            to the Response.
            </summary>
            <param name="incDocReady">
            If true the control initialisation is wrapped in a jQuery document.ready and script
            declaration.
            If false no wrapping takes place.
            </param>
            <remarks>
            Useful if you want more control over where the initialisation takes place.
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Animation.GetControlScript">
            <summary>
            Writes out the initialisation JavaScript to configure the tabs object client-side.
            </summary>
            <remarks>
            Useful if you want to declare your own document.ready and add in the initialisation
            yourself (if you have additional initialisation you want to perform for instance).
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Animation.#ctor(System.IO.TextWriter,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="writer">Response stream to write the control to.</param>
            <param name="key">ID of the button, this must be unique for the page</param>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Animation.Render">
            <summary>
            There is not underlying control for a Animation object to render onto.  The "Render"
            method merely calls the initialisation routine and adds it into the outgoing Response
            object
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Animation.GetControlScript(System.Int32)">
            <summary>
            Writes out the calling script for the jQuery Tabs plugin, adding options that have been
            a defined.
            </summary>
            <param name="tabDepth">
            How far to indent the tabs in the script code.
            </param>
            <returns>
            Returns rendered initialisation script
            </returns>
        </member>
        <member name="P:Fluqi.Utilities.jAnimation.Animation.Writer">
            <summary>
            Response object to write the control to.
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jAnimation.Animation.Options">
            <summary>
            Specifies the options to be adopted for this object (see <see cref="P:Fluqi.Utilities.jAnimation.Animation.Options"/> class
            for full details)
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jAnimation.Animation.Rendering">
            <summary>
            Specifies the settings to be adopted when rendering the control (e.g. whether to compress the JavaScript, 
            include jQuery UI class names, etc.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jAutoComplete.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Rendering.#ctor(Fluqi.Widget.jAutoComplete.AutoComplete)">
            <summary>
            Constructor
            </summary>
            <param name="ac">AutoComplete object to set rendering options of</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Widget.jAutoComplete.Rendering.AutoComplete"/> object so we can continue defining AutoComplete attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jAutoComplete.Rendering.AutoComplete"/> object to return chaining to the AutoComplete collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jAutoComplete.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Rendering.ShowCSS">
            <summary>
            Writes full CSS to the browser (jQuery UI classes are expanded for non-JS users)
            </summary>
            <returns>Accordion object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jAutoComplete.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>AutoComplete object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>AutoComplete object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.Rendering.AutoComplete">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jAutoComplete.Rendering.AutoComplete"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Utilities.jCookie.CookieOptions">
            <summary>
            Models the rendering of the options a Cookie can use.
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.CookieOptions.#ctor(Fluqi.Utilities.jCookie.Cookie)">
            <summary>
            Constructor
            </summary>
            <param name="cookie">Cookie object the options are being defined for</param>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.CookieOptions.Finish">
            <summary>
            Used to flag that configuration of <see cref="P:Fluqi.Utilities.jCookie.CookieOptions.Options"/> has finished, and 
            returns the <see cref="P:Fluqi.Utilities.jCookie.CookieOptions.Cookie"/> object so we can continue defining attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Utilities.jCookie.CookieOptions.Cookie"/> object to return chaining to the parent object</returns>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.CookieOptions.SetExpiry(System.Int32)">
            <summary>
            Specifies when the cookie should expire
            </summary>
            <param name="days">Number of days in which the expiry page</param>
            <remarks>
            If no expiration is specified the cookie expires at the end of the browsing session.
            </remarks>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.CookieOptions.SetPath(System.String)">
            <summary>
            Specifies the path the cookie is valid within.  So "/" means the whole site, "/demos" 
            means it's only applicable in the "demos" subfolder.
            </summary>
            <param name="path">Path of the cookie</param>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.CookieOptions.SetDomain(System.String)">
            <summary>
            Specifies the domain the cookie should be saved to.  So you could have a subdomain
            so the cookie is only saved there.
            </summary>
            <param name="domain">Domain of the cookie</param>
        </member>
        <member name="M:Fluqi.Utilities.jCookie.CookieOptions.SetSecure(System.Boolean)">
            <summary>
            If true, the secure attribute of the cookie will be set and the cookie transmission will
            require a secure protocol (like HTTPS).
            </summary>
            <param name="secure">
            true for a secure cookie
            false for non-secure cookie
            </param>
            <remarks>
            Naturally true only works if you're running under SSL.
            </remarks>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.CookieOptions.Options">
            <summary>
            Holds the set of options set for the Cookie plugin.
            </summary>
        </member>
        <member name="P:Fluqi.Utilities.jCookie.CookieOptions.Cookie">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Utilities.jCookie.CookieOptions.Cookie"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Utilities.jAnimation.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Rendering.#ctor(Fluqi.Utilities.jAnimation.Animation)">
            <summary>
            Constructor
            </summary>
            <param name="animation">Cookie object to set rendering options for</param>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Utilities.jAnimation.Rendering.Animation"/> object so we can continue defining Animation attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Utilities.jAnimation.Rendering.Animation"/> object to return chaining to the Animation collection</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Utilities.jAnimation.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Rendering.ShowCSS">
            <summary>
            Writes full CSS to the browser (jQuery UI classes are expanded for non-JS users)
            </summary>
            <returns>Control for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Utilities.jAnimation.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>Animation object for chainability</returns>
        </member>
        <member name="M:Fluqi.Utilities.jAnimation.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>Animation object for chainability</returns>
        </member>
        <member name="P:Fluqi.Utilities.jAnimation.Rendering.Animation">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Utilities.jAnimation.Rendering.Animation"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Core.Ease">
            <summary>
            Models the Easing options available as standard with jQuery UI components
            </summary>
        </member>
        <member name="M:Fluqi.Core.Ease.EaseToString(Fluqi.Core.Ease.eEase)">
            <summary>
            Converts the Easing option into a string.
            </summary>
            <param name="ease">Easing option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.Ease.EaseToString(System.Int32)">
            <summary>
            Converts the Easing option into a string.
            </summary>
            <param name="nEase">Easing option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.Ease.ToList">
            <summary>
            Returns all the enumeration items as list;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Core.Ease.StringToEase(System.String)">
            <summary>
            Converts a string into an Easing into an enum option.
            </summary>
            <param name="ease">String to convert</param>
            <returns>Converted option</returns>
        </member>
        <member name="M:Fluqi.Core.Ease.EaseToString(System.Collections.Generic.List{Fluqi.Core.Ease.eEase})">
            <summary>
            Converts a list of Easing functions into a (space) separated string.  Note Easings
            specified as "None" are excluded.
            </summary>
            <param name="ease"></param>
            <returns></returns>
        </member>
        <member name="T:Fluqi.Core.Ease.eEase">
            <summary>
            Models the Easing options available as standard with jQuery UI components
            (as defined in the jQuery documentation - http://api.jqueryui.com/easings/)
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jPushButton.Methods">
            <summary>
            The "Methods" are called after the control has been initialised.  If for instance you want to change
            the value of a property, or invoke "some" action on the control (e.g. "open" or "close") you 
            call the "Method" rather than through the "Options" (as Options is about the initialisation of the control).
            </summary>
            <summary>
            Methods for changing options (after initialisation).
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.#ctor(Fluqi.Widget.jPushButton.PushButton)">
            <summary>
            Constructor
            </summary>
            <param name="btn">PushButton object to call</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.Destroy">
            <summary>
            Remove the Button functionality completely. This will return the element back to its pre-init state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.Disable">
            <summary>
            Disable the Button.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.Enable">
            <summary>
            Enable the Button.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.Widget">
            <summary>
            Returns the .ui-button element.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.Refresh">
            <summary>
            Refreshes the visual state of the button. Useful for updating button state after the native 
            element's checked or disabled state is changed programatically.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.GetText">
            <summary>
            Returns [in JavaScript] the current "text" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.SetText(System.Boolean)">
            <summary>
            Whether to show any text 
            - when set to false (display no text), icons (see icons option) must be enabled, otherwise it'll be ignored.
            </summary>
            <param name="newValue">New text setting</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.GetIcons">
            <summary>
            Returns [in JavaScript] the current "icons" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.SetIcons(System.String,System.String)">
            <summary>
            Icons to display, with or without text (see text option). The primary icon is displayed by 
            default on the left of the label text, the secondary by default is on the right. 
            Value for the primary and secondary properties must be a classname (String), 
            eg. "ui-icon-gear". For using only one icon: icons: {primary:'ui-icon-locked'}. 
            For using two icons: icons: {primary:'ui-icon-gear',secondary:'ui-icon-triangle-1-s'}
            </summary>
            <param name="primary">new unselected header setting</param>
            <param name="secondary">new selected header setting</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.SetIcons(Fluqi.Core.Icons.eIconClass,Fluqi.Core.Icons.eIconClass)">
            <summary>
            Icons to use for headers. Icons may be specified for 'header' and 'activeHeader', 
            and we recommend using the icons native to the jQuery UI CSS Framework manipulated by jQuery UI ThemeRoller
            </summary>
            <param name="primary">new unselected header setting</param>
            <param name="secondary">new selected header setting</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.GetLabel">
            <summary>
            Returns [in JavaScript] the current "label" setting.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.SetLabelJS(System.String)">
            <summary>
            Text to show on the button. When not specified (null), the element's html content is used, 
            or its value attribute when it's an input element of type submit or reset; or the html content of the 
            associated label element if its an input of type radio or checkbox
            This entry point does _not_ add quotes to the input value and is indended for passing JavaScript
            (that is when rendered, the input value will refer to a JavaScript variable for instance).
            </summary>
            <param name="newValue">New label setting</param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.SetLabel(System.String,System.Boolean)">
            <summary>
            Text to show on the button. When not specified (null), the element's html content is used, 
            or its value attribute when it's an input element of type submit or reset; or the html content of the 
            associated label element if its an input of type radio or checkbox
            </summary>
            <param name="newValue">New label setting</param>
            <param name="inDoubleQuotes">
            true  - double quotes (")
            false - single quotes (')
            </param>
        </member>
        <member name="M:Fluqi.Widget.jPushButton.Methods.SetLabel(System.String)">
            <summary>
            Text to show on the button. When not specified (null), the element's html content is used, 
            or its value attribute when it's an input element of type submit or reset; or the html content of the 
            associated label element if its an input of type radio or checkbox
            </summary>
            <param name="newValue">New label setting</param>
        </member>
        <member name="T:Fluqi.Widget.jAutoComplete.PositionOptions">
            <summary>
            Models the Position child for setting placement of the autocomplete control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.#ctor(Fluqi.Widget.jAutoComplete.Options)">
            <summary>
            Constructor
            </summary>
            <param name="acOptions">Autocomplete options object</param>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.Finish">
            <summary>
            Flags the end of the options configuration and returns the Fluent interface back to the AutoComplete
            object.
            </summary>
            <returns>Control back to the AutoComplete object</returns>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetMy(Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetMy(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetMy(System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetMy(System.String,System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetAt(Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetAt(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetAt(System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetAt(System.String,System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetOf(System.String)">
            <summary>
            Element to position against. If you provide a selector, the first matching element 
            will be used. If you provide a jQuery object, the first element will be used. If you 
            provide an event object, the pageX and pageY properties will be used. Example: "#top-menu"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetCollision(Fluqi.Core.Collision.eCollision)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetCollision(Fluqi.Core.Collision.eCollision,Fluqi.Core.Collision.eCollision)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetCollision(System.String)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetCollision(System.String,System.String)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jAutoComplete.PositionOptions.SetUsingFunction(System.String)">
            <summary>
            When specified the actual property setting is delegated to this callback. Receives a 
            single parameter which is a hash of top and left values for the position that should be set.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.PositionOptions._AutoCompleteOptions">
            <summary>
            Reference to the AutoComplete object to return control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jAutoComplete.PositionOptions.Options">
            <summary>
            Holds the Position options object for configuration.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jMenu.PositionOptions">
            <summary>
            Models the Position child for setting placement of the menu control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.#ctor(Fluqi.Widget.jMenu.Options)">
            <summary>
            Constructor
            </summary>
            <param name="options">Menu options object</param>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.Finish">
            <summary>
            Flags the end of the options configuration and returns the Fluent interface back to the Menu
            object.
            </summary>
            <returns>Control back to the Menu object</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetMy(Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetMy(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetMy(System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetMy(System.String,System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetAt(Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetAt(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetAt(System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetAt(System.String,System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetOf(System.String)">
            <summary>
            Element to position against. If you provide a selector, the first matching element 
            will be used. If you provide a jQuery object, the first element will be used. If you 
            provide an event object, the pageX and pageY properties will be used. Example: "#top-menu"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetCollision(Fluqi.Core.Collision.eCollision)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetCollision(Fluqi.Core.Collision.eCollision,Fluqi.Core.Collision.eCollision)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetCollision(System.String)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetCollision(System.String,System.String)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenu.PositionOptions.SetUsingFunction(System.String)">
            <summary>
            When specified the actual property setting is delegated to this callback. Receives a 
            single parameter which is a hash of top and left values for the position that should be set.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.PositionOptions._MenuOptions">
            <summary>
            Reference to the Menu object to return control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenu.PositionOptions.Options">
            <summary>
            Holds the Position options object for configuration.
            </summary>
        </member>
        <member name="T:Fluqi.Core.ButtonType">
            <summary>
            Models the different render options for the Button control.
            </summary>
        </member>
        <member name="M:Fluqi.Core.ButtonType.ButtonTypeToString(Fluqi.Core.ButtonType.eButtonType)">
            <summary>
            Converts the given button type into a string (used for rendering the button).
            </summary>
            <param name="buttonType">Type of button</param>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Core.ButtonType.StringToButtonType(System.String)">
            <summary>
            Converts a string into a ButtonType.
            </summary>
            <param name="buttonType">Button type to convert</param>
            <returns>Converts the given string into a ButtonType</returns>
        </member>
        <member name="M:Fluqi.Core.ButtonType.ToList">
            <summary>
            Returns all the enumeration items as list;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Core.ButtonType.IsInputButton(Fluqi.Core.ButtonType.eButtonType)">
            <summary>
            Queries if the provided ButtonType will be rendered using an "input" tag.
            </summary>
            <param name="buttonType">ButtonType to query</param>
            <returns></returns>
        </member>
        <member name="T:Fluqi.Core.ButtonType.eButtonType">
            <summary>
            Options available for how the Button control is rendered.
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jDialog.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Rendering.#ctor(Fluqi.Widget.jDialog.Dialog)">
            <summary>
            Constructor
            </summary>
            <param name="dlg">Dialog object to set rendering options of</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Widget.jDialog.Rendering.Dialog"/> object so we can continue defining Dialog attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jDialog.Rendering.Dialog"/> object to return chaining to the Dialog collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jDialog.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Rendering.ShowCSS">
            <summary>
            Writes full CSS to the browser (jQuery UI classes are expanded for non-JS users)
            </summary>
            <returns>Control for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jDialog.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>Dialog object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jDialog.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>Dialog object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jDialog.Rendering.Dialog">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jDialog.Rendering.Dialog"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSlider.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Rendering.#ctor(Fluqi.Widget.jSlider.Slider)">
            <summary>
            Constructor
            </summary>
            <param name="sldr">Slider object to set rendering options of</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Widget.jSlider.Rendering.Slider"/> object so we can continue defining Slider attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jSlider.Rendering.Slider"/> object to return chaining to the Slider collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jSlider.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Rendering.ShowCSS">
            <summary>
            Writes slim CSS to the browser (jQuery UI classes aren't expanded for non-JS users)
            </summary>
            <returns>Slider object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jSlider.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>Slider object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSlider.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>Slider object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jSlider.Rendering.Slider">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jSlider.Rendering.Slider"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSelectMenu.PositionOptions">
            <summary>
            Models the Position child for setting placement of the SelectMenu control.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.#ctor(Fluqi.Widget.jSelectMenu.Options)">
            <summary>
            Constructor
            </summary>
            <param name="options">SelectMenu options object</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.Finish">
            <summary>
            Flags the end of the options configuration and returns the Fluent interface back to the SelectMenu
            object.
            </summary>
            <returns>Control back to the SelectMenu object</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetMy(Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetMy(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetMy(System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetMy(System.String,System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetAt(Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetAt(Fluqi.Core.Position.ePosition,Fluqi.Core.Position.ePosition)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetAt(System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetAt(System.String,System.String)">
            <summary>
            Defines which position on the element being positioned to align with the target 
            element: "horizontal vertical" alignment. A single value such as "right" will 
            default to "right center", "top" will default to "center top" (following CSS 
            convention). Acceptable values: "top", "center", "bottom", "left", "right". 
            Example: "left top" or "center center"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetOf(System.String)">
            <summary>
            Element to position against. If you provide a selector, the first matching element 
            will be used. If you provide a jQuery object, the first element will be used. If you 
            provide an event object, the pageX and pageY properties will be used. Example: "#top-menu"
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetCollision(Fluqi.Core.Collision.eCollision)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetCollision(Fluqi.Core.Collision.eCollision,Fluqi.Core.Collision.eCollision)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetCollision(System.String)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetCollision(System.String,System.String)">
            <summary>
            When the positioned element overflows the window in some direction, move it to an 
            alternative position. Similar to my and at, this accepts a single value or a pair for 
            horizontal/vertical, eg. "flip", "fit", "fit flip", "fit none". 
            <list>
              <item>
                flip: to the opposite side and the collision detection is run again to see if it 
                will fit. If it won't fit in either position, the center option should be used as a fall back. 
              </item>
              <item>
                fit: so the element keeps in the desired direction, but is re-positioned so it fits. 
              </item>
              <item>
                none: not do collision detection.
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenu.PositionOptions.SetUsingFunction(System.String)">
            <summary>
            When specified the actual property setting is delegated to this callback. Receives a 
            single parameter which is a hash of top and left values for the position that should be set.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.PositionOptions._SelectMenuOptions">
            <summary>
            Reference to the SelectMenu object to return control to.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenu.PositionOptions.Options">
            <summary>
            Holds the Position options object for configuration.
            </summary>
        </member>
        <member name="T:Fluqi.Extension.jSelectMenu_Extensions">
            <summary>
            Set of extensions to the Html and Page objects for creating a Menu widget through the library.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.jSelectMenu_Extensions.CreateSelectMenu(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a Menu control that can be configured and later rendered on the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Menu control</returns>
        </member>
        <member name="M:Fluqi.Extension.jSelectMenu_Extensions.CreateMenu(System.Web.UI.Page,System.String)">
            <summary>
            Creates a Menu control that can be configured and later rendered on the page.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Menu control</returns>
        </member>
        <member name="T:Fluqi.Extension.Misc_Extensions">
            <summary>
            Set of extensions that help in the function of the library.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.JsBool(System.Boolean)">
            <summary>
            Simple convenience function to convert a bool to a string value JavaScript will
            be happy with (i.e. in lowercase).
            </summary>
            <returns><paramref name="value"/> in lowercase</returns>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.JsBool(System.Nullable{System.Boolean})">
            <summary>
            Simple convenience function to convert a bool to a string value JavaScript will
            be happy with (i.e. in lowercase).
            </summary>
            <returns><paramref name="value"/> in lowercase</returns>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.JsDate(System.DateTime)">
            <summary>
            Simple convenience function to convert a DateTime object to a string value JavaScript will
            be happy with.
            </summary>
            <param name="dt">Date to be converted</param>
            <returns>Date as JavaScript</returns>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.JsDate(System.DateTime,System.Boolean)">
            <summary>
            Simple convenience function to convert a DateTime object to a string value JavaScript will
            be happy with.
            </summary>
            <param name="dt">Date to be converted</param>
            <param name="inDoubleQuotes">
            true - Surrounds the JavaScript date object in double quotes
            false - Surrounds the JavaScript date object in single quotes
            </param>
            <returns>Date as JavaScript</returns>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.JsArray(System.String[])">
            <summary>
            Convenience function to render an array of strings as a JavaScript (JSON notation) array
            (used for initialises jQuery UI array control properties).
            No quote marks are added to the values.
            </summary>
            <param name="values">Set of strings to be rendered.</param>
            <returns>JavaScript array as a string</returns>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.JsArray(System.String[],System.Boolean)">
            <summary>
            Convenience function to render an array of strings as a JavaScript (JSON notation) array
            (used for initialises jQuery UI array control properties).  Each item in the JSON array
            is quoted as instructed by the <paramref name="doubleQuotes"/> parameter.
            </summary>
            <param name="values">Set of strings to be rendered.</param>
            <param name="doubleQuotes">
            true  - double quotes (") are added to the strings
            false - single quotes (') are added to the strings
            </param>
            <returns>JavaScript array as a string</returns>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.JsArray(System.Int32[])">
            <summary>
            Convenience function to render an array of numbers as a JavaScript (JSON notation) array
            (used for initialises jQuery UI array control properties).
            Naturally for a numeric list the resulting array does _not_ have quotes.
            </summary>
            <param name="values">Set of numbers to be rendered.</param>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.JsArray(System.Collections.Generic.List{System.String})">
            <summary>
            Convenience function to render an array of strings as a JavaScript (JSON notation) array
            (used for initialises jQuery UI array control properties).
            Items in the JSON list are _not_ quoted.
            </summary>
            <param name="values">List of strings to be rendered.</param>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.JsArray(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Convenience function to render an array of strings as a JavaScript (JSON notation) array
            (used for initialises jQuery UI array control properties).
            </summary>
            <param name="values">List of strings to be rendered.</param>
            <param name="doubleQuotes">
            true  - double quotes (") are added to the strings
            false - single quotes (') are added to the strings
            </param>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.JsArray(System.Collections.Generic.List{System.Int32})">
            <summary>
            Convenience function to render a list of numbers as a JavaScript (JSON notation) array
            (used for initialises jQuery UI array control properties).
            Naturally items in the JSON list are _not_ quoted.
            </summary>
            <param name="values">List of numbers to be rendered.</param>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.ToSeparated(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Converts a list of strings into CSV values (where separator is used as the delimiter).
            </summary>
            <param name="values">List of values to join together</param>
            <param name="separator">Separator to delimit values with</param>
            <returns>String of values delimited by specified separator</returns>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.ToSeparated(System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            Converts a list of numbers into CSV values (where separator is used as the delimiter).
            </summary>
            <param name="values">List of numbers to join together</param>
            <param name="separator">Separator to delimit values with</param>
            <returns>String of values delimited by specified separator</returns>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.IgnorantEquals(System.String,System.String)">
            <summary>
            Performs a string case-insensitive comparison.
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns>
            Returns true if the two strings are (case-sensitive) equal
            Returns false otherwise
            </returns>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.InSingleQuotes(System.String)">
            <summary>
            Surrounds the value in single quote marks (').
            </summary>
            <param name="value">String to be quoted</param>
            <returns>Returns provided value in quotes.</returns>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.InDoubleQuotes(System.String)">
            <summary>
            Surrounds the value in double quote marks (").
            </summary>
            <param name="value">String to be quoted</param>
            <returns>Returns provided value in quotes.</returns>
        </member>
        <member name="M:Fluqi.Extension.Misc_Extensions.InQuotes(System.String,System.Boolean)">
            <summary>
            Surrounds the value in quote marks.  The <paramref name="doubleQuotes"/> parameter
            determines whether to use double quotes (true) or single quotes (false).
            </summary>
            <param name="value">String to be quoted.</param>
            <param name="doubleQuotes">true - double quotes("), false - single quotes (')</param>
            <returns></returns>
        </member>
        <member name="T:Fluqi.Core.Icons">
            <summary>
            Models the Icons that comes as standard through jQuery UI (see the Framework Icons section
            at http://jqueryui.com/themeroller/).  Used for displaying icons in the dialog control for instance.
            </summary>
        </member>
        <member name="M:Fluqi.Core.Icons.ByIndex(System.Int32)">
            <summary>
            Converts a number (corresponding to the <see cref="T:Fluqi.Core.Icons.eIconClass"/> enumeration) into a string
            representing the CSS class name required to render the corresponding icon.
            </summary>
            <param name="iconIndex">Icon enumeration (numeric value) of the CSS class to get</param>
            <returns>CSS [icon] class name</returns>
        </member>
        <member name="M:Fluqi.Core.Icons.ByEnum(Fluqi.Core.Icons.eIconClass)">
            <summary>
            Converts an <see cref="T:Fluqi.Core.Icons.eIconClass"/> enumeration value into a string representing
            the CSS class name required to render the corresponding icon.
            </summary>
            <param name="iconClass">Icon enumeration of the CSS class to get</param>
            <returns>CSS [icon] class name</returns>
        </member>
        <member name="M:Fluqi.Core.Icons.IconToString(System.Int32)">
            <summary>
            Converts the icon option into a string.
            </summary>
            <param name="icon">Icon option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.Icons.IconToString(Fluqi.Core.Icons.eIconClass)">
            <summary>
            Converts the icon option into a string.
            </summary>
            <param name="icon">Icon option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.Icons.StringToIcon(System.String)">
            <summary>
            Converts a string into an Icon enum option.
            </summary>
            <param name="icon">String to convert</param>
            <returns>Converted option</returns>
        </member>
        <member name="M:Fluqi.Core.Icons.ToList">
            <summary>
            Gets the full list of CSS class names available (useful for demo purposes).
            </summary>
            <returns>Full list of CSS class names</returns>
        </member>
        <member name="M:Fluqi.Core.Icons.RenderAsList">
            <summary>
            Returns an HTML list (ul/li set) of all the available icons.
            </summary>
            <returns>HTML list (ul/li set) of all the available icons.</returns>
        </member>
        <member name="M:Fluqi.Core.Icons.RenderAsTable">
            <summary>
            Returns an HTML table of all available icons, split into 13 columsn).
            </summary>
            <returns>An HTML table of all available icons.</returns>
        </member>
        <member name="M:Fluqi.Core.Icons.RenderAsTable(System.Int32)">
            <summary>
            Returns an HTML table of all available icons, split into <paramref name="numColumns"/>.
            </summary>
            <param name="numColumns">Number of columns to split the table into</param>
            <returns>HTML table of [rendered] icons</returns>
        </member>
        <member name="T:Fluqi.Core.Icons.eIconClass">
            <summary>
            Enumeration for the Icons that come as standard with jQuery UI (see the Framework Icons section
            at http://jqueryui.com/themeroller/).
            </summary>
        </member>
        <member name="T:Fluqi.Extension.Helpers.WriterExt">
            <summary>
            Set of extensions for the <see cref="T:System.IO.TextWriter"/> object.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.Helpers.WriterExt.Write(System.IO.TextWriter,System.String,System.Object[])">
            <summary>
            Adds a method of adding a String.Format type call to the response stream.
            </summary>
            <param name="writer">Response object to be extended</param>
            <param name="fmt">String of format arguments</param>
            <param name="values">Values to be added to the format string</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.WriterExt.WriteLine(System.Web.HttpResponseBase,System.String)">
            <summary>
            Adds a method of adding a string value to the response stream followed by newline.
            </summary>
            <param name="resp">Response object to be extended</param>
            <param name="value"></param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.WriterExt.WriteLine(System.IO.TextWriter)">
            <summary>
            Adds a newline to the response stream.
            </summary>
            <param name="writer">Response object to be extended</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.WriterExt.WriteLine(System.IO.TextWriter,System.String,System.Object[])">
            <summary>
            Adds a method of adding a String.Format type call to the response stream, immediately followed by a newline.
            </summary>
            <param name="writer">Response object to be extended</param>
            <param name="fmt">String of format arguments</param>
            <param name="values">Values to be added to the format string</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.WriterExt.WriteIf(System.IO.TextWriter,System.Boolean,System.Object)">
            <summary>
            Writes a value to the response stream, but only if <paramref name="condition"/> is true.
            </summary>
            <param name="writer">Response object to be extended</param>
            <param name="condition">Condition to be evaluated</param>
            <param name="value">Value to be writte if condition is true</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.WriterExt.WriteIf(System.IO.TextWriter,System.Boolean,System.String,System.Object[])">
            <summary>
            Writes a String.Format string to the response stream, but only if <paramref name="condition"/>
            is true.
            </summary>
            <param name="writer">Response object to be extended</param>
            <param name="condition">Condition to be evaluated</param>
            <param name="fmt">String of format arguments</param>
            <param name="values">Values to be added to the format string</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.WriterExt.WriteLineIf(System.IO.TextWriter,System.Boolean)">
            <summary>
            Writes a newline to the response stream, but only if <paramref name="condition"/> is true.
            </summary>
            <param name="writer">Response object to be extended</param>
            <param name="condition">Condition to be evaluated</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.WriterExt.WriteLineIf(System.IO.TextWriter,System.Boolean,System.Object)">
            <summary>
            Writes a value (followed by a newline) to the response stream, but only if <paramref name="condition"/>
            is true.
            </summary>
            <param name="writer">Response object to be extended</param>
            <param name="condition">Condition to be evaluated</param>
            <param name="value">Value to be written</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.WriterExt.WriteLineIf(System.IO.TextWriter,System.Boolean,System.String,System.Object[])">
            <summary>
            Writes a String.Format string (followed by a newline), but only if the condition is true.
            </summary>
            <param name="writer">Response object to be extended</param>
            <param name="condition">Condition to be evaluated</param>
            <param name="fmt">String of format arguments</param>
            <param name="values">Values to be added to the format string</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.WriterExt.WriteTabsIf(System.IO.TextWriter,System.Boolean,System.Int32)">
            <summary>
            Writes X Tab(s) to the response stream, but only if the <paramref name="condition"/> is true
            (useful for formatting JavaScript to the response stream nicely).
            </summary>
            <param name="writer">Response object to be extended.</param>
            <param name="condition">Condition to be evaluated.</param>
            <param name="numTabs">Number of tabs to write to the response stream</param>
        </member>
        <member name="M:Fluqi.Extension.Helpers.WriterExt.WriteTabsIf(System.IO.TextWriter,System.Boolean)">
            <summary>
            Writes a single Tab to the response stream, but only if the <paramref name="condition"/> is true
            (useful for formatting JavaScript to the response stream nicely).
            </summary>
            <param name="writer">Response object to be extended.</param>
            <param name="condition">Condition to be evaluated.</param>
        </member>
        <member name="T:Fluqi.Extension.jSlider_Extensions">
            <summary>
            Set of extensions to the Html and Page objects for creating a Slider widget through the library.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.jSlider_Extensions.CreateSlider(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a Slider control that can be configured and later rendered on the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Slider control</returns>
        </member>
        <member name="M:Fluqi.Extension.jSlider_Extensions.CreateSlider(System.Web.UI.Page,System.String)">
            <summary>
            Creates a Slider control that can be configured and later rendered on the page.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Slider control</returns>
        </member>
        <member name="T:Fluqi.Core.Position">
            <summary>
            Models the Position options available for the controls (e.g. where the dialog appears, where the 
            AutoComplete menu appears in correlation to the input textbox).
            </summary>
        </member>
        <member name="M:Fluqi.Core.Position.PositionToString(Fluqi.Core.Position.ePosition)">
            <summary>
            Converts the enumeration into a string (for rendering the option).
            </summary>
            <param name="position">Option to be converted</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.Position.StringToPosition(System.String)">
            <summary>
            Converts a string into the enumeration
            </summary>
            <param name="position">String to be converted</param>
            <returns>Converted enumeration option</returns>
        </member>
        <member name="M:Fluqi.Core.Position.PositionsToString(System.Collections.Generic.List{Fluqi.Core.Position.ePosition})">
            <summary>
            Converts the list of positions into a space separated string (note any with
            a position of "None").
            </summary>
            <param name="positions">Positions to convert to a string</param>
            <returns>Any non "None" (eh?) positions as a space separated string</returns>
        </member>
        <member name="M:Fluqi.Core.Position.ToList">
            <summary>
            Returns all the enumeration items as list;
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fluqi.Core.Position.ePosition">
            <summary>
            Models the Position options available for the controls (e.g. where the dialog appears, where the 
            AutoComplete menu appears in correlation to the input textbox).
            </summary>
        </member>
        <member name="F:Fluqi.Core.Position.ePosition.None">
            <summary>Position isn't appropriate</summary>
        </member>
        <member name="F:Fluqi.Core.Position.ePosition.Centre">
            <summary>Centred positioning</summary>
        </member>
        <member name="F:Fluqi.Core.Position.ePosition.Center">
            <summary>Centred positioning - same as Centre ... here to accommodate our American friends :)</summary>
        </member>
        <member name="F:Fluqi.Core.Position.ePosition.Top">
            <summary>Position at top</summary>
        </member>
        <member name="F:Fluqi.Core.Position.ePosition.Bottom">
            <summary>Position at bottom</summary>
        </member>
        <member name="F:Fluqi.Core.Position.ePosition.Left">
            <summary>Position at left</summary>
        </member>
        <member name="F:Fluqi.Core.Position.ePosition.Right">
            <summary>Position at right</summary>
        </member>
        <member name="T:Fluqi.Widget.jTab.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Rendering.#ctor(Fluqi.Widget.jTab.Tabs)">
            <summary>
            Constructor
            </summary>
            <param name="tabs">Tabs object to set rendering options of</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Widget.jTab.Rendering.Tabs"/> object so we can continue defining Tabs attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jTab.Rendering.Tabs"/> object to return chaining to the Tabs collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jTab.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jTab.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Rendering.ShowCSS">
            <summary>
            Writes slim CSS to the browser (jQuery UI classes aren't expanded for non-JS users)
            </summary>
            <returns>Tabs object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jTab.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jTab.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>Tabs object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jTab.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>Tabs object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jTab.Rendering.Tabs">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jTab.Rendering.Tabs"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jProgressBar.Rendering">
            <summary>
            Responsible for setting how the control should be rendered to the page.  For instance
            should the control CSS be rendered, should pretty layout be used, etc.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Rendering.#ctor(Fluqi.Widget.jProgressBar.ProgressBar)">
            <summary>
            Constructor
            </summary>
            <param name="pb">ProgressBar object to set rendering options of</param>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Rendering.Finish">
            <summary>
            Used to flag that configuration has finished, and 
            returns the <see cref="P:Fluqi.Widget.jProgressBar.Rendering.ProgressBar"/> object so we can continue defining ProgressBar attributes.
            </summary>
            <returns>Returns <see cref="P:Fluqi.Widget.jProgressBar.Rendering.ProgressBar"/> object to return chaining to the ProgressBar collection</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Rendering.Compress">
            <summary>
            Forces pretty rendering off so you can see the output whilst in DEBUG mode if you wish
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Rendering.SetPrettyRender(System.Boolean)">
            <summary>
            Specifies if the HTML/JavaScript which is rendered should be indented in a more readable 
            manner (as opposed to when <see cref="M:Fluqi.Widget.jProgressBar.Rendering.Compress"/> is active (i.e. PrettyRender=false)
            which keeps everything in one line to keep the script size down)
            </summary>
            <param name="prettyRender">Flags pretty rendering on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Rendering.ShowCSS">
            <summary>
            Writes slim CSS to the browser (jQuery UI classes aren't expanded for non-JS users)
            </summary>
            <returns>ProgressBar object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Rendering.SetRenderCSS(System.Boolean)">
            <summary>
            Specifies that the CSS class the jQuery UI library should be written as part of widget
            rendering.  This is useful if you still want your pages to look "jQuery UI-ified" when
            your user has JavaScript disabled.
            </summary>
            <param name="renderCSS">Flags writing CSS class names on or off</param>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Rendering.SetTabDepth(System.Int32)">
            <summary>
            Specifies that when writing in pretty HTML mode (see <see cref="M:Fluqi.Widget.jProgressBar.Rendering.Compress"/>) 
            the Html helper should start writing at a particular tab depth (so everything lines
            up nicely when you view the source).
            </summary>
            <param name="indentation">How far the Html helper should indent the rendered HTML</param>
            <returns>ProgressBar object for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jProgressBar.Rendering.SetAutoScript(System.Boolean)">
            <summary>
            Specifies whether the control should be self-initialising (with it's own $(document).ready
            section, or if this should be left to the view to declare on purpose.
            </summary>
            <param name="autoScript">
            If true the control initialises itself
            If false the initialisation is left to the [calling] view
            </param>
            <returns>ProgressBar object for chainability</returns>
        </member>
        <member name="P:Fluqi.Widget.jProgressBar.Rendering.ProgressBar">
            <summary>
            Holds a reference to the <see cref="P:Fluqi.Widget.jProgressBar.Rendering.ProgressBar"/> object these options are for
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jMenuItem.MenuItems">
            <summary>
            Defines the logic for sub-menu items.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.#ctor(Fluqi.Widget.jMenuItem.MenuItem)">
            <summary>
            Constructor
            </summary>
            <param name="owner">MenuItem object _this_ item belongs to</param>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.#ctor(Fluqi.Widget.jMenuItem.MenuItem,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="owner">MenuItem object _this_ item belongs to</param>
            <param name="id">ID to allocate to the item</param>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.SubMenu">
            <summary>
            Entry point for adding sub-menu items using the fluent API.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.Add(System.String)">
            <summary>
            Adds a new item to the menu
            </summary>
            <param name="title">Text to appear in the URL (within the LI container)</param>
            <returns>Sub-menu list for chainability</returns>
            <remarks>
            This entry point has no URL on click.  The hyperlink will have a URL of "#".
            </remarks>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.Add(System.String,Fluqi.Core.Icons.eIconClass)">
            <summary>
            Adds a new item to the menu.
            </summary>
            <param name="title">Text to appear in the hyperlink</param>
            <param name="icon">Icon to display next to the menu item</param>
            <returns>Sub-menu list for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.Add(System.String,System.String)">
            <summary>
            Adds a new item to the menu.
            </summary>
            <param name="title">Text to appear in the hyperlink</param>
            <param name="url">URL to navigate to upon selecting the menu item.</param>
            <returns>Sub-menu list for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.Add(System.String,System.String,Fluqi.Core.Icons.eIconClass)">
            <summary>
            Adds a new item to the menu.
            </summary>
            <param name="title">Text to appear in the hyperlink</param>
            <param name="url">URL to navigate to upon selecting the menu item.</param>
            <param name="icon">Icon to display next to the menu item</param>
            <returns>Sub-menu list for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.AddDivider">
            <summary>
            Adds a divider into the menu.  Useful if you want to group certain items
            </summary>
            <returns>Sub-menu list for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.AddHtml(System.String)">
            <summary>
            Adds a new item to the menu, this replaces the hyperlink, but not the LI (or defined separator).
            </summary>
            <param name="markup">HTML to use</param>
            <returns>Sub-menu list for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.AddHtml(System.String,System.Object[])">
            <summary>
            Adds a new item to the menu, this replaces the hyperlink, but not the LI (or defined separator).
            This overloads allows a "string.Format" set of parameters to be passed in
            </summary>
            <param name="markup">HTML to use (including {0}, {1}, etc)</param>
            <param name="args">Arguments used to build up the markup</param>
            <returns>Sub-menu list for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.Back">
            <summary>
            Returns control to the parent sub-menu (allows the user to continue adding further menu items
            at the previous level).
            </summary>
            <returns>Sub-menu list for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.Configure">
            <summary>
            Provides an entry point to continue configuring the MenuItem that has just been defined.
            This allows an Icon to be added for instance.
            </summary>
            <returns>Last added MenuItem</returns>
        </member>
        <member name="M:Fluqi.Widget.jMenuItem.MenuItems.Finish">
            <summary>
            Returns control back to the underlying menu widget.  This in essence says "I've finished
            defining the menu items" and returns the fluent API back to the menu.
            </summary>
            <returns>Menu object to continue chaining</returns>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItems.Tag">
            <summary>
            Container Html Tag to use (by default this is a "UL").
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItems.Parent">
            <summary>
            Holds a reference to the menu the item is on
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jMenuItem.MenuItems._MenuItems">
            <summary>
            Holds the list of sub-menu items.
            </summary>
            <remarks>
            This is delberately hidden from the user so they only see what they need to see.
            </remarks>
        </member>
        <member name="T:Fluqi.Extension.jMenu_Extensions">
            <summary>
            Set of extensions to the Html and Page objects for creating a Menu widget through the library.
            </summary>
        </member>
        <member name="M:Fluqi.Extension.jMenu_Extensions.CreateMenu(System.Web.Mvc.HtmlHelper,System.String)">
            <summary>
            Creates a Menu control that can be configured and later rendered on the page.
            </summary>
            <param name="html">Html helper (used to get the HttpResponse object to render onto)</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Menu control</returns>
        </member>
        <member name="M:Fluqi.Extension.jMenu_Extensions.CreateMenu(System.Web.UI.Page,System.String)">
            <summary>
            Creates a Menu control that can be configured and later rendered on the page.
            </summary>
            <param name="page">WebForms page to render the control onto</param>
            <param name="id">ID to give to the accordion (must be unique on the page)</param>
            <returns>Created Menu control</returns>
        </member>
        <member name="T:Fluqi.Core.Speed">
            <summary>
            Models the Speed options available as standard with jQuery UI components
            </summary>
        </member>
        <member name="M:Fluqi.Core.Speed.SpeedToString(Fluqi.Core.Speed.eSpeed)">
            <summary>
            Converts the Speed option into a string.
            </summary>
            <param name="speed">Speed option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.Speed.SpeedToString(System.Int32)">
            <summary>
            Converts the speed option into a string.
            </summary>
            <param name="nSpeed">Speed option to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Fluqi.Core.Speed.ToList">
            <summary>
            Returns all the enumeration items as list;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluqi.Core.Speed.StringToSpeed(System.String)">
            <summary>
            Converts a string into an Speed into an enum option.
            </summary>
            <param name="speed">String to convert</param>
            <returns>Converted option</returns>
        </member>
        <member name="M:Fluqi.Core.Speed.SpeedsToString(System.Collections.Generic.List{Fluqi.Core.Speed.eSpeed})">
            <summary>
            Converts a list of Speeds into a (space) separated string.  Note Speeds
            specified as "None" are excluded.
            </summary>
            <param name="speeds"></param>
            <returns></returns>
        </member>
        <member name="T:Fluqi.Core.Speed.eSpeed">
            <summary>
            Models the Speed options available as standard with jQuery UI components
            </summary>
        </member>
        <member name="T:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup">
            <summary>
            Defines the logic and rendering of a single option.
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.PARENT_TAG">
            <summary>
            Tag used for OPTGROUP
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.CHILD_TAG">
            <summary>
            Tag used for child OPTGROUP items (i.e. OPTION)
            </summary>
        </member>
        <member name="F:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.LABEL_TAG">
            <summary>
            Attribute used for OPTGROUP label (i.e. LABEL)
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.#ctor(Fluqi.Widget.jSelectMenu.SelectMenu)">
            <summary>
            Constructor
            </summary>
            <param name="owner">SelectMenu object _this_ item belongs to</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.#ctor(Fluqi.Widget.jSelectMenuItem.SelectMenuItemBase)">
            <summary>
            Constructor for a child menu option
            </summary>
            <param name="parent">SelectMenuItem object _this_ item belongs to</param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.SetLabel(System.String)">
            <summary>
            Changes the label
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.SetDisabled">
            <summary>
            Sets this menu item as disabled
            </summary>
            <returns>this for chainability</returns>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.Reset">
            <summary>
            Resets the object back to a known state.
            </summary>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.BuildTagHtml(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Builds up the Html for a select menuitem
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.RenderChildren(Fluqi.Extension.Helpers.jStringBuilder)">
            <summary>
            Renders the list of SelectMenuItems to the string builder.  
            Note: For the SelectMenu this only happens for the root (i.e. this isn't recursive like the Menu control)
            </summary>
            <param name="sb">StringBuilder</param>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.IsDisabled">
            <summary>
            Specifies that the rendered menu item should be disabled.
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup.Label">
            <summary>
            Group label
            </summary>
        </member>
        <member name="P:Fluqi.Widget.jSelectMenuItem.SelectMenuOptGroup._IsRoot">
            <summary>
            Flags whether this MenuItem is the root of the menu.
            </summary>
        </member>
    </members>
</doc>
